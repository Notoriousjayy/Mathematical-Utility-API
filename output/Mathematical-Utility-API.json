{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Mathematical Utility API",
    "description" : "API for various mathematical utility functions and header files",
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "/"
  } ],
  "paths" : {
    "/grid/{gridId}" : {
      "put" : {
        "summary" : "Update the entire grid",
        "description" : "Replaces the existing grid with the one provided in the request body.",
        "parameters" : [ {
          "name" : "gridId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "The unique identifier of the grid to update."
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Grid"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Grid updated successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Grid"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request format."
          },
          "404" : {
            "description" : "Grid not found."
          }
        }
      },
      "patch" : {
        "summary" : "Update parts of the grid",
        "description" : "Applies partial updates to the grid identified by the gridId, such as changing specific cells with new or updated GameEntity instances.",
        "parameters" : [ {
          "name" : "gridId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "The unique identifier of the grid to be partially updated."
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/grid_gridId_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Grid partially updated successfully."
          },
          "400" : {
            "description" : "Invalid request format."
          },
          "404" : {
            "description" : "Grid not found."
          }
        }
      }
    },
    "/units/{unitId}/position" : {
      "get" : {
        "summary" : "Get a unit's current position.",
        "parameters" : [ {
          "name" : "unitId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Current unit position.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Point"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Update a unit's position.",
        "parameters" : [ {
          "name" : "unitId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/unitId_position_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Unit position updated successfully."
          }
        }
      }
    },
    "/entities/skeleton" : {
      "post" : {
        "summary" : "Create a new skeleton entity",
        "description" : "Creates a new skeleton with the specified properties.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Skeleton"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Skeleton created successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Skeleton"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request data."
          }
        }
      }
    },
    "/gameActor/{actorId}/position" : {
      "put" : {
        "summary" : "Update the position of a game actor",
        "parameters" : [ {
          "name" : "actorId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Point"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "GameActor's position updated successfully."
          }
        }
      }
    },
    "/entity/{entityId}/position" : {
      "put" : {
        "summary" : "Update an entity's position",
        "parameters" : [ {
          "name" : "entityId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Point"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Entity's position updated successfully."
          }
        }
      }
    },
    "/entities/statue" : {
      "post" : {
        "summary" : "Create a new statue entity",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Statue"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Statue entity created successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Statue"
                }
              }
            }
          }
        }
      }
    },
    "/entities/skeleton/{entityId}/update" : {
      "post" : {
        "summary" : "Update the state of a skeleton entity",
        "parameters" : [ {
          "name" : "entityId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Skeleton"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Skeleton entity updated successfully."
          }
        }
      }
    },
    "/commands/jump/undo" : {
      "post" : {
        "summary" : "Undo a jump command for a game actor",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JumpCommandRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Jump command undone successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_72"
                }
              }
            }
          }
        }
      }
    },
    "/commands/jump/execute" : {
      "post" : {
        "summary" : "Execute a jump command for a game actor",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JumpCommandRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Jump command executed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_73"
                }
              }
            }
          }
        }
      }
    },
    "/input/bindCommand" : {
      "post" : {
        "summary" : "Bind a command to a button",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CommandBinding"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Command bound to button successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_74"
                }
              }
            }
          }
        }
      }
    },
    "/input/command" : {
      "post" : {
        "summary" : "Process an input command for a game unit",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InputCommand"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Input command processed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_75"
                }
              }
            }
          }
        }
      }
    },
    "/grid" : {
      "get" : {
        "summary" : "Get the current state of the grid",
        "responses" : {
          "200" : {
            "description" : "The current state of the grid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Grid"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Create a new grid",
        "description" : "Creates a new grid with the specified dimensions and initial unit placements.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/grid_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Grid created successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Grid"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request data."
          }
        }
      }
    },
    "/gameEntity/{entityId}/components" : {
      "get" : {
        "summary" : "Get components of a game entity",
        "parameters" : [ {
          "name" : "entityId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Components of the GameEntity fetched successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_76"
                }
              }
            }
          }
        }
      }
    },
    "/gameActor/{actorId}/fire" : {
      "post" : {
        "summary" : "Command the game actor to fire",
        "parameters" : [ {
          "name" : "actorId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "GameActor fired successfully."
          }
        }
      }
    },
    "/commands/fire/undo" : {
      "post" : {
        "summary" : "Undo a fire command on a game actor",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FireCommand"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Fire command undone successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_77"
                }
              }
            }
          }
        }
      }
    },
    "/commands/fire" : {
      "post" : {
        "summary" : "Execute a fire command on a game actor",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FireCommand"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Fire command executed successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_78"
                }
              }
            }
          }
        }
      }
    },
    "/entity/{entityId}/renderData" : {
      "get" : {
        "summary" : "Get data necessary for rendering an entity",
        "parameters" : [ {
          "name" : "entityId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Data for rendering the entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        }
      }
    },
    "/entity/{entityId}/update" : {
      "post" : {
        "summary" : "Update an entity's state",
        "parameters" : [ {
          "name" : "entityId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EntityProperties"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Entity updated successfully."
          }
        }
      }
    },
    "/commands/execute" : {
      "post" : {
        "summary" : "Execute a command",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Command"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Command executed successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_79"
                }
              }
            }
          }
        }
      }
    },
    "/command/execute" : {
      "post" : {
        "summary" : "Execute a command for an entity",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Command"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Command executed successfully."
          }
        }
      }
    },
    "/entity/move" : {
      "post" : {
        "summary" : "Move an entity to a new position",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/entity_move_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Entity moved successfully."
          }
        }
      }
    },
    "/unit/move" : {
      "post" : {
        "summary" : "Move a unit to a new position",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MoveUnitCommand"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Unit moved successfully"
          }
        }
      }
    },
    "/gameEntity/{entityId}/position" : {
      "put" : {
        "summary" : "Update the position of a game entity",
        "parameters" : [ {
          "name" : "entityId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Point"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated the entity's position."
          }
        }
      }
    },
    "/command" : {
      "post" : {
        "summary" : "Execute a command",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Command"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Command executed successfully."
          }
        }
      }
    },
    "/gameEntity" : {
      "post" : {
        "summary" : "Create a new game entity",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GameEntity"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created a new game entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GameEntity"
                }
              }
            }
          }
        }
      }
    },
    "/orientedRectangleOrientedRectangleIntersection" : {
      "post" : {
        "summary" : "Check if two oriented rectangles intersect",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/orientedRectangleOrientedRectangleIntersection_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A boolean indicating if the two oriented rectangles intersect",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_80"
                }
              }
            }
          }
        }
      }
    },
    "/rectangleOrientedRectangleIntersection" : {
      "post" : {
        "summary" : "Check if a rectangle intersects with an oriented rectangle",
        "operationId" : "rectangleOrientedRectangleIntersection",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/rectangleOrientedRectangleIntersection_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A boolean indicating if the rectangle intersects with the oriented rectangle",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_80"
                }
              }
            }
          }
        }
      }
    },
    "/rectangleRectangleSAT" : {
      "post" : {
        "summary" : "Check if two rectangles intersect using SAT",
        "operationId" : "rectangleRectangleSAT",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/rectangleRectangleSAT_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A boolean indicating if the two rectangles intersect using SAT",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_80"
                }
              }
            }
          }
        }
      }
    },
    "/rectangleRectangleIntersection" : {
      "post" : {
        "summary" : "Check if two rectangles intersect",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/rectangleRectangleIntersection_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A boolean indicating if the two rectangles intersect",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_80"
                }
              }
            }
          }
        }
      }
    },
    "/circleOrientedRectangleIntersection" : {
      "post" : {
        "summary" : "Check if a circle intersects with an oriented rectangle",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/circleOrientedRectangleIntersection_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A boolean indicating if the circle intersects with the oriented rectangle",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_80"
                }
              }
            }
          }
        }
      }
    },
    "/circleRectangleIntersection" : {
      "post" : {
        "summary" : "Check if a circle intersects with a rectangle",
        "operationId" : "circleRectangleIntersection",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/circleRectangleIntersection_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A boolean indicating if the circle intersects with the rectangle",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_80"
                }
              }
            }
          }
        }
      }
    },
    "/circleCircleIntersection" : {
      "post" : {
        "summary" : "Check if two circles intersect",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/circleCircleIntersection_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A boolean indicating if the two circles intersect",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_80"
                }
              }
            }
          }
        }
      }
    },
    "/createPolyLine" : {
      "post" : {
        "summary" : "Create a new PolyLine",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PolyLine"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "PolyLine created successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolyLine"
                }
              }
            }
          }
        }
      }
    },
    "/lineOrientedRectangleIntersection" : {
      "post" : {
        "summary" : "Check if a line intersects with an oriented rectangle",
        "operationId" : "lineOrientedRectangleIntersection",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/lineOrientedRectangleIntersection_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A boolean indicating if the line intersects with the oriented rectangle",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_80"
                }
              }
            }
          }
        }
      }
    },
    "/lineRectangleIntersection" : {
      "post" : {
        "summary" : "Check if a line intersects with a rectangle",
        "operationId" : "lineRectangleIntersection",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/lineRectangleIntersection_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A boolean indicating if the line intersects with the rectangle",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_80"
                }
              }
            }
          }
        }
      }
    },
    "/lineCircleIntersection" : {
      "post" : {
        "summary" : "Check if a line intersects with a circle",
        "operationId" : "lineCircleIntersection",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/lineCircleIntersection_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A boolean indicating if the line intersects with the circle",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_80"
                }
              }
            }
          }
        }
      }
    },
    "/pointInOrientedRectangle" : {
      "post" : {
        "summary" : "Check if a point is inside a given oriented rectangle",
        "operationId" : "pointInOrientedRectangle",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/pointInOrientedRectangle_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A boolean indicating if the point is inside the oriented rectangle",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_81"
                }
              }
            }
          }
        }
      }
    },
    "/pointInRectangle" : {
      "post" : {
        "summary" : "Check if a point is inside a given rectangle",
        "operationId" : "pointInRectangle",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/pointInRectangle_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A boolean indicating if the point is inside the rectangle",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_82"
                }
              }
            }
          }
        }
      }
    },
    "/pointInCircle" : {
      "post" : {
        "summary" : "Check if a point is inside a given circle",
        "operationId" : "pointInCircle",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/pointInCircle_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A boolean indicating if the point is inside the circle",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_83"
                }
              }
            }
          }
        }
      }
    },
    "/orientedRectangle" : {
      "post" : {
        "tags" : [ "Geometric Calculations" ],
        "summary" : "Create a new OrientedRectangle",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrientedRectangle"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "OrientedRectangle created successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_201"
                }
              }
            }
          }
        }
      }
    },
    "/orientedRectangle/{id}" : {
      "get" : {
        "tags" : [ "Geometric Calculations" ],
        "summary" : "Retrieve an existing OrientedRectangle by ID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OrientedRectangle retrieved successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrientedRectangle"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Geometric Calculations" ],
        "summary" : "Update an existing OrientedRectangle by ID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrientedRectangle"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OrientedRectangle updated successfully."
          }
        }
      },
      "delete" : {
        "tags" : [ "Geometric Calculations" ],
        "summary" : "Delete an existing OrientedRectangle by ID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OrientedRectangle deleted successfully."
          }
        }
      }
    },
    "/rectangle/create" : {
      "post" : {
        "tags" : [ "Geometric Calculations" ],
        "summary" : "Create a new Rectangle2D object",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Rectangle2D"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "The rectangle was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_201_1"
                }
              }
            }
          }
        }
      }
    },
    "/rectangle/update/position" : {
      "patch" : {
        "tags" : [ "Geometric Calculations" ],
        "summary" : "Update the position of an existing Rectangle2D object",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_position_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The rectangle's position was successfully updated."
          }
        }
      }
    },
    "/rectangle/update/size" : {
      "patch" : {
        "tags" : [ "Geometric Calculations" ],
        "summary" : "Update the size of an existing Rectangle2D object",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_size_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The rectangle's size was successfully updated."
          }
        }
      }
    },
    "/accelerate-series" : {
      "post" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Accelerate series summation.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SeriesSummationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Accelerated summation result.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SeriesSummationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request parameters."
          },
          "500" : {
            "description" : "Internal server error."
          }
        }
      }
    },
    "/adapt/operation" : {
      "post" : {
        "tags" : [ "Adaptive Algorithms" ],
        "summary" : "Perform an operation with Adapt",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Adapt"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Operation result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/addText" : {
      "post" : {
        "tags" : [ "Graphics and Drawing" ],
        "summary" : "Add text to the PS page at a given position.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddTextRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Text added successfully."
          }
        }
      }
    },
    "/alignStrings" : {
      "post" : {
        "tags" : [ "String Manipulation" ],
        "summary" : "Align two strings.",
        "requestBody" : {
          "description" : "Data needed for string alignment",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StringAlignmentRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully aligned strings with a summary.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StringAlignmentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/amoeba/minimize" : {
      "post" : {
        "tags" : [ "Optimization Algorithms" ],
        "summary" : "Minimize a function using the Amoeba method",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/amoeba_minimize_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Minimization result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Amoeba"
                }
              }
            }
          }
        }
      }
    },
    "/analysis/periodogram" : {
      "post" : {
        "tags" : [ "Signal Processing" ],
        "summary" : "Periodogram Power Spectral Density Estimation",
        "description" : "Estimates the power spectral density of a time series using the Lomb-Scargle periodogram method.",
        "operationId" : "estimatePeriodogram",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PeriodogramRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The estimated power spectral density and related statistics.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PeriodogramResponse"
                }
              }
            }
          }
        }
      }
    },
    "/annealing/optimize" : {
      "post" : {
        "tags" : [ "Optimization Algorithms" ],
        "summary" : "Optimize the order of points using the Anneal algorithm",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AnnealInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The optimized order of points",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AnnealOutput"
                }
              }
            }
          }
        }
      }
    },
    "/arithcode/decode" : {
      "post" : {
        "tags" : [ "Data Encoding and Compression" ],
        "summary" : "Decode a message using arithmetic coding.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DecodingRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully decoded message.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DecodingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/arithcode/encode" : {
      "post" : {
        "tags" : [ "Data Encoding and Compression" ],
        "summary" : "Encode a message using arithmetic coding.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EncodingRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully encoded message.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EncodingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/arithmetic/mpadd" : {
      "post" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Multiple Precision Addition",
        "description" : "Adds two multiple precision numbers represented as arrays of unsigned characters.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MpAddRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Result of the addition.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MpResult"
                }
              }
            }
          }
        }
      }
    },
    "/arithmetic/mpmul" : {
      "post" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Multiple Precision Multiplication",
        "description" : "Multiplies two multiple precision numbers.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MpMulRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Result of the multiplication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MpResult"
                }
              }
            }
          }
        }
      }
    },
    "/arithmetic/mpsub" : {
      "post" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Multiple Precision Subtraction",
        "description" : "Subtracts one multiple precision number from another.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MpSubRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Result of the subtraction, including the sign.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MpSubResponse"
                }
              }
            }
          }
        }
      }
    },
    "/astronomy/flmoon" : {
      "get" : {
        "tags" : [ "Astronomical Calculations" ],
        "summary" : "Calculate the phase of the moon for a given month",
        "parameters" : [ {
          "name" : "n",
          "in" : "query",
          "description" : "Month number starting from 0",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "nph",
          "in" : "query",
          "description" : "Phase of the moon (0 = New, 1 = First quarter, 2 = Full, 3 = Last quarter)",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Julian day and fraction of the phase of the moon",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_9"
                }
              }
            }
          }
        }
      }
    },
    "/autoregressive-coefficients" : {
      "post" : {
        "tags" : [ "Statistical Analysis" ],
        "summary" : "Estimate autoregressive model coefficients",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/autoregressivecoefficients_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully estimated coefficients",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_54"
                }
              }
            }
          }
        }
      }
    },
    "/bessel/airy_ai" : {
      "post" : {
        "tags" : [ "Special Mathematical Functions" ],
        "summary" : "Calculate Airy function Ai",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/bessel_airy_ai_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Calculation result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_6"
                }
              }
            }
          }
        }
      }
    },
    "/bessel/j0" : {
      "post" : {
        "tags" : [ "Special Mathematical Functions" ],
        "summary" : "Calculate Bessel function of the first kind (J0)",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/bessel_j0_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Calculation result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_2"
                }
              }
            }
          }
        }
      }
    },
    "/bessel/j1" : {
      "post" : {
        "tags" : [ "Special Mathematical Functions" ],
        "summary" : "Calculate Bessel function of the first kind (J1)",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/bessel_j1_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Calculation result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_3"
                }
              }
            }
          }
        }
      }
    },
    "/bessel/jnu" : {
      "post" : {
        "tags" : [ "Special Mathematical Functions" ],
        "summary" : "Calculate Bessel function of the first kind (J_nu)",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/bessel_jnu_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Calculation result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_4"
                }
              }
            }
          }
        }
      }
    },
    "/bessel/ynu" : {
      "post" : {
        "tags" : [ "Special Mathematical Functions" ],
        "summary" : "Calculate Bessel function of the second kind (Y_nu)",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/bessel_ynu_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Calculation result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_5"
                }
              }
            }
          }
        }
      }
    },
    "/calculateSphFpt" : {
      "post" : {
        "tags" : [ "Physical Sciences" ],
        "summary" : "Calculate zeros of spherical Bessel function.",
        "requestBody" : {
          "description" : "Request parameters for spherical Bessel function zeros calculation.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SphFptRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully calculated zeros of the spherical Bessel function.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SphFptResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request parameters."
          }
        }
      }
    },
    "/calculateSphoot" : {
      "post" : {
        "tags" : [ "Physical Sciences" ],
        "summary" : "Calculate eigenvalue for spherical harmonics.",
        "requestBody" : {
          "description" : "Request parameters for spherical harmonics calculation.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SphootRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully calculated eigenvalue.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SphootResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request parameters."
          }
        }
      }
    },
    "/calendar/caldat" : {
      "get" : {
        "tags" : [ "Date and Time Operations" ],
        "summary" : "Convert a Julian day number to a date",
        "parameters" : [ {
          "name" : "julian",
          "in" : "query",
          "description" : "Julian day number",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Date corresponding to the Julian day number",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_8"
                }
              }
            }
          }
        }
      }
    },
    "/calendar/julday" : {
      "get" : {
        "tags" : [ "Date and Time Operations" ],
        "summary" : "Convert a date to Julian day number",
        "parameters" : [ {
          "name" : "mm",
          "in" : "query",
          "description" : "Month of the year (1-12)",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Day of the month",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "iyyy",
          "in" : "query",
          "description" : "Year",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Julian day number",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_7"
                }
              }
            }
          }
        }
      }
    },
    "/chebyshev/create" : {
      "post" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Create a Chebyshev polynomial approximation of a function.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChebyshevRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Chebyshev polynomial created successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChebyshevResponse"
                }
              }
            }
          }
        }
      }
    },
    "/chebyshev/derivative" : {
      "post" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Get the derivative of a Chebyshev polynomial.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChebyshevResponse"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Derivative obtained successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChebyshevResponse"
                }
              }
            }
          }
        }
      }
    },
    "/chebyshev/evaluate" : {
      "post" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Evaluate a Chebyshev polynomial at a given point.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/chebyshev_evaluate_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Polynomial evaluated successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_10"
                }
              }
            }
          }
        }
      }
    },
    "/chebyshev/integral" : {
      "post" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Get the integral of a Chebyshev polynomial.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChebyshevResponse"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Integral obtained successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChebyshevResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cholesky/decompose" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Perform Cholesky decomposition on a matrix.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CholeskyRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Cholesky decomposition performed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CholeskyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cholesky/solve" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Solve a linear equation system using the Cholesky decomposition.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/cholesky_solve_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Equation solved successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_11"
                }
              }
            }
          }
        }
      }
    },
    "/chsone" : {
      "post" : {
        "tags" : [ "Statistical Testing" ],
        "summary" : "Perform a chi-squared test for a single dataset.",
        "requestBody" : {
          "description" : "Data for chi-squared test.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StatisticalTestRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Chi-squared test results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatisticalTestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/chstwo" : {
      "post" : {
        "tags" : [ "Statistical Testing" ],
        "summary" : "Perform a chi-squared test for two datasets.",
        "requestBody" : {
          "description" : "Data for chi-squared test.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StatisticalTestRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Chi-squared test results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatisticalTestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/circumcircle" : {
      "post" : {
        "tags" : [ "Geometric Calculations" ],
        "summary" : "Calculate the circumcircle of a triangle formed by three points",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CircumcircleRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Circumcircle calculated successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CircumcircleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cisi" : {
      "post" : {
        "tags" : [ "Special Mathematical Functions" ],
        "summary" : "Calculate the cosine and sine integrals Ci(x) and Si(x)",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CisiRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Cosine and sine integrals calculated successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CisiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/classify" : {
      "post" : {
        "tags" : [ "Machine Learning and Data Mining" ],
        "summary" : "Perform classification on given data using a trained SVM model.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SVMClassificationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Classification results",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SVMClassificationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cntab" : {
      "post" : {
        "tags" : [ "Statistical Analysis" ],
        "summary" : "Analyze a contingency table.",
        "requestBody" : {
          "description" : "Contingency table data.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StatisticalTestRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Contingency table analysis results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatisticalTestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/compute-determinant" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Compute the determinant of a matrix using the LU decomposition.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Matrix"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Determinant computed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_71"
                }
              }
            }
          }
        }
      }
    },
    "/compute-inverse" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Compute the inverse of a matrix using the LU decomposition.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Matrix"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Inverse computed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Matrix"
                }
              }
            }
          }
        }
      }
    },
    "/compute-sfroid" : {
      "post" : {
        "tags" : [ "Physical Sciences" ],
        "summary" : "Compute solutions for the Sfroid differential equation.",
        "description" : "Solves the Sfroid differential equation for given m, n, and c^2 values.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SfroidRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully computed the solutions.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SfroidResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          },
          "500" : {
            "description" : "Internal server error."
          }
        }
      }
    },
    "/convolution" : {
      "post" : {
        "tags" : [ "Signal Processing" ],
        "summary" : "Perform convolution or deconvolution on the given data with a response function",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConvolvRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Convolution or deconvolution completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConvolvResponse"
                }
              }
            }
          }
        }
      }
    },
    "/correlation" : {
      "post" : {
        "tags" : [ "Statistical Analysis" ],
        "summary" : "Perform correlation on two given data sets",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CorrelationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Correlation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CorrelationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cosft1" : {
      "post" : {
        "tags" : [ "Signal Processing" ],
        "summary" : "Perform a Cosine Fourier Transform variant 1.",
        "description" : "Compute the Cosine Fourier Transform variant 1 on a set of data. This operation is useful for applications requiring symmetric analysis and processing.\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/cosft1_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Cosine Fourier Transform variant 1 completed successfully."
          }
        }
      }
    },
    "/cosft2" : {
      "post" : {
        "tags" : [ "Signal Processing" ],
        "summary" : "Perform a Cosine Fourier Transform variant 2.",
        "description" : "Compute the Cosine Fourier Transform variant 2 on a set of data. This operation is useful for applications that require distinguishing between forward and inverse transforms. Note that isign is specifically mentioned for cosft2, as it's the only function among these that requires it for indicating the direction of the transform.\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/cosft2_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Cosine Fourier Transform variant 2 completed successfully."
          }
        }
      }
    },
    "/crc/calculate" : {
      "post" : {
        "tags" : [ "Data Integrity and Security" ],
        "summary" : "Calculate CRC",
        "description" : "This endpoint calculates the Cyclic Redundancy Check (CRC) for a given string using a specified polynomial.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/crc_calculate_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The calculated CRC value.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_31"
                }
              }
            }
          }
        }
      }
    },
    "/crc/grayCode" : {
      "post" : {
        "tags" : [ "Computer Science Fundamentals" ],
        "summary" : "Gray Code Conversion",
        "description" : "Convert a given number to its Gray code equivalent or vice versa.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/crc_grayCode_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The converted number in Gray code or from Gray code.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_34"
                }
              }
            }
          }
        }
      }
    },
    "/createPage" : {
      "post" : {
        "tags" : [ "Visualization and Graphics" ],
        "summary" : "Create a new PS page with initial settings.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePageRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "PS page created successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PSPageResponse"
                }
              }
            }
          }
        }
      }
    },
    "/createQuadtree" : {
      "post" : {
        "tags" : [ "Spatial Data Structures" ],
        "summary" : "Create a quadtree with the given points.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/QuadtreeCreationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Quadtree created successfully."
          },
          "400" : {
            "description" : "Invalid request."
          }
        }
      }
    },
    "/curve/initialize" : {
      "post" : {
        "tags" : [ "Data Analysis and Visualization" ],
        "summary" : "Initialize a curve for interpolation.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CurveInitRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Curve initialization successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CurveInitResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          }
        }
      }
    },
    "/curve/interp" : {
      "post" : {
        "tags" : [ "Data Analysis and Visualization" ],
        "summary" : "Perform curve interpolation.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CurveInterpRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Interpolation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CurveInterpResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          }
        }
      }
    },
    "/dawson" : {
      "post" : {
        "tags" : [ "Special Mathematical Functions" ],
        "summary" : "Calculate Dawson's integral for a given x",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DawsonRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Dawson's integral calculation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DawsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/decchk" : {
      "post" : {
        "tags" : [ "Data Integrity and Security" ],
        "summary" : "Check the validity of a string based on its checksum",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/decchk_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Checksum validation result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_12"
                }
              }
            }
          }
        }
      }
    },
    "/decompose" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Decompose a matrix using SVD.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Matrix"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "SVD decomposition result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SVDResult"
                }
              }
            }
          }
        }
      }
    },
    "/delaunay/triangulate" : {
      "post" : {
        "tags" : [ "Geometric Calculations" ],
        "summary" : "Perform Delaunay triangulation on a set of points.",
        "operationId" : "delaunayTriangulate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/delaunay_triangulate_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Triangulation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DelaunayResponse"
                }
              }
            }
          }
        }
      }
    },
    "/dfpminimize" : {
      "post" : {
        "tags" : [ "Optimization Algorithms" ],
        "summary" : "Perform Davidon-Fletcher-Powell minimization on a function.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DFPMinimizationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Minimization successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DFPMinimizationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input parameters."
          }
        }
      }
    },
    "/dft/correction" : {
      "post" : {
        "tags" : [ "Signal Processing" ],
        "summary" : "Calculate correction factors for discrete Fourier transform.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DftcorRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Correction factor calculation result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DftcorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/dft/integration" : {
      "post" : {
        "tags" : [ "Signal Processing" ],
        "summary" : "Perform integration using discrete Fourier transform.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DftintRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Integration result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DftintResponse"
                }
              }
            }
          }
        }
      }
    },
    "/difeq/calculate" : {
      "post" : {
        "tags" : [ "Differential Equations" ],
        "summary" : "Perform calculations based on the differential equation context",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DifeqCalculateRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Calculation performed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DifeqCalculateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/difeq/initialize" : {
      "post" : {
        "tags" : [ "Differential Equations" ],
        "summary" : "Initialize differential equation context",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DifeqInitializeRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Differential equation context initialized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DifeqInitializeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/distribution/gamma" : {
      "post" : {
        "tags" : [ "Probability Distributions" ],
        "summary" : "Gamma Distribution",
        "description" : "Calculate properties of the gamma distribution: PDF, CDF, or the inverse CDF.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/distribution_gamma_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The result of the distribution operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_35"
                }
              }
            }
          }
        }
      }
    },
    "/drawLine" : {
      "post" : {
        "tags" : [ "Graphics and Drawing" ],
        "summary" : "Draw a line segment between two points.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DrawLineRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Line drawn successfully."
          }
        }
      }
    },
    "/drawPolyline" : {
      "post" : {
        "tags" : [ "Graphics and Drawing" ],
        "summary" : "Draw a polyline or polygon.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DrawPolylineRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Polyline drawn successfully."
          }
        }
      }
    },
    "/dynpro/optimize" : {
      "post" : {
        "tags" : [ "Optimization Algorithms" ],
        "summary" : "Find the optimal sequence of states using dynamic programming",
        "operationId" : "optimizeDynPro",
        "requestBody" : {
          "description" : "Request parameters for dynamic programming optimization",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DynProRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Optimal sequence of states",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DynProResponse"
                }
              }
            }
          }
        }
      }
    },
    "/eclass" : {
      "post" : {
        "tags" : [ "Data Classification" ],
        "summary" : "Equivalence Class Formation",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EClassRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated equivalence classes",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EClassResponse"
                }
              }
            }
          }
        }
      }
    },
    "/eigen/jacobi" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Compute eigenvalues and eigenvectors using Jacobi's method",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JacobiRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Eigenvalues and eigenvectors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JacobiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/eigen/symmeig" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Compute eigenvalues and eigenvectors for symmetric matrices",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SymmeigRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Eigenvalues and eigenvectors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SymmeigResponse"
                }
              }
            }
          }
        }
      }
    },
    "/eigen/unsymmeig" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Compute eigenvalues and eigenvectors of a nonsymmetric matrix.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UnsymmeigRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Eigenvalues and eigenvectors of the nonsymmetric matrix.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnsymmeigResponse"
                }
              }
            }
          }
        }
      }
    },
    "/erf" : {
      "post" : {
        "tags" : [ "Special Mathematical Functions" ],
        "summary" : "Computes the error function.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SingleValueRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SingleValueResponse"
                }
              }
            }
          }
        }
      }
    },
    "/erfc" : {
      "post" : {
        "tags" : [ "Special Mathematical Functions" ],
        "summary" : "Computes the complementary error function.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SingleValueRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SingleValueResponse"
                }
              }
            }
          }
        }
      }
    },
    "/expondist/cdf" : {
      "post" : {
        "tags" : [ "Probability Distributions" ],
        "summary" : "Calculate the cumulative distribution function for the Exponential distribution",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExpondistRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "CDF calculation result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DistributionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/expondist/invcdf" : {
      "post" : {
        "tags" : [ "Probability Distributions" ],
        "summary" : "Calculate the inverse cumulative distribution function for the Exponential distribution",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InverseCDFRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Inverse CDF calculation result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InverseCDFResponse"
                }
              }
            }
          }
        }
      }
    },
    "/expondist/p" : {
      "post" : {
        "tags" : [ "Probability Distributions" ],
        "summary" : "Calculate the probability density for the Exponential distribution",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExpondistRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Probability density calculation result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DistributionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/factorizeMatrix" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Factorize a square matrix for solving linear systems.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MatrixFactorizationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Matrix factorization completed successfully."
          },
          "400" : {
            "description" : "Invalid input data."
          },
          "500" : {
            "description" : "Error during matrix factorization."
          }
        }
      }
    },
    "/fasper" : {
      "post" : {
        "tags" : [ "Signal Processing" ],
        "summary" : "Computes the Lomb-Scargle periodogram for unevenly sampled data.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FasperRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FasperResponse"
                }
              }
            }
          }
        }
      }
    },
    "/fermi" : {
      "post" : {
        "tags" : [ "Quantum Mechanics" ],
        "summary" : "Perform a calculation with the Fermi function.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FermiRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful Fermi function calculation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FermiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request."
          }
        }
      }
    },
    "/fermi/val" : {
      "post" : {
        "tags" : [ "Quantum Mechanics" ],
        "summary" : "Calculate the Fermi function value.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FermiRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Calculation successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FermiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/fft" : {
      "post" : {
        "tags" : [ "Signal Processing" ],
        "summary" : "Perform an N-dimensional FFT on data.",
        "description" : "This endpoint accepts multidimensional data and performs an N-dimensional Fast Fourier Transform. The transform can be either forward or inverse, as specified. Dimensions must be powers of two.\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/fft_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "FFT operation completed. The input data array is replaced with the transformed data."
          }
        }
      }
    },
    "/fftTransform" : {
      "post" : {
        "tags" : [ "Signal Processing" ],
        "summary" : "Apply FFT and frequency domain filter",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FFTRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "FFT and filter applied successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FFTResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request, invalid input data"
          }
        }
      }
    },
    "/findNearPoints" : {
      "post" : {
        "tags" : [ "Spatial Analysis" ],
        "summary" : "Find points near a given point within a specified radius.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NearPointsRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully found nearby points.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NearPointsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request."
          }
        }
      }
    },
    "/findRoot" : {
      "post" : {
        "tags" : [ "Numerical Methods" ],
        "summary" : "Find the root of a function within a given interval.",
        "description" : "Finds the root of a given function within a specified interval using various methods like bisection, false position, secant, Newton-Raphson, etc. The method to use can be specified in the request body.\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/findRoot_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Root found successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_63"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request, e.g., non-bracketed interval or invalid method."
          },
          "500" : {
            "description" : "Error during the root-finding operation."
          }
        }
      }
    },
    "/findRoots" : {
      "post" : {
        "tags" : [ "Numerical Methods" ],
        "summary" : "Find the roots of a polynomial.",
        "description" : "Finds the roots of a given polynomial. For quadratic polynomials, a specific quadratic solver is used. For higher degree polynomials, Laguerre's method is used and the roots can optionally be polished.\n",
        "requestBody" : {
          "description" : "Polynomial coefficients and option to polish the roots for non-quadratic polynomials.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/findRoots_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Polynomial roots.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_62"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          },
          "500" : {
            "description" : "Error finding the roots."
          }
        }
      }
    },
    "/fit-svd-1d" : {
      "post" : {
        "tags" : [ "Statistical Modeling" ],
        "summary" : "Perform singular value decomposition fitting for single dimensional data.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FitsvdRequest1D"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Fitting operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FitsvdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/fit-svd-md" : {
      "post" : {
        "tags" : [ "Statistical Modeling" ],
        "summary" : "Perform singular value decomposition fitting for multidimensional data.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FitsvdRequestMD"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Fitting operation completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FitsvdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/fitexy" : {
      "post" : {
        "tags" : [ "Regression Analysis" ],
        "summary" : "Perform linear regression considering errors in both x and y coordinates.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FitexyRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Regression performed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FitexyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/fitlin" : {
      "post" : {
        "tags" : [ "Linear Modeling" ],
        "summary" : "Perform linear fitting based on a predefined set of functions.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FitlinRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Fitting performed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FitlinResponse"
                }
              }
            }
          }
        }
      }
    },
    "/fitmed" : {
      "post" : {
        "tags" : [ "Statistical Modeling" ],
        "summary" : "Perform median-based linear fitting.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FitmedRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Fitting performed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FitmedResponse"
                }
              }
            }
          }
        }
      }
    },
    "/fitmrq" : {
      "post" : {
        "tags" : [ "Non-linear Modeling" ],
        "summary" : "Perform Marquardt-Levenberg nonlinear fitting.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FitmrqRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Fitting performed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FitmrqResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Error in fitting process.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FitmrqResponse"
                }
              }
            }
          }
        }
      }
    },
    "/fix-roots" : {
      "post" : {
        "tags" : [ "Numerical Methods" ],
        "summary" : "Modify polynomial roots to ensure they are within the unit circle",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "number"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully modified roots",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "number"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/four1" : {
      "post" : {
        "tags" : [ "Signal Processing" ],
        "summary" : "Perform a 1-dimensional Fast Fourier Transform.",
        "description" : "Compute the 1-dimensional FFT or inverse FFT of a data set.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/four1_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "FFT operation completed successfully."
          }
        }
      }
    },
    "/fourier-transform" : {
      "post" : {
        "tags" : [ "Signal Processing" ],
        "summary" : "Perform a Fast Fourier Transform using external file storage.",
        "description" : "This endpoint accepts paths to four prepared files and performs a Fast Fourier Transform on the data. The files are used to store large datasets that do not fit into memory. The operation can be either forward or inverse, as specified by the user.\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/fouriertransform_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "FFT operation completed successfully. The files now contain the transformed data."
          }
        }
      }
    },
    "/fpoly" : {
      "get" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Generate a vector of polynomial basis functions.",
        "parameters" : [ {
          "name" : "x",
          "in" : "query",
          "description" : "The input value for polynomial generation.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Vector generated successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "number"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fredholm-equation" : {
      "post" : {
        "tags" : [ "Integral Equations" ],
        "summary" : "Solve a Fredholm equation of the second kind.",
        "description" : "Solves a Fredholm equation of the second kind using matrix methods and LU decomposition.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/fredholmequation_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully solved the Fredholm equation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_14"
                }
              }
            }
          }
        }
      }
    },
    "/fredholm-solver" : {
      "post" : {
        "tags" : [ "Integral Equations" ],
        "summary" : "Solve Fredholm integral equation of the second kind.",
        "description" : "Solves a Fredholm integral equation of the second kind using Gaussian quadrature and LU decomposition.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/fredholmsolver_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully solved the Fredholm integral equation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_15"
                }
              }
            }
          }
        }
      }
    },
    "/frenel-solver" : {
      "post" : {
        "tags" : [ "Special Mathematical Functions" ],
        "summary" : "Calculate the complex Frenel integral for a given input.",
        "description" : "Solves the complex Frenel integral S(x) and C(x) for a given input x.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/frenelsolver_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully calculated the complex Frenel values.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_17"
                }
              }
            }
          }
        }
      }
    },
    "/fresnel" : {
      "post" : {
        "tags" : [ "Optics" ],
        "summary" : "Compute the complex Fresnel integral for a given input.",
        "description" : "Computes the complex Fresnel integral, returning the real and imaginary parts of the result. This function is useful in wave optics and various fields of physics.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/fresnel_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The complex Fresnel integral was successfully computed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_16"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input provided."
          },
          "500" : {
            "description" : "An error occurred while computing the complex Fresnel integral."
          }
        }
      }
    },
    "/ftest" : {
      "post" : {
        "tags" : [ "Statistical Testing" ],
        "summary" : "Perform an F-test for comparing two variances.",
        "requestBody" : {
          "description" : "Data for F-test.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StatisticalTestRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "F-test results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatisticalTestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/gaussian-mixture-model/estep" : {
      "post" : {
        "tags" : [ "Machine Learning" ],
        "summary" : "Perform the E-step of the Gaussian Mixture Model.",
        "description" : "Updates the responsibilities based on current model parameters.",
        "responses" : {
          "200" : {
            "description" : "E-step completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GaussianMixtureModelResponse"
                }
              }
            }
          }
        }
      }
    },
    "/gaussian-mixture-model/initialize" : {
      "post" : {
        "tags" : [ "Machine Learning" ],
        "summary" : "Initialize a Gaussian Mixture Model with data and initial means.",
        "description" : "Initializes the model with the given data points and initial means for each cluster.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/gaussianmixturemodel_initialize_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Model initialized successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_19"
                }
              }
            }
          }
        }
      }
    },
    "/gaussian-mixture-model/mstep" : {
      "post" : {
        "tags" : [ "Machine Learning" ],
        "summary" : "Perform the M-step of the Gaussian Mixture Model.",
        "description" : "Updates the means, covariances, and fractions based on current responsibilities.",
        "responses" : {
          "200" : {
            "description" : "M-step completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GaussianMixtureModelResponse"
                }
              }
            }
          }
        }
      }
    },
    "/gaussian-quadrature/gauher" : {
      "post" : {
        "tags" : [ "Numerical Integration" ],
        "summary" : "Compute weights and abscissas for Gauss-Hermite quadrature.",
        "description" : "Computes the abscissas and weights of the Gauss-Hermite quadrature for integrating e^(-x^2) * f(x) over (-inf, inf).",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/gaussianquadrature_gauher_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Abscissas and weights computed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_20"
                }
              }
            }
          }
        }
      }
    },
    "/gaussian-quadrature/gaujac" : {
      "post" : {
        "tags" : [ "Numerical Integration" ],
        "summary" : "Compute weights and abscissas for Gauss-Jacobi quadrature.",
        "description" : "Given the values of alf and bet, computes the abscissas and weights of the Gauss-Jacobi quadrature.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/gaussianquadrature_gaujac_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Abscissas and weights computed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_20"
                }
              }
            }
          }
        }
      }
    },
    "/gaussian-quadrature/gaulag" : {
      "post" : {
        "tags" : [ "Numerical Integration" ],
        "summary" : "Compute weights and abscissas for Gauss-Laguerre quadrature.",
        "description" : "Given the value of alf, computes the abscissas and weights of the Gauss-Laguerre quadrature.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/gaussianquadrature_gaulag_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Abscissas and weights computed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_20"
                }
              }
            }
          }
        }
      }
    },
    "/gaussian-quadrature/gauleg" : {
      "post" : {
        "tags" : [ "Numerical Integration" ],
        "summary" : "Compute weights and abscissas for Gauss-Legendre quadrature.",
        "description" : "Given the lower and upper limits of integration x1 and x2, this method computes the abscissas and weights.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/gaussianquadrature_gauleg_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Abscissas and weights computed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_20"
                }
              }
            }
          }
        }
      }
    },
    "/generate-markov-chain" : {
      "post" : {
        "tags" : [ "Stochastic Processes" ],
        "summary" : "Generates a Markov chain sequence based on a transition matrix",
        "operationId" : "generateMarkovChain",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/generatemarkovchain_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Markov chain sequence generated successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_55"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input parameters"
          }
        }
      }
    },
    "/generatePlot" : {
      "post" : {
        "tags" : [ "Visualization and Graphics" ],
        "summary" : "Generate a plot for a given function and range",
        "description" : "Generates a plot image for the specified function over the given x-range.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/generatePlot_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Plot generated successfully.",
            "content" : {
              "image/png" : {
                "schema" : {
                  "type" : "string",
                  "description" : "The generated plot as a PNG image.",
                  "format" : "binary"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          },
          "500" : {
            "description" : "Error during plot generation."
          }
        }
      }
    },
    "/generateSobolSequence" : {
      "post" : {
        "tags" : [ "Monte Carlo Methods" ],
        "summary" : "Generate Sobol sequences.",
        "description" : "Initializes or generates Sobol sequences based on the dimensionality and number of points specified.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SobolSequenceRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Sobol sequence generated successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SobolSequenceResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          },
          "500" : {
            "description" : "Error during Sobol sequence generation."
          }
        }
      }
    },
    "/generateVoronoi" : {
      "post" : {
        "tags" : [ "Computational Geometry" ],
        "summary" : "Generate a Voronoi diagram from given points.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PointsRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Voronoi diagram edges and related information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VoronoiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/geometry/box/create" : {
      "post" : {
        "tags" : [ "Geometric Calculations" ],
        "summary" : "Create a Box",
        "description" : "Creates a box with specified lower and upper corner points.",
        "operationId" : "createBox",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BoxCreationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully created the box.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BoxResponse"
                }
              }
            }
          }
        }
      }
    },
    "/geometry/box/point-distance" : {
      "post" : {
        "tags" : [ "Geometric Calculations" ],
        "summary" : "Calculate Distance Between Box and Point",
        "description" : "Calculates the Euclidean distance from a point to the nearest edge of a box.",
        "operationId" : "calculateDistanceBoxToPoint",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BoxPointDistanceRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The calculated distance from the point to the box.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DistanceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/geometry/point/create" : {
      "post" : {
        "tags" : [ "Geometric Calculations" ],
        "summary" : "Create a Point",
        "description" : "Creates a point with specified dimensions and coordinates.",
        "operationId" : "createPoint",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PointCreationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully created the point.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PointResponse"
                }
              }
            }
          }
        }
      }
    },
    "/geometry/point/distance" : {
      "post" : {
        "tags" : [ "Geometric Calculations" ],
        "summary" : "Calculate Distance Between Points",
        "description" : "Calculates the Euclidean distance between two points.",
        "operationId" : "calculateDistanceBetweenPoints",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PointsDistanceRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The calculated distance between the points.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DistanceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/gray/decode" : {
      "post" : {
        "tags" : [ "Data Encoding and Compression" ],
        "summary" : "Decode from Gray Code",
        "description" : "This endpoint decodes a Gray code representation back to its integer value.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/gray_decode_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The integer value of the input Gray code.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_33"
                }
              }
            }
          }
        }
      }
    },
    "/gray/encode" : {
      "post" : {
        "tags" : [ "Data Encoding and Compression" ],
        "summary" : "Encode to Gray Code",
        "description" : "This endpoint encodes an integer to its Gray code representation.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/gray_encode_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The Gray code representation of the input integer.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_32"
                }
              }
            }
          }
        }
      }
    },
    "/hash/all-elements" : {
      "post" : {
        "tags" : [ "Data Security and Hashing" ],
        "summary" : "Perform hashing on all elements of a list using Pseudo-DES.",
        "description" : "Hashes all elements of a given list of unsigned integers using a customized algorithm that utilizes Pseudo-DES for hashing.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/hash_allelements_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "All elements hashed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_26"
                }
              }
            }
          }
        }
      }
    },
    "/hash/erase" : {
      "post" : {
        "tags" : [ "Data Management" ],
        "summary" : "Erases an element associated with a key.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/hash_erase_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Element erased successfully."
          },
          "404" : {
            "description" : "Element not found."
          }
        }
      }
    },
    "/hash/pseudo-des" : {
      "post" : {
        "tags" : [ "Data Security and Hashing" ],
        "summary" : "Perform Pseudo-DES hashing on a pair of unsigned integers.",
        "description" : "Hashes a pair of unsigned integers using a Pseudo-DES algorithm.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/hash_pseudodes_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Pair hashed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_25"
                }
              }
            }
          }
        }
      }
    },
    "/hash/retrieve" : {
      "post" : {
        "tags" : [ "Data Retrieval" ],
        "summary" : "Retrieves an element associated with a key.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/hash_retrieve_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Element retrieved successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_24"
                }
              }
            }
          },
          "404" : {
            "description" : "Element not found."
          }
        }
      }
    },
    "/hash/store" : {
      "post" : {
        "tags" : [ "Data Storage" ],
        "summary" : "Stores an element associated with a key in the hash table.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/hash_store_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Element stored successfully."
          }
        }
      }
    },
    "/hmm/baumwelch" : {
      "get" : {
        "tags" : [ "Machine Learning" ],
        "summary" : "Run the Baum-Welch algorithm to update HMM parameters",
        "description" : "This endpoint updates the transition and emission probabilities of a Hidden Markov Model using the Baum-Welch algorithm based on an observed sequence.",
        "parameters" : [ {
          "name" : "transitionMatrix",
          "in" : "query",
          "description" : "Transition probability matrix of the HMM (a)",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }, {
          "name" : "emissionMatrix",
          "in" : "query",
          "description" : "Emission probability matrix of the HMM (b)",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }, {
          "name" : "observedSequence",
          "in" : "query",
          "description" : "Observed sequence of emitted symbols",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Updated HMM parameters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_28"
                }
              }
            }
          }
        }
      }
    },
    "/hmm/forwardbackward" : {
      "get" : {
        "tags" : [ "Machine Learning" ],
        "summary" : "Perform the forward-backward algorithm for a given Hidden Markov Model",
        "description" : "This endpoint performs the forward-backward algorithm on a provided Hidden Markov Model (HMM) to calculate the probabilities of the hidden states given the observed sequence.",
        "parameters" : [ {
          "name" : "transitionMatrix",
          "in" : "query",
          "description" : "Transition probability matrix of the HMM (a)",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }, {
          "name" : "emissionMatrix",
          "in" : "query",
          "description" : "Emission probability matrix of the HMM (b)",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }, {
          "name" : "observedSequence",
          "in" : "query",
          "description" : "Observed sequence of emitted symbols",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Forward and backward probabilities of the HMM states",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_27"
                }
              }
            }
          }
        }
      }
    },
    "/huffcode/decode" : {
      "post" : {
        "tags" : [ "Data Compression" ],
        "summary" : "Decode a Huffman encoded sequence",
        "description" : "This endpoint decodes a given Huffman encoded sequence using the provided Huffman tree.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/huffcode_decode_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Decoded sequence of integers.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "description" : "Decoded sequence of integers.",
                  "items" : {
                    "type" : "integer"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/huffcode/encode" : {
      "post" : {
        "tags" : [ "Data Compression" ],
        "summary" : "Encode a sequence using Huffman coding",
        "description" : "This endpoint encodes a given sequence of integers using Huffman coding based on the provided frequency of each character.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/huffcode_encode_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Encoded sequence and the Huffman tree used for encoding.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_29"
                }
              }
            }
          }
        }
      }
    },
    "/hypergeometric/function" : {
      "post" : {
        "tags" : [ "Statistical Methods" ],
        "summary" : "Calculate hypergeometric function",
        "description" : "This endpoint calculates the hypergeometric function for given complex parameters a, b, c, and z.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/hypergeometric_function_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The value of the hypergeometric function for the given parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_30"
                }
              }
            }
          }
        }
      }
    },
    "/integrate3d" : {
      "post" : {
        "tags" : [ "Numerical Integration" ],
        "summary" : "Integrates a specified function over a 3D region.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Quad3dRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Integration completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Quad3dResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request, e.g., invalid bounds or unsupported functionId."
          }
        }
      }
    },
    "/integrateVegas" : {
      "post" : {
        "tags" : [ "Numerical Integration" ],
        "summary" : "Perform numerical integration using the Vegas algorithm.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VegasIntegrationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Results of the numerical integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VegasIntegrationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/integration/DErule" : {
      "post" : {
        "tags" : [ "Numerical Integration" ],
        "summary" : "Perform adaptive quadrature integration using DErule.",
        "operationId" : "integrateDErule",
        "requestBody" : {
          "description" : "Data required to perform the integration.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DEruleRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Integration result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DEruleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/interpolation/bilinear" : {
      "post" : {
        "tags" : [ "Interpolation Methods" ],
        "summary" : "Perform bilinear interpolation.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BilinInterpRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully interpolated value.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InterpResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          }
        }
      }
    },
    "/interpolation/poly2D" : {
      "post" : {
        "tags" : [ "Interpolation Methods" ],
        "summary" : "Perform 2D polynomial interpolation.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Poly2DInterpRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully interpolated value.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InterpResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          }
        }
      }
    },
    "/interpolation/polynomial/interpolate" : {
      "post" : {
        "tags" : [ "Interpolation Methods" ],
        "summary" : "Perform polynomial interpolation at a specified point.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/polynomial_interpolate_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Interpolation result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data"
          }
        }
      }
    },
    "/interpolation/spline2D" : {
      "post" : {
        "tags" : [ "Interpolation Methods" ],
        "summary" : "Perform 2D spline interpolation.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Spline2DInterpRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully interpolated value.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InterpResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          }
        }
      }
    },
    "/invxlogx" : {
      "get" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Calculate the inverse of xlogx for a given value",
        "parameters" : [ {
          "name" : "y",
          "in" : "query",
          "description" : "The y value for which to calculate the inverse of xlogx",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The inverse of xlogx for the given value",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_45"
                }
              }
            }
          }
        }
      }
    },
    "/kdtree/locate" : {
      "post" : {
        "tags" : [ "Spatial Data Structures" ],
        "summary" : "Locate the nearest box in the KDtree for a given point.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/kdtree_locate_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Nearest box found successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_38"
                }
              }
            }
          }
        }
      }
    },
    "/kdtree/n-nearest-points" : {
      "post" : {
        "tags" : [ "Spatial Data Structures" ],
        "summary" : "Find the N nearest points to a given point within the KDtree.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/kdtree_nnearestpoints_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "N nearest points found successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_40"
                }
              }
            }
          }
        }
      }
    },
    "/kdtree/nearest" : {
      "post" : {
        "tags" : [ "Spatial Data Structures" ],
        "summary" : "Finds the nearest point to a given point within the KDtree.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/kdtree_nearest_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Nearest point found successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_42"
                }
              }
            }
          }
        }
      }
    },
    "/kdtree/nearest-point" : {
      "post" : {
        "tags" : [ "Spatial Data Structures" ],
        "summary" : "Find the nearest point to a given point within the KDtree.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/kdtree_nearestpoint_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Nearest point found successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_39"
                }
              }
            }
          }
        }
      }
    },
    "/kdtree/points-within-radius" : {
      "post" : {
        "tags" : [ "Spatial Data Structures" ],
        "summary" : "Locate points within a given radius of a point in the KDtree.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/kdtree_pointswithinradius_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Points within radius found successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_41"
                }
              }
            }
          }
        }
      }
    },
    "/kendl1" : {
      "post" : {
        "tags" : [ "Statistical Testing" ],
        "summary" : "Calculate the Kendall tau correlation.",
        "requestBody" : {
          "description" : "Data for Kendall tau correlation calculation.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/kendl1_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Kendall tau correlation results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_66"
                }
              }
            }
          }
        }
      }
    },
    "/kmeans/estep" : {
      "post" : {
        "tags" : [ "Machine Learning" ],
        "summary" : "Assign data points to the nearest cluster center",
        "responses" : {
          "200" : {
            "description" : "Data points assigned to clusters successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_43"
                }
              }
            }
          }
        }
      }
    },
    "/kmeans/initialize" : {
      "post" : {
        "tags" : [ "Machine Learning" ],
        "summary" : "Initialize K-means clustering with data and initial means",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/kmeans_initialize_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "K-means clustering initialized successfully"
          }
        }
      }
    },
    "/kmeans/iterate" : {
      "post" : {
        "tags" : [ "Machine Learning" ],
        "summary" : "Perform one iteration of the E-step and M-step",
        "responses" : {
          "200" : {
            "description" : "One iteration of K-means completed successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_44"
                }
              }
            }
          }
        }
      }
    },
    "/kmeans/mstep" : {
      "post" : {
        "tags" : [ "Machine Learning" ],
        "summary" : "Update the cluster centers based on current assignments",
        "responses" : {
          "200" : {
            "description" : "Cluster centers updated successfully"
          }
        }
      }
    },
    "/krig/interpolate" : {
      "post" : {
        "tags" : [ "Geostatistics" ],
        "summary" : "Perform Kriging interpolation for a given point",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/KrigData"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Interpolation completed successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/KrigResult"
                }
              }
            }
          }
        }
      }
    },
    "/ks2d2s" : {
      "post" : {
        "tags" : [ "Statistical Testing" ],
        "summary" : "Perform a two-sample Kolmogorov-Smirnov test",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ks2d2s_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully performed the KS test",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_49"
                }
              }
            }
          }
        }
      }
    },
    "/ksdist/invqks" : {
      "get" : {
        "tags" : [ "Statistical Methods" ],
        "summary" : "Calculate the inverse of the complementary cumulative distribution function of the Kolmogorov-Smirnov distribution",
        "parameters" : [ {
          "name" : "q",
          "in" : "query",
          "description" : "The q value for which to calculate the inverse CCDF",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The inverse CCDF of the Kolmogorov-Smirnov distribution",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_48"
                }
              }
            }
          }
        }
      }
    },
    "/ksdist/pks" : {
      "get" : {
        "tags" : [ "Statistical Methods" ],
        "summary" : "Calculate the cumulative distribution function of the Kolmogorov-Smirnov distribution",
        "parameters" : [ {
          "name" : "z",
          "in" : "query",
          "description" : "The z value for which to calculate the CDF",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The CDF of the Kolmogorov-Smirnov distribution",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_46"
                }
              }
            }
          }
        }
      }
    },
    "/ksdist/qks" : {
      "get" : {
        "tags" : [ "Statistical Methods" ],
        "summary" : "Calculate the complementary cumulative distribution function of the Kolmogorov-Smirnov distribution",
        "parameters" : [ {
          "name" : "z",
          "in" : "query",
          "description" : "The z value for which to calculate the CCDF",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The CCDF of the Kolmogorov-Smirnov distribution",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_47"
                }
              }
            }
          }
        }
      }
    },
    "/ksone" : {
      "post" : {
        "tags" : [ "Statistical Testing" ],
        "summary" : "Perform a one-sample Kolmogorov-Smirnov test",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ksone_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully performed the KS test",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_50"
                }
              }
            }
          }
        }
      }
    },
    "/kstwo" : {
      "post" : {
        "tags" : [ "Statistical Testing" ],
        "summary" : "Perform a two-sample Kolmogorov-Smirnov test",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/kstwo_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully performed the KS test",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_51"
                }
              }
            }
          }
        }
      }
    },
    "/laplace-interpolate" : {
      "post" : {
        "tags" : [ "Interpolation Methods" ],
        "summary" : "Perform Laplace interpolation on a given matrix.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LaplaceInterpolationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Interpolation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LaplaceInterpolationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          }
        }
      }
    },
    "/levin-series" : {
      "post" : {
        "tags" : [ "Mathematical Series" ],
        "summary" : "Compute sum using direct and Levin series methods",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/levinseries_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully computed the sums",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_52"
                }
              }
            }
          }
        }
      }
    },
    "/linear-equations/improve-solution" : {
      "post" : {
        "tags" : [ "Numerical Methods" ],
        "summary" : "Improve the solution to a system of linear equations",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ImproveRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Improved solution",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Solution"
                }
              }
            }
          }
        }
      }
    },
    "/linear-equations/solve" : {
      "post" : {
        "tags" : [ "Numerical Methods" ],
        "summary" : "Solve a system of linear equations",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LinearEquations"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Solution to the linear equations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Solution"
                }
              }
            }
          }
        }
      }
    },
    "/linear-interpolate" : {
      "post" : {
        "tags" : [ "Interpolation Methods" ],
        "summary" : "Perform linear interpolation for a given x value using provided data points.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LinearInterpolationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful interpolation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LinearInterpolationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/linearRegression" : {
      "post" : {
        "tags" : [ "Regression Analysis" ],
        "summary" : "Perform linear regression without known errors for each data point.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LinearRegressionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Regression performed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LinearRegressionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/linearRegressionWithError" : {
      "post" : {
        "tags" : [ "Regression Analysis" ],
        "summary" : "Perform linear regression with known errors for each data point.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LinearRegressionWithErrorRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Regression performed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LinearRegressionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/logisticdist/cdf" : {
      "post" : {
        "tags" : [ "Probability Distributions" ],
        "summary" : "Calculate the cumulative distribution function for the Logistic distribution",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LogisticdistRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "CDF calculation result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DistributionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/logisticdist/invcdf" : {
      "post" : {
        "tags" : [ "Probability Distributions" ],
        "summary" : "Calculate the inverse cumulative distribution function for the Logistic distribution",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InverseCDFRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Inverse CDF calculation result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InverseCDFResponse"
                }
              }
            }
          }
        }
      }
    },
    "/logisticdist/p" : {
      "post" : {
        "tags" : [ "Probability Distributions" ],
        "summary" : "Calculate the probability density for the Logistic distribution",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LogisticdistRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Probability density calculation result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DistributionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/lognormaldist/cdf" : {
      "post" : {
        "tags" : [ "Probability Distributions" ],
        "summary" : "Computes the CDF of the Lognormal Distribution.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LognormalDistributionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SingleValueResponse"
                }
              }
            }
          }
        }
      }
    },
    "/lognormaldist/invcdf" : {
      "post" : {
        "tags" : [ "Probability Distributions" ],
        "summary" : "Computes the inverse CDF (Quantile function) of the Lognormal Distribution.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SingleValueRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SingleValueResponse"
                }
              }
            }
          }
        }
      }
    },
    "/lognormaldist/p" : {
      "post" : {
        "tags" : [ "Probability Distributions" ],
        "summary" : "Computes the probability density function of the Lognormal distribution.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LognormalDistributionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LognormalDistributionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/lognormaldist/pdf" : {
      "post" : {
        "tags" : [ "Probability Distributions" ],
        "summary" : "Computes the PDF of the Lognormal Distribution.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LognormalDistributionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SingleValueResponse"
                }
              }
            }
          }
        }
      }
    },
    "/lu-decomposition" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Perform LU decomposition on a given matrix.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Matrix"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "LU decomposition completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LUdcmpResult"
                }
              }
            }
          }
        }
      }
    },
    "/math-functions" : {
      "post" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Calculate various mathematical functions.",
        "description" : "Provides gamma function, factorial, binomial coefficient, and beta function calculations.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/mathfunctions_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully calculated the requested mathematical function.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_18"
                }
              }
            }
          }
        }
      }
    },
    "/math/legendre-polynomial" : {
      "post" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Compute Legendre Polynomial",
        "description" : "Computes the value of a Legendre polynomial for given degree, order, and value.",
        "operationId" : "computeLegendrePolynomial",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LegendrePolynomialRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The computed value of the Legendre polynomial.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LegendrePolynomialResponse"
                }
              }
            }
          }
        }
      }
    },
    "/math/pade-approximation" : {
      "post" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Compute Pade Approximation",
        "description" : "Computes the coefficients of the numerator and denominator of the Pade approximation for a given series of coefficients.",
        "operationId" : "computePadeApproximation",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PadeRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Coefficients of the numerator and denominator of the Pade approximation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PadeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/math/polynomial/shift" : {
      "post" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Shift Polynomial Coefficients",
        "description" : "Adjusts the coefficients of a polynomial for a specified interval, improving numerical stability.",
        "operationId" : "shiftPolynomialCoefficients",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PolynomialShiftRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The shifted polynomial coefficients.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolynomialCoefficientsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/math/polynomial/shift/inverse" : {
      "post" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Inverse Shift Polynomial Coefficients",
        "description" : "Performs an inverse operation of the coefficient shift for a polynomial, restoring it to the original interval.",
        "operationId" : "inverseShiftPolynomialCoefficients",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PolynomialShiftRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The inversely shifted polynomial coefficients.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolynomialCoefficientsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/matrix" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Create a new matrix",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MatrixCreationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Matrix created successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Matrix"
                }
              }
            }
          }
        }
      }
    },
    "/matrix/banmul" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Multiply a banded matrix by a vector",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/matrix_banmul_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The result vector",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_1"
                }
              }
            }
          }
        }
      }
    },
    "/matrix/crc" : {
      "post" : {
        "tags" : [ "Data Integrity" ],
        "summary" : "Calculate CRC",
        "description" : "Calculate the cyclic redundancy check (CRC) for a given string using a specified polynomial.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/matrix_crc_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "CRC calculation result.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_36"
                }
              }
            }
          }
        }
      }
    },
    "/matrix/inversion" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Perform Gaussian-Jordan elimination to invert a matrix.",
        "description" : "Inverts a given square matrix using Gaussian-Jordan elimination.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/matrix_inversion_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Matrix inverted successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_22"
                }
              }
            }
          }
        }
      }
    },
    "/matrix/invert" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Invert a matrix",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Matrix"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Inverted matrix",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Matrix"
                }
              }
            }
          }
        }
      }
    },
    "/matrix/lu-decomposition" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Perform LU decomposition of a matrix",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Matrix"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "LU decomposition result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LUResult"
                }
              }
            }
          }
        }
      }
    },
    "/matrix/solve" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Solve Matrix Equation",
        "description" : "Solve a sparse matrix equation Ax=b using LDL' factorization.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/matrix_solve_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Solution of the matrix equation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "description" : "The solution vector x.",
                  "items" : {
                    "type" : "number"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/matrix/solve-linear-equations" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Solve linear equations using Gaussian-Jordan elimination.",
        "description" : "Solves linear equations for a given square matrix and multiple right-hand sides.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/matrix_solvelinearequations_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Linear equations solved successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_23"
                }
              }
            }
          }
        }
      }
    },
    "/matrix/{matrixId}/interpolate" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Perform interpolation on a matrix",
        "parameters" : [ {
          "name" : "matrixId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Interpolation completed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MatrixOperationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/matrix/{matrixId}/relax" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Relax the matrix",
        "parameters" : [ {
          "name" : "matrixId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Matrix relaxed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MatrixOperationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/matrix/{matrixId}/restrict" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Apply restriction operation to a matrix",
        "parameters" : [ {
          "name" : "matrixId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Restriction applied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MatrixOperationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/matrix/{matrixId}/solve" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Solve a small system directly",
        "parameters" : [ {
          "name" : "matrixId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "System solved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MatrixOperationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/matrixVectorMultiplication" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Multiply a sparse matrix with a vector.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MatrixVectorMultiplicationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Multiplication result.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VectorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/nonlinear-solver/mnewt" : {
      "post" : {
        "tags" : [ "Numerical Methods" ],
        "summary" : "Newton-Raphson Method for Solving Nonlinear Equations",
        "description" : "Solves a system of nonlinear equations using the Newton-Raphson method.",
        "operationId" : "solveNonlinearSystem",
        "requestBody" : {
          "description" : "Initial guesses, convergence criteria, and function specification for the Newton-Raphson method.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MnewtRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The solution of the system of nonlinear equations.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MnewtResponse"
                }
              }
            }
          }
        }
      }
    },
    "/normaldist/cdf" : {
      "post" : {
        "tags" : [ "Probability Distributions" ],
        "summary" : "Computes the CDF of the Normal Distribution.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NormalDistributionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SingleValueResponse"
                }
              }
            }
          }
        }
      }
    },
    "/normaldist/invcdf" : {
      "post" : {
        "tags" : [ "Probability Distributions" ],
        "summary" : "Computes the inverse CDF (Quantile function) of the Normal Distribution.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SingleValueRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SingleValueResponse"
                }
              }
            }
          }
        }
      }
    },
    "/normaldist/p" : {
      "post" : {
        "tags" : [ "Probability Distributions" ],
        "summary" : "Computes the probability density function of the Normal distribution.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NormalDistributionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NormalDistributionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/normaldist/pdf" : {
      "post" : {
        "tags" : [ "Probability Distributions" ],
        "summary" : "Computes the PDF of the Normal Distribution.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NormalDistributionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SingleValueResponse"
                }
              }
            }
          }
        }
      }
    },
    "/numerical-integration/miser" : {
      "post" : {
        "tags" : [ "Numerical Integration" ],
        "summary" : "Perform Monte Carlo Integration using MISER algorithm",
        "description" : "Estimates the integral of a given function over a specified region using the MISER Monte Carlo algorithm.",
        "operationId" : "miserIntegration",
        "requestBody" : {
          "description" : "Parameters for the MISER algorithm and function definition.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MiserRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The estimated integral and variance.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MiserResponse"
                }
              }
            }
          }
        }
      }
    },
    "/numericalIntegration" : {
      "post" : {
        "tags" : [ "Numerical Integration" ],
        "summary" : "Perform numerical integration of a given function over a specified interval.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NumericalIntegrationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NumericalIntegrationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request. The request body is missing or contains invalid parameters."
          },
          "500" : {
            "description" : "Server Error. Error occurred while processing the numerical integration."
          }
        }
      }
    },
    "/ode/results/{sessionId}" : {
      "get" : {
        "tags" : [ "Differential Equations" ],
        "summary" : "Get ODE Solving Results",
        "description" : "Retrieves the results of an ODE solving session.",
        "operationId" : "getOdeResults",
        "parameters" : [ {
          "name" : "sessionId",
          "in" : "path",
          "description" : "The session ID of the ODE solve request.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The detailed results of the ODE solve.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OdeResults"
                }
              }
            }
          }
        }
      }
    },
    "/ode/solve" : {
      "post" : {
        "tags" : [ "Differential Equations" ],
        "summary" : "Solve an ODE",
        "description" : "Solves an ordinary differential equation given initial conditions, a function definition, and solver parameters.",
        "operationId" : "solveOde",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SolveOdeRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Accepted. The solution process has been initiated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SolveOdeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/operations/exponentialDistribution" : {
      "post" : {
        "tags" : [ "Probability Distributions" ],
        "summary" : "Perform an operation with the exponential distribution.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExponentialDistributionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExponentialDistributionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/operations/logisticDistribution" : {
      "post" : {
        "tags" : [ "Probability Distributions" ],
        "summary" : "Perform an operation with the logistic distribution.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LogisticDistributionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LogisticDistributionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/optimization/bracket" : {
      "post" : {
        "tags" : [ "Optimization and Solving Equations" ],
        "summary" : "Bracket a minimum",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BracketRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Bracketing result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BracketResponse"
                }
              }
            }
          }
        }
      }
    },
    "/optimization/brent" : {
      "post" : {
        "tags" : [ "Optimization and Solving Equations" ],
        "summary" : "Brent's Method",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MinimizeRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Brent's Method result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MinimizeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/optimization/dbrent" : {
      "post" : {
        "tags" : [ "Optimization and Solving Equations" ],
        "summary" : "Dbrent's Method",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MinimizeRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Dbrent's Method result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MinimizeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/optimization/functionMinimizePowell" : {
      "post" : {
        "tags" : [ "Optimization and Solving Equations" ],
        "summary" : "Function Minimization using Powell's Method",
        "description" : "Perform function minimization on a vector using Powell's method.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FunctionMinimizationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Function minimization result using Powell's method.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FunctionMinimizationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/optimization/golden" : {
      "post" : {
        "tags" : [ "Optimization and Solving Equations" ],
        "summary" : "Golden Section Search",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MinimizeRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Golden Section Search result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MinimizeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/optimization/lineMinimize" : {
      "post" : {
        "tags" : [ "Optimization and Solving Equations" ],
        "summary" : "Line Minimization",
        "description" : "Perform line minimization using a specified method.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LineMinimizationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Line minimization result.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LineMinimizationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/optimize" : {
      "post" : {
        "tags" : [ "Optimization and Solving Equations" ],
        "summary" : "Perform numerical optimization.",
        "description" : "Optimize a given function based on the provided method, initial guess, and other parameters.",
        "requestBody" : {
          "description" : "Optimization parameters and function.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NumericalOptimizationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Optimization results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NumericalOptimizationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request format or parameters."
          },
          "500" : {
            "description" : "Server error during the optimization process."
          }
        }
      }
    },
    "/optimizeSimplex" : {
      "post" : {
        "tags" : [ "Optimization and Solving Equations" ],
        "summary" : "Solve an optimization problem using the Simplex method.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SimplexMethodRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Optimization problem solved successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OptimizationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          },
          "500" : {
            "description" : "Error during optimization."
          }
        }
      }
    },
    "/pearsn" : {
      "post" : {
        "tags" : [ "Statistical and Probabilistic Methods" ],
        "summary" : "Calculate the Pearson correlation coefficient.",
        "requestBody" : {
          "description" : "Data for Pearson correlation calculation.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StatisticalTestRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Pearson correlation results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatisticalTestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/phylogenetics/analysis" : {
      "post" : {
        "tags" : [ "Bioinformatics" ],
        "summary" : "Initiate Phylogenetic Tree Analysis",
        "description" : "Starts a phylogenetic tree analysis task using specified distance matrix and agglomeration method.",
        "operationId" : "startPhylogeneticAnalysis",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PhylogeneticAnalysisRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Accepted. The analysis task has been initiated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PhylogeneticAnalysisResponse"
                }
              }
            }
          }
        }
      }
    },
    "/phylogenetics/analysis/{taskId}" : {
      "get" : {
        "tags" : [ "Bioinformatics" ],
        "summary" : "Get Phylogenetic Tree Analysis Results",
        "description" : "Retrieves the results of a phylogenetic tree analysis task.",
        "operationId" : "getPhylogeneticAnalysisResults",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "description" : "The unique identifier of the analysis task.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The results of the phylogenetic analysis.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PhylogeneticAnalysisResults"
                }
              }
            }
          }
        }
      }
    },
    "/polygon/checkPointInside" : {
      "post" : {
        "tags" : [ "Geometry and Spatial Analysis" ],
        "summary" : "Check if a point is inside a polygon",
        "description" : "Checks if a given point is inside the specified polygon using the winding number algorithm.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/polygon_checkPointInside_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully checked if the point is inside the polygon.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_58"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          }
        }
      }
    },
    "/polygon/checkSimple" : {
      "post" : {
        "tags" : [ "Geometry and Spatial Analysis" ],
        "summary" : "Check if a polygon is simple",
        "description" : "Checks if the specified polygon is simple, meaning it does not intersect itself.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/polygon_checkSimple_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully checked if the polygon is simple.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_59"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          }
        }
      }
    },
    "/polynomial/coefficient/calculate" : {
      "post" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Calculate Polynomial Coefficients",
        "description" : "Calculates the coefficients of the polynomial that fits the given data points using the direct method.",
        "operationId" : "calculatePolynomialCoefficients",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PolynomialCoefficientRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully calculated polynomial coefficients.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolynomialCoefficientResponse"
                }
              }
            }
          }
        }
      }
    },
    "/polynomial/coefficient/calculate/alternative" : {
      "post" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Calculate Polynomial Coefficients (Alternative Method)",
        "description" : "Calculates the coefficients of the polynomial that fits the given data points using an alternative method.",
        "operationId" : "calculatePolynomialCoefficientsAlternative",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PolynomialCoefficientRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully calculated polynomial coefficients.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolynomialCoefficientResponse"
                }
              }
            }
          }
        }
      }
    },
    "/polynomial/create" : {
      "post" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Create a polynomial",
        "description" : "Creates a polynomial with the given coefficients.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PolynomialCreationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Polynomial created successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolynomialResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          }
        }
      }
    },
    "/polynomial/evaluate" : {
      "post" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Evaluate a polynomial at a given value",
        "description" : "Evaluates the polynomial specified by its coefficients at a given value of x.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/polynomial_evaluate_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Polynomial evaluated successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_56"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          }
        }
      }
    },
    "/power-spectral-density" : {
      "get" : {
        "tags" : [ "Time Series and Signal Processing" ],
        "summary" : "Evaluate power spectral density for an autoregressive model",
        "parameters" : [ {
          "name" : "fdt",
          "in" : "query",
          "description" : "Frequency",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "xms",
          "in" : "query",
          "description" : "Mean square of the data",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "coefficients",
          "in" : "query",
          "description" : "Autoregressive model coefficients",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully evaluated power spectral density",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "number"
                }
              }
            }
          }
        }
      }
    },
    "/predict" : {
      "post" : {
        "tags" : [ "Data Analysis and Machine Learning" ],
        "summary" : "Predict outcomes using the trained SVM model.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PredictionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Prediction outcomes",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PredictionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/predict-future-points" : {
      "post" : {
        "tags" : [ "Time Series and Signal Processing" ],
        "summary" : "Predict future points based on an autoregressive model",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/predictfuturepoints_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully predicted future points",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "number"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/primpoly/init" : {
      "post" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Initialize a Primpolytest instance",
        "description" : "Initializes a Primpolytest instance with optional parameters for N and a list of factors.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/primpoly_init_body"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Successfully initialized the Primpolytest instance.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrimpolytestResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          }
        }
      }
    },
    "/primpoly/test" : {
      "post" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Test for Primitive Polynomial",
        "description" : "Tests if the given polynomial of degree N is a primitive polynomial.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/primpoly_test_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully performed the primitive polynomial test.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_60"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          }
        }
      }
    },
    "/qrDecompose" : {
      "post" : {
        "tags" : [ "Matrix Operations and Linear Algebra" ],
        "summary" : "Create a QR decomposition of a given matrix.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/QRDecompositionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "QR decomposition created successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_61"
                }
              }
            }
          }
        }
      }
    },
    "/quadrature-coefficients/gaucof" : {
      "post" : {
        "tags" : [ "Calculus and Analysis" ],
        "summary" : "Compute coefficients for Gaussian quadrature.",
        "description" : "Computes the abscissas (x) and weights (w) for Gaussian quadrature given the coefficients a and b, and the moment amu0.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/quadraturecoefficients_gaucof_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Abscissas and weights computed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_20"
                }
              }
            }
          }
        }
      }
    },
    "/quadrature-points/lobatto" : {
      "post" : {
        "tags" : [ "Calculus and Analysis" ],
        "summary" : "Compute points and weights for Lobatto quadrature.",
        "description" : "Computes the abscissas (x) and weights (w) for Lobatto quadrature given the coefficients a, b, amu0, x1, and xn.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/quadraturepoints_lobatto_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Points and weights computed successfully."
          }
        }
      }
    },
    "/quadrature-points/radau" : {
      "post" : {
        "tags" : [ "Calculus and Analysis" ],
        "summary" : "Compute points and weights for Radau quadrature.",
        "description" : "Computes the abscissas (x) and weights (w) for Radau quadrature given the coefficients a, b, amu0, and x1.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/quadraturepoints_radau_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Points and weights computed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_21"
                }
              }
            }
          }
        }
      }
    },
    "/quadrilateralValues" : {
      "post" : {
        "tags" : [ "Geometry and Spatial Analysis" ],
        "summary" : "Calculates values for the corners of a quadrilateral based on its position.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/QuadrilateralValuesRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully calculated the corner values.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QuadrilateralValuesResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request parameters."
          }
        }
      }
    },
    "/ran/init" : {
      "post" : {
        "tags" : [ "Random Number Generation" ],
        "summary" : "Initialize the Ran RNG with a seed.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RNGInitializationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "RNG initialized successfully."
          }
        }
      }
    },
    "/ran/randomDouble" : {
      "get" : {
        "tags" : [ "Random Number Generation" ],
        "summary" : "Get a random double from the Ran RNG.",
        "responses" : {
          "200" : {
            "description" : "Random double generated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RandomNumberResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ran/randomInt32" : {
      "get" : {
        "tags" : [ "Random Number Generation" ],
        "summary" : "Get a random 32-bit integer from the Ran RNG.",
        "responses" : {
          "200" : {
            "description" : "Random 32-bit integer generated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RandomNumberResponse"
                }
              }
            }
          }
        }
      }
    },
    "/random/binomialdev" : {
      "post" : {
        "tags" : [ "Random Number Generation" ],
        "summary" : "Generate a random deviate with Binomial distribution.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BinomialdevRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Random deviate generated successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BinomialdevResponse"
                }
              }
            }
          }
        }
      }
    },
    "/random/cauchydev" : {
      "post" : {
        "tags" : [ "Random Number Generation" ],
        "summary" : "Generate a random deviate with Cauchy distribution.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CauchydevRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Random deviate generated successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CauchydevResponse"
                }
              }
            }
          }
        }
      }
    },
    "/random/gammadev" : {
      "post" : {
        "tags" : [ "Random Number Generation" ],
        "summary" : "Generate a random deviate with Gamma distribution.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GammadevRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Random deviate generated successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GammadevResponse"
                }
              }
            }
          }
        }
      }
    },
    "/random/normaldev" : {
      "post" : {
        "tags" : [ "Random Number Generation" ],
        "summary" : "Generate a random deviate with Normal distribution.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NormaldevRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Random deviate generated successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NormaldevResponse"
                }
              }
            }
          }
        }
      }
    },
    "/random/normaldev_bm" : {
      "post" : {
        "tags" : [ "Random Number Generation" ],
        "summary" : "Generate a random deviate with Normal distribution using Box-Muller method.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Normaldev_BMRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Random deviate generated successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Normaldev_BMResponse"
                }
              }
            }
          }
        }
      }
    },
    "/random/poissondev" : {
      "post" : {
        "tags" : [ "Random Number Generation" ],
        "summary" : "Generate a random deviate with Poisson distribution.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PoissondevRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Random deviate generated successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PoissondevResponse"
                }
              }
            }
          }
        }
      }
    },
    "/randomPoint" : {
      "post" : {
        "tags" : [ "Geometric Calculations" ],
        "summary" : "Generate a random point within a specified region.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RandomPointRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Random point generated successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RandomPointResponse"
                }
              }
            }
          }
        }
      }
    },
    "/rationalFunction/create" : {
      "post" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Create a rational function",
        "description" : "Creates a rational function with the given numerator and denominator coefficients.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RationalFunctionCreationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Rational function created successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RationalFunctionResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          }
        }
      }
    },
    "/rationalFunction/evaluate" : {
      "post" : {
        "tags" : [ "Mathematical Operations" ],
        "summary" : "Evaluate a rational function at a given value",
        "description" : "Evaluates the rational function specified by its numerator and denominator coefficients at a given value of x.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/rationalFunction_evaluate_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Rational function evaluated successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_57"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          }
        }
      }
    },
    "/rationalLeastSquares" : {
      "post" : {
        "tags" : [ "Regression Analysis" ],
        "summary" : "Perform a rational least squares fitting.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RationalLeastSquaresRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Rational least squares fitting computed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RationalLeastSquaresResponse"
                }
              }
            }
          }
        }
      }
    },
    "/rbf-interpolate" : {
      "post" : {
        "tags" : [ "Interpolation Methods" ],
        "summary" : "Perform RBF interpolation for given points.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InterpolationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Interpolation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InterpolationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          }
        }
      }
    },
    "/realft" : {
      "post" : {
        "tags" : [ "Signal Processing" ],
        "summary" : "Perform a real-valued Fast Fourier Transform.",
        "description" : "Compute the FFT of a set of real-valued data.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/realft_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "FFT operation on real-valued data completed successfully."
          }
        }
      }
    },
    "/rebin" : {
      "post" : {
        "tags" : [ "Data Processing" ],
        "summary" : "Rebin a set of bins based on the rebinning constant and new density.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RebinRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Rebinning completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RebinResponse"
                }
              }
            }
          }
        }
      }
    },
    "/rungeKuttaStep" : {
      "post" : {
        "tags" : [ "Differential Equations" ],
        "summary" : "Perform one step of the Runge-Kutta method.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RungeKuttaRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Step completed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RungeKuttaResponse"
                }
              }
            }
          }
        }
      }
    },
    "/savgolCoefficients" : {
      "post" : {
        "tags" : [ "Signal Processing" ],
        "summary" : "Generate Savitzky-Golay Filter Coefficients",
        "description" : "Generates coefficients for the Savitzky-Golay smoothing filter based on the provided parameters. This filter is used for smoothing and differentiating data.\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/savgolCoefficients_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Coefficients generated successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_64"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input parameters."
          },
          "500" : {
            "description" : "Error during coefficient generation."
          }
        }
      }
    },
    "/select-kth" : {
      "post" : {
        "tags" : [ "Data Analysis" ],
        "summary" : "Find the k-th smallest element in an array.",
        "operationId" : "selectKth",
        "requestBody" : {
          "description" : "Array of numbers and the index k.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/selectkth_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The k-th smallest element was successfully found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_65"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          },
          "404" : {
            "description" : "The k-th element does not exist in the provided array (e.g., k is out of bounds)."
          }
        }
      }
    },
    "/setColor" : {
      "post" : {
        "tags" : [ "Visualization and Graphics" ],
        "summary" : "Set the color for subsequent drawings.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SetColorRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Color set successfully."
          }
        }
      }
    },
    "/setFont" : {
      "post" : {
        "tags" : [ "Visualization and Graphics" ],
        "summary" : "Set the font name and size for the PS page.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SetFontRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Font set successfully."
          }
        }
      }
    },
    "/shepard-interpolate" : {
      "post" : {
        "tags" : [ "Interpolation Methods" ],
        "summary" : "Perform Shepard's interpolation for given points.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InterpolationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Interpolation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InterpolationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          }
        }
      }
    },
    "/simulateStep" : {
      "post" : {
        "tags" : [ "Simulation Methods" ],
        "summary" : "Simulate a single step of the stochastic simulation.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SimulateStepRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Simulation step successfully processed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimulateStepResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sinft" : {
      "post" : {
        "tags" : [ "Signal Processing" ],
        "summary" : "Perform a Sine Fourier Transform.",
        "description" : "Compute the Sine Fourier Transform on a set of data. This operation is useful for analyzing waveforms and signals in the frequency domain.\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/sinft_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Sine Fourier Transform completed successfully."
          }
        }
      }
    },
    "/slvsm2" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Solve the Poisson equation with second-order finite differences.",
        "description" : "Solve the Poisson equation with second-order finite differences.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/slvsm2_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Solution computed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        }
      }
    },
    "/solve-advanced-bvp" : {
      "post" : {
        "tags" : [ "Boundary Value Problems" ],
        "summary" : "Solve a boundary value problem using the advanced shooting method.",
        "description" : "Solves a BVP for ODEs by advanced shooting method, given initial conditions at start and end points, interval endpoints, and a matching point.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdvancedShootingMethodRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully computed the solution mismatch.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdvancedShootingMethodResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          },
          "500" : {
            "description" : "Error during the computation process."
          }
        }
      }
    },
    "/solve-bvp" : {
      "post" : {
        "tags" : [ "Boundary Value Problems" ],
        "summary" : "Solve a boundary value problem using the shooting method.",
        "description" : "Solves a BVP for ODEs by shooting method, given initial conditions and interval endpoints.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ShootingMethodRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully computed the solution.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ShootingMethodResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          },
          "500" : {
            "description" : "Error during the computation process."
          }
        }
      }
    },
    "/solve-linear-biconjugate-gradient" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Solve a linear system using the Biconjugate Gradient method",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/solvelinearbiconjugategradient_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Linear system solved successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_53"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input provided"
          }
        }
      }
    },
    "/solve-linear-system" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Solve a linear system using the previously computed LU decomposition.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/solvelinearsystem_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Linear system solved successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Vector"
                }
              }
            }
          }
        }
      }
    },
    "/solveCyclic" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Solve a cyclic system of equations.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CyclicRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Solution vector for the cyclic system",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SolutionVector"
                }
              }
            }
          }
        }
      }
    },
    "/solveDifferentialEquation" : {
      "post" : {
        "tags" : [ "Differential Equations" ],
        "summary" : "Solve a differential equation.",
        "description" : "Solves a specified differential equation using the Solvde method, given the equation, boundary conditions, and solver settings.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DifferentialEquationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Differential equation solved successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DifferentialEquationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          },
          "500" : {
            "description" : "Error during the solution process."
          }
        }
      }
    },
    "/solveMatrix" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Solve a linear system using the factorized matrix.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MatrixSolutionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Linear system solved successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SolutionResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          },
          "500" : {
            "description" : "Error during matrix solution."
          }
        }
      }
    },
    "/solvePDE/SOR" : {
      "post" : {
        "tags" : [ "Partial Differential Equations" ],
        "summary" : "Solve a partial differential equation using SOR method.",
        "description" : "Solves a specified PDE given the coefficient matrices, the right-hand side matrix, an initial guess for the solution, and the relaxation factor using the Successive Over-Relaxation method.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SORRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "PDE solved successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SORResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          },
          "500" : {
            "description" : "Error during the solution process."
          }
        }
      }
    },
    "/solveSystem" : {
      "post" : {
        "tags" : [ "System of Equations" ],
        "summary" : "Solve a linear system using the SVD decomposition.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LinearSystemRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Solution vector",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LinearSystemResponse"
                }
              }
            }
          }
        }
      }
    },
    "/solveToeplitz" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Solve a Toeplitz system.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SolveToeplitzRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Toeplitz system solution",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SolveToeplitzResponse"
                }
              }
            }
          }
        }
      }
    },
    "/solveTridiagonal" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Solve a tridiagonal system of equations.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TridiagonalRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Solution vector for the tridiagonal system",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SolutionVector"
                }
              }
            }
          }
        }
      }
    },
    "/solveVandermonde" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Compute weights for a given set of points in a Vandermonde matrix.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VandermondeRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Weights for the Vandermonde matrix",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VandermondeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/solveWithQRDecomposition" : {
      "post" : {
        "tags" : [ "Matrix Operations" ],
        "summary" : "Solve a linear system using a previously created QR decomposition.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/QRDecompositionSolveRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Linear system solved successfully using QR decomposition.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VectorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sortData" : {
      "post" : {
        "tags" : [ "Data Processing" ],
        "summary" : "Sort an array of numbers using specified method.",
        "description" : "Sorts an array of numbers, optionally along with a secondary array or selects the k-th smallest element, using the specified sorting method.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SortRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Array sorted successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SortResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data."
          },
          "500" : {
            "description" : "Error during the sorting process."
          }
        }
      }
    },
    "/sparseLinbcg/multiply" : {
      "post" : {
        "tags" : [ "Sparse Matrix Operations" ],
        "summary" : "Multiply a vector by the matrix or its transpose.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MatrixVectorMultiplyRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The result of the multiplication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VectorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sparseLinbcg/solvePreconditioner" : {
      "post" : {
        "tags" : [ "Sparse Matrix Operations" ],
        "summary" : "Solve the preconditioner system for a given vector.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SolvePreconditionerRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The solution vector of the preconditioner system.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VectorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/spear" : {
      "post" : {
        "tags" : [ "Statistical Analysis" ],
        "summary" : "Calculate the Spearman rank correlation.",
        "requestBody" : {
          "description" : "Data for Spearman rank correlation calculation.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StatisticalTestRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Spearman rank correlation results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatisticalTestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/spread" : {
      "post" : {
        "tags" : [ "Data Distribution" ],
        "summary" : "Spreads a data value into an array at a specified position.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SpreadRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Data value successfully spread into the array."
          }
        }
      }
    },
    "/statistics/avevar" : {
      "post" : {
        "tags" : [ "Statistical Analysis" ],
        "summary" : "Calculate Average and Variance",
        "description" : "Calculates the average and variance of a dataset.",
        "operationId" : "calculateAveVar",
        "requestBody" : {
          "description" : "A dataset for which to calculate the average and variance.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DatasetRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The average and variance of the dataset.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AveVarResponse"
                }
              }
            }
          }
        }
      }
    },
    "/statistics/moment" : {
      "post" : {
        "tags" : [ "Statistical Analysis" ],
        "summary" : "Calculate Statistical Moments",
        "description" : "Calculates the first four moments of a dataset, including average, average deviation, standard deviation, variance, skewness, and kurtosis.",
        "operationId" : "calculateMoments",
        "requestBody" : {
          "description" : "A dataset for which to calculate moments.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DatasetRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Statistical moments of the dataset.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MomentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/statistics/multivariate-normal/sample" : {
      "post" : {
        "tags" : [ "Statistical Sampling" ],
        "summary" : "Generate Multivariate Normal Random Samples",
        "description" : "Generates a random sample from a multivariate normal distribution given its mean vector and covariance matrix.",
        "operationId" : "generateMultivariateNormalSample",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MultivariateNormalRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A random sample from the specified multivariate normal distribution.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MultivariateNormalResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stats/distributions/gamma/pdf" : {
      "post" : {
        "tags" : [ "Probability Distributions" ],
        "summary" : "Compute the probability density function for the Gamma distribution.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/gamma_pdf_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "PDF computation result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_37"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data"
          }
        }
      }
    },
    "/stepperBS" : {
      "post" : {
        "tags" : [ "Numerical Methods for ODEs" ],
        "summary" : "Perform a step using the Bulirsch-Stoer method.",
        "requestBody" : {
          "description" : "Input data required for performing a numerical integration step with StepperBS.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/stepperBS_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully performed a numerical integration step.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_69"
                }
              }
            }
          }
        }
      }
    },
    "/stepperBase" : {
      "post" : {
        "tags" : [ "Numerical Methods for ODEs" ],
        "summary" : "Initialize the base stepper for numerical integration.",
        "requestBody" : {
          "description" : "Parameters to initialize the StepperBase.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/stepperBase_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "StepperBase initialized successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_68"
                }
              }
            }
          }
        }
      }
    },
    "/stepperDopr5" : {
      "post" : {
        "tags" : [ "Numerical Methods for ODEs" ],
        "summary" : "Perform a step using the Dormand-Prince 5th order method.",
        "requestBody" : {
          "description" : "Input data required for performing a numerical integration step with StepperDopr5.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/stepperDopr5_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully performed a numerical integration step.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_69"
                }
              }
            }
          }
        }
      }
    },
    "/stepperDopr853" : {
      "post" : {
        "tags" : [ "Numerical Methods for ODEs" ],
        "summary" : "Perform a step using the Dormand-Prince 8(5,3) method.",
        "requestBody" : {
          "description" : "Input data required for performing a numerical integration step with StepperDopr853.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/stepperDopr853_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully performed a numerical integration step.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_69"
                }
              }
            }
          }
        }
      }
    },
    "/stepperRoss" : {
      "post" : {
        "tags" : [ "Numerical Methods for ODEs" ],
        "summary" : "Perform a step using the Rosenbrock method with Ross's constants.",
        "requestBody" : {
          "description" : "Input data required for performing a numerical integration step with StepperRoss.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/stepperRoss_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully performed a numerical integration step.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_69"
                }
              }
            }
          }
        }
      }
    },
    "/stepperSie" : {
      "post" : {
        "tags" : [ "Numerical Methods for ODEs" ],
        "summary" : "Perform a step using the semi-implicit extrapolation method.",
        "requestBody" : {
          "description" : "Input data required for performing a numerical integration step with StepperSie.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/stepperSie_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully performed a numerical integration step.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_69"
                }
              }
            }
          }
        }
      }
    },
    "/stepperStoerm" : {
      "post" : {
        "tags" : [ "Numerical Methods for ODEs" ],
        "summary" : "Perform a step using the Stoermer's rule for second-order differential equations.",
        "requestBody" : {
          "description" : "Input data required for performing a numerical integration step with StepperStoerm.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/stepperStoerm_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully performed a numerical integration step.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_69"
                }
              }
            }
          }
        }
      }
    },
    "/stiel" : {
      "post" : {
        "tags" : [ "Special Mathematical Functions" ],
        "summary" : "Perform operations related to Stieltjes procedure for orthogonal polynomials.",
        "requestBody" : {
          "description" : "Input data for Stieltjes procedure operations including generating orthogonal polynomials.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/stiel_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully performed the specified Stieltjes procedure operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_70"
                }
              }
            }
          }
        }
      }
    },
    "/tptest" : {
      "post" : {
        "tags" : [ "Statistical Testing" ],
        "summary" : "Perform a paired t-test.",
        "requestBody" : {
          "description" : "Data for paired t-test.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StatisticalTestRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Paired t-test results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatisticalTestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/trainModel" : {
      "post" : {
        "tags" : [ "Machine Learning" ],
        "summary" : "Train a SVM model with given data.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TrainingDataRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Training result including model parameters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TrainingResult"
                }
              }
            }
          }
        }
      }
    },
    "/ttest" : {
      "post" : {
        "tags" : [ "Statistical Testing" ],
        "summary" : "Perform a two-sample t-test.",
        "requestBody" : {
          "description" : "Data for two-sample t-test.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StatisticalTestRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "T-test results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatisticalTestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tutest" : {
      "post" : {
        "tags" : [ "Statistical Testing" ],
        "summary" : "Perform Welch's t-test.",
        "requestBody" : {
          "description" : "Data for Welch's t-test.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StatisticalTestRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Welch's t-test results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatisticalTestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/updateADAT" : {
      "post" : {
        "tags" : [ "Data Updating Methods" ],
        "summary" : "Update ADAT with a given diagonal matrix D.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ADATUpdateRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated ADAT matrix.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SparseMatrixResponse"
                }
              }
            }
          }
        }
      }
    },
    "/waveletTransform" : {
      "post" : {
        "tags" : [ "Signal Processing" ],
        "summary" : "Apply wavelet transformation on the given data.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WaveletRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Wavelet transformation result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WaveletResponse"
                }
              }
            }
          }
        }
      }
    },
    "/weights" : {
      "post" : {
        "tags" : [ "Data Weighting" ],
        "summary" : "Compute weights for numerical integration.",
        "description" : "Calculates integration weights given step size and number of steps, using a specified quadrature method.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/weights_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully calculated integration weights.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_13"
                }
              }
            }
          }
        }
      }
    },
    "/zrhqrFindRoots" : {
      "post" : {
        "tags" : [ "Numerical Methods" ],
        "summary" : "Find the roots of a polynomial using the zrhqr algorithm.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ZrhqrPolynomialRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The roots of the polynomial calculated by the zrhqr method.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ZrhqrPolynomialRootsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ztest" : {
      "post" : {
        "tags" : [ "Statistical Testing" ],
        "summary" : "Perform a Z statistic test.",
        "requestBody" : {
          "description" : "Data for Z statistic test.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ztest_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Z statistic test results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_67"
                }
              }
            }
          }
        }
      }
    },
    "/{functionName}" : {
      "post" : {
        "tags" : [ "API Meta Operations" ],
        "summary" : "Perform a Fourier Transform.",
        "description" : "Compute a Fourier Transform on a set of data based on the specified function. This operation is useful for various signal processing applications. The `functionName` parameter determines the specific transform to perform (e.g., sinft, cosft1, cosft2).\n",
        "parameters" : [ {
          "name" : "functionName",
          "in" : "path",
          "description" : "The name of the function to perform (sinft, cosft1, cosft2).",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/functionName_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Fourier Transform completed successfully."
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "ADATUpdateRequest" : {
        "type" : "object",
        "properties" : {
          "A" : {
            "$ref" : "#/components/schemas/SparseMatrix"
          },
          "D" : {
            "$ref" : "#/components/schemas/Vector"
          }
        }
      },
      "Adapt" : {
        "required" : [ "TOL", "out_of_tolerance", "terminate", "toler" ],
        "type" : "object",
        "properties" : {
          "TOL" : {
            "type" : "number",
            "description" : "Tolerance level for the integration process."
          },
          "toler" : {
            "type" : "number",
            "description" : "Adjusted tolerance based on the integration strategy."
          },
          "terminate" : {
            "type" : "boolean",
            "description" : "Flag to indicate if the integration process should terminate."
          },
          "out_of_tolerance" : {
            "type" : "boolean",
            "description" : "Flag to indicate if the result is out of the desired tolerance."
          }
        }
      },
      "AddTextRequest" : {
        "required" : [ "text", "x", "y" ],
        "type" : "object",
        "properties" : {
          "text" : {
            "type" : "string",
            "description" : "Text to be added."
          },
          "x" : {
            "type" : "number",
            "description" : "X-coordinate for the text's position."
          },
          "y" : {
            "type" : "number",
            "description" : "Y-coordinate for the text's position."
          },
          "rotation" : {
            "type" : "number",
            "description" : "Rotation angle of the text in degrees.",
            "default" : 0
          }
        }
      },
      "AdvancedShootingMethodRequest" : {
        "required" : [ "endPoint", "initialConditionsEnd", "initialConditionsStart", "matchingPoint", "startPoint" ],
        "type" : "object",
        "properties" : {
          "initialConditionsStart" : {
            "type" : "array",
            "description" : "Initial condition vector at the start point.",
            "items" : {
              "type" : "number"
            }
          },
          "initialConditionsEnd" : {
            "type" : "array",
            "description" : "Initial condition vector at the end point, for variables defined at the end.",
            "items" : {
              "type" : "number"
            }
          },
          "startPoint" : {
            "type" : "number",
            "description" : "The starting point of the interval.",
            "format" : "double"
          },
          "endPoint" : {
            "type" : "number",
            "description" : "The end point of the interval.",
            "format" : "double"
          },
          "matchingPoint" : {
            "type" : "number",
            "description" : "The point where the solutions from start and end points are matched.",
            "format" : "double"
          }
        }
      },
      "AdvancedShootingMethodResponse" : {
        "type" : "object",
        "properties" : {
          "solutionMismatch" : {
            "type" : "array",
            "description" : "Difference between the solutions at the matching point, ideally close to zero when successfully matched.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "Amoeba" : {
        "required" : [ "fmin", "ftol", "mpts", "ndim", "nfunc", "p", "y" ],
        "type" : "object",
        "properties" : {
          "ftol" : {
            "type" : "number",
            "format" : "double"
          },
          "nfunc" : {
            "type" : "integer"
          },
          "mpts" : {
            "type" : "integer"
          },
          "ndim" : {
            "type" : "integer"
          },
          "fmin" : {
            "type" : "number",
            "format" : "double"
          },
          "y" : {
            "type" : "array",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          },
          "p" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number",
                "format" : "double"
              }
            }
          }
        }
      },
      "AnnealInput" : {
        "required" : [ "x", "y" ],
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "array",
            "description" : "The x-coordinates of the points.",
            "items" : {
              "type" : "number"
            }
          },
          "y" : {
            "type" : "array",
            "description" : "The y-coordinates of the points.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "AnnealOutput" : {
        "type" : "object",
        "properties" : {
          "iorder" : {
            "type" : "array",
            "description" : "The optimized order of points indices.",
            "items" : {
              "type" : "integer"
            }
          }
        }
      },
      "AveVarResponse" : {
        "type" : "object",
        "properties" : {
          "average" : {
            "type" : "number"
          },
          "variance" : {
            "type" : "number"
          }
        }
      },
      "BilinInterpRequest" : {
        "required" : [ "x1p", "x1v", "x2p", "x2v", "ym" ],
        "type" : "object",
        "properties" : {
          "x1v" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "x2v" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "ym" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "x1p" : {
            "type" : "number"
          },
          "x2p" : {
            "type" : "number"
          }
        }
      },
      "BinomialdevRequest" : {
        "required" : [ "n", "p", "seed" ],
        "type" : "object",
        "properties" : {
          "n" : {
            "type" : "integer"
          },
          "p" : {
            "type" : "number"
          },
          "seed" : {
            "type" : "integer"
          }
        }
      },
      "BinomialdevResponse" : {
        "type" : "object",
        "properties" : {
          "deviate" : {
            "type" : "number"
          }
        }
      },
      "BoxCreationRequest" : {
        "required" : [ "hi", "lo" ],
        "type" : "object",
        "properties" : {
          "lo" : {
            "$ref" : "#/components/schemas/BoxCreationRequest_lo"
          },
          "hi" : {
            "$ref" : "#/components/schemas/BoxCreationRequest_hi"
          }
        },
        "description" : "Request schema for creating a box with specified lower (lo) and upper (hi) corner points."
      },
      "BoxCreationRequest_hi" : {
        "required" : [ "coordinates" ],
        "type" : "object",
        "properties" : {
          "coordinates" : {
            "type" : "array",
            "description" : "Coordinates of the upper corner point of the box. The number of elements should match the intended dimensionality of the box.",
            "example" : [ 1, 1, 1 ],
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "BoxCreationRequest_lo" : {
        "required" : [ "coordinates" ],
        "type" : "object",
        "properties" : {
          "coordinates" : {
            "type" : "array",
            "description" : "Coordinates of the lower corner point of the box. The number of elements should match the intended dimensionality of the box.",
            "example" : [ 0, 0, 0 ],
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "BoxPointDistanceRequest" : {
        "required" : [ "box", "point" ],
        "type" : "object",
        "properties" : {
          "box" : {
            "$ref" : "#/components/schemas/BoxPointDistanceRequest_box"
          },
          "point" : {
            "$ref" : "#/components/schemas/BoxPointDistanceRequest_point"
          }
        }
      },
      "BoxPointDistanceRequest_box" : {
        "required" : [ "hi", "lo" ],
        "type" : "object",
        "properties" : {
          "lo" : {
            "$ref" : "#/components/schemas/BoxPointDistanceRequest_box_lo"
          },
          "hi" : {
            "$ref" : "#/components/schemas/BoxPointDistanceRequest_box_hi"
          }
        }
      },
      "BoxPointDistanceRequest_box_hi" : {
        "required" : [ "coordinates" ],
        "type" : "object",
        "properties" : {
          "coordinates" : {
            "type" : "array",
            "description" : "Coordinates of the upper corner point of the box.",
            "example" : [ 1, 1, 1 ],
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "BoxPointDistanceRequest_box_lo" : {
        "required" : [ "coordinates" ],
        "type" : "object",
        "properties" : {
          "coordinates" : {
            "type" : "array",
            "description" : "Coordinates of the lower corner point of the box.",
            "example" : [ 0, 0, 0 ],
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "BoxPointDistanceRequest_point" : {
        "required" : [ "coordinates" ],
        "type" : "object",
        "properties" : {
          "coordinates" : {
            "type" : "array",
            "description" : "Coordinates of the point for which the distance to the box is to be calculated.",
            "example" : [ 0.5, 0.5, 0.5 ],
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "BoxResponse" : {
        "required" : [ "hi", "lo" ],
        "type" : "object",
        "properties" : {
          "lo" : {
            "$ref" : "#/components/schemas/PointCreationRequest"
          },
          "hi" : {
            "$ref" : "#/components/schemas/PointCreationRequest"
          }
        }
      },
      "BracketRequest" : {
        "required" : [ "a", "b" ],
        "type" : "object",
        "properties" : {
          "a" : {
            "type" : "number",
            "description" : "Start of interval"
          },
          "b" : {
            "type" : "number",
            "description" : "End of interval"
          }
        }
      },
      "BracketResponse" : {
        "type" : "object",
        "properties" : {
          "ax" : {
            "type" : "number"
          },
          "bx" : {
            "type" : "number"
          },
          "cx" : {
            "type" : "number"
          },
          "fa" : {
            "type" : "number"
          },
          "fb" : {
            "type" : "number"
          },
          "fc" : {
            "type" : "number"
          }
        }
      },
      "CauchydevRequest" : {
        "required" : [ "mu", "seed", "sig" ],
        "type" : "object",
        "properties" : {
          "mu" : {
            "type" : "number"
          },
          "sig" : {
            "type" : "number"
          },
          "seed" : {
            "type" : "integer"
          }
        }
      },
      "CauchydevResponse" : {
        "type" : "object",
        "properties" : {
          "deviate" : {
            "type" : "number"
          }
        }
      },
      "ChebyshevRequest" : {
        "type" : "object",
        "properties" : {
          "func" : {
            "type" : "string",
            "description" : "The function to approximate using Chebyshev polynomials."
          },
          "a" : {
            "type" : "number",
            "description" : "The lower limit of the interval."
          },
          "b" : {
            "type" : "number",
            "description" : "The upper limit of the interval."
          },
          "n" : {
            "type" : "integer",
            "description" : "The degree of the Chebyshev polynomial."
          }
        }
      },
      "ChebyshevResponse" : {
        "type" : "object",
        "properties" : {
          "coefficients" : {
            "type" : "array",
            "description" : "The coefficients of the Chebyshev polynomial.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "CholeskyRequest" : {
        "type" : "object",
        "properties" : {
          "matrix" : {
            "type" : "array",
            "description" : "The square matrix for Cholesky decomposition.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "CholeskyResponse" : {
        "type" : "object",
        "properties" : {
          "lowerTriangularMatrix" : {
            "type" : "array",
            "description" : "The resulting lower triangular matrix from the decomposition.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "Circle" : {
        "type" : "object",
        "properties" : {
          "center" : {
            "$ref" : "#/components/schemas/Point"
          },
          "radius" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "CircumcircleRequest" : {
        "type" : "object",
        "properties" : {
          "pointA" : {
            "$ref" : "#/components/schemas/Point"
          },
          "pointB" : {
            "$ref" : "#/components/schemas/Point"
          },
          "pointC" : {
            "$ref" : "#/components/schemas/Point"
          }
        }
      },
      "CircumcircleResponse" : {
        "type" : "object",
        "properties" : {
          "circle" : {
            "$ref" : "#/components/schemas/Circle"
          }
        }
      },
      "CisiRequest" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "CisiResponse" : {
        "type" : "object",
        "properties" : {
          "ci" : {
            "type" : "number",
            "description" : "Cosine integral Ci(x)",
            "format" : "double"
          },
          "si" : {
            "type" : "number",
            "description" : "Sine integral Si(x)",
            "format" : "double"
          }
        }
      },
      "ComplexNumber" : {
        "required" : [ "imaginary", "real" ],
        "type" : "object",
        "properties" : {
          "real" : {
            "type" : "number",
            "description" : "The real part of the complex number."
          },
          "imaginary" : {
            "type" : "number",
            "description" : "The imaginary part of the complex number. Positive values indicate a positive imaginary part, and negative values indicate a negative imaginary part."
          }
        }
      },
      "ConvolvRequest" : {
        "required" : [ "data", "isign", "respns" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "The input data array for convolution.",
            "items" : {
              "type" : "number"
            }
          },
          "respns" : {
            "type" : "array",
            "description" : "The response function array for convolution.",
            "items" : {
              "type" : "number"
            }
          },
          "isign" : {
            "type" : "integer",
            "description" : "Indicator of convolution (1) or deconvolution (-1)."
          }
        }
      },
      "ConvolvResponse" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "array",
            "description" : "The result of convolution or deconvolution.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "CorrelationRequest" : {
        "required" : [ "data1", "data2" ],
        "type" : "object",
        "properties" : {
          "data1" : {
            "type" : "array",
            "description" : "The first data set for correlation.",
            "items" : {
              "type" : "number"
            }
          },
          "data2" : {
            "type" : "array",
            "description" : "The second data set for correlation.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "CorrelationResponse" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "array",
            "description" : "The correlation result of the two data sets.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "CreatePageRequest" : {
        "required" : [ "fileName" ],
        "type" : "object",
        "properties" : {
          "fileName" : {
            "type" : "string",
            "description" : "Name of the file to create or write to."
          }
        }
      },
      "CurveInitRequest" : {
        "required" : [ "close", "points" ],
        "type" : "object",
        "properties" : {
          "points" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number",
                "description" : "Coordinate of a point."
              }
            }
          },
          "close" : {
            "type" : "boolean",
            "description" : "Indicates if the curve is closed."
          }
        }
      },
      "CurveInitResponse" : {
        "type" : "object",
        "properties" : {
          "curveId" : {
            "type" : "string",
            "description" : "Unique identifier for the initialized curve."
          }
        }
      },
      "CurveInterpRequest" : {
        "required" : [ "curveId", "t" ],
        "type" : "object",
        "properties" : {
          "curveId" : {
            "type" : "string",
            "description" : "Unique identifier for the initialized curve."
          },
          "t" : {
            "type" : "number",
            "description" : "Parameter value at which to perform the interpolation."
          }
        }
      },
      "CurveInterpResponse" : {
        "type" : "object",
        "properties" : {
          "interpolatedPoint" : {
            "type" : "array",
            "description" : "Interpolated point coordinates.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "CyclicRequest" : {
        "required" : [ "alpha", "beta", "lowerDiagonal", "mainDiagonal", "rightHandSide", "upperDiagonal" ],
        "type" : "object",
        "properties" : {
          "lowerDiagonal" : {
            "$ref" : "#/components/schemas/TridiagonalRequest/properties/lowerDiagonal"
          },
          "mainDiagonal" : {
            "$ref" : "#/components/schemas/TridiagonalRequest/properties/mainDiagonal"
          },
          "upperDiagonal" : {
            "$ref" : "#/components/schemas/TridiagonalRequest/properties/upperDiagonal"
          },
          "alpha" : {
            "type" : "number"
          },
          "beta" : {
            "type" : "number"
          },
          "rightHandSide" : {
            "$ref" : "#/components/schemas/TridiagonalRequest/properties/rightHandSide"
          }
        }
      },
      "DEruleRequest" : {
        "required" : [ "a", "b", "functionExpression" ],
        "type" : "object",
        "properties" : {
          "functionExpression" : {
            "type" : "string",
            "description" : "The mathematical function to integrate, provided as a string expression. Example \"sin(x)\"."
          },
          "a" : {
            "type" : "number",
            "description" : "The lower limit of integration."
          },
          "b" : {
            "type" : "number",
            "description" : "The upper limit of integration."
          },
          "hmax" : {
            "type" : "number",
            "description" : "The maximum step size for integration.",
            "default" : 3.7
          }
        }
      },
      "DEruleResponse" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "number",
            "description" : "The result of the integration."
          },
          "steps" : {
            "type" : "integer",
            "description" : "The number of steps used to achieve the result."
          }
        }
      },
      "DFPMinimizationRequest" : {
        "required" : [ "gtol", "initialParameters" ],
        "type" : "object",
        "properties" : {
          "initialParameters" : {
            "type" : "array",
            "description" : "Initial parameters for the minimization algorithm.",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          },
          "gtol" : {
            "type" : "number",
            "description" : "The gradient tolerance for the convergence of the algorithm.",
            "format" : "double"
          }
        }
      },
      "DFPMinimizationResponse" : {
        "required" : [ "finalParameters", "fret", "iterations" ],
        "type" : "object",
        "properties" : {
          "iterations" : {
            "type" : "integer",
            "description" : "The number of iterations performed.",
            "format" : "int32"
          },
          "fret" : {
            "type" : "number",
            "description" : "The minimum function value found.",
            "format" : "double"
          },
          "finalParameters" : {
            "type" : "array",
            "description" : "The parameters at the minimum.",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          }
        }
      },
      "DatasetRequest" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "The dataset for statistical analysis.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "DawsonRequest" : {
        "required" : [ "x" ],
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "number",
            "description" : "The input value for which Dawson's integral is calculated.",
            "format" : "double"
          }
        }
      },
      "DawsonResponse" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "number",
            "description" : "The calculated value of Dawson's integral.",
            "format" : "double"
          }
        }
      },
      "DecodingRequest" : {
        "required" : [ "encodedMessage", "frequencies" ],
        "type" : "object",
        "properties" : {
          "encodedMessage" : {
            "type" : "string",
            "description" : "The encoded message to be decoded, represented as a base64 string."
          },
          "frequencies" : {
            "type" : "array",
            "description" : "An array representing the frequency of each symbol in the encoded message.",
            "items" : {
              "type" : "integer"
            }
          }
        }
      },
      "DecodingResponse" : {
        "type" : "object",
        "properties" : {
          "decodedMessage" : {
            "type" : "string",
            "description" : "The decoded message."
          }
        }
      },
      "DelaunayResponse" : {
        "type" : "object",
        "properties" : {
          "triangles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Triangle"
            }
          }
        }
      },
      "DftcorRequest" : {
        "required" : [ "a", "b", "delta", "endpts", "w" ],
        "type" : "object",
        "properties" : {
          "w" : {
            "type" : "number",
            "description" : "Frequency parameter for the correction."
          },
          "delta" : {
            "type" : "number",
            "description" : "The spacing between discrete points."
          },
          "a" : {
            "type" : "number",
            "description" : "Lower limit of integration."
          },
          "b" : {
            "type" : "number",
            "description" : "Upper limit of integration."
          },
          "endpts" : {
            "type" : "array",
            "description" : "The function values at the end points.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "DftcorResponse" : {
        "type" : "object",
        "properties" : {
          "corre" : {
            "type" : "number",
            "description" : "Real part of the correction factor."
          },
          "corim" : {
            "type" : "number",
            "description" : "Imaginary part of the correction factor."
          },
          "corfac" : {
            "type" : "number",
            "description" : "Additional correction factor."
          }
        }
      },
      "DftintRequest" : {
        "required" : [ "a", "b", "functionExpression", "w" ],
        "type" : "object",
        "properties" : {
          "functionExpression" : {
            "type" : "string",
            "description" : "The mathematical function to integrate, expressed as a string."
          },
          "a" : {
            "type" : "number",
            "description" : "Lower limit of integration."
          },
          "b" : {
            "type" : "number",
            "description" : "Upper limit of integration."
          },
          "w" : {
            "type" : "number",
            "description" : "Frequency parameter for the integration."
          }
        }
      },
      "DftintResponse" : {
        "type" : "object",
        "properties" : {
          "cosint" : {
            "type" : "number",
            "description" : "The cosine integral result."
          },
          "sinint" : {
            "type" : "number",
            "description" : "The sine integral result."
          }
        }
      },
      "DifeqCalculateRequest" : {
        "required" : [ "calculationType", "contextId" ],
        "type" : "object",
        "properties" : {
          "contextId" : {
            "type" : "string",
            "description" : "Identifier for the differential equation context."
          },
          "calculationType" : {
            "type" : "string",
            "description" : "Type of calculation to perform."
          }
        }
      },
      "DifeqCalculateResponse" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the calculation."
          },
          "result" : {
            "type" : "object",
            "additionalProperties" : true,
            "description" : "Result of the calculation, structure may vary."
          }
        }
      },
      "DifeqInitializeRequest" : {
        "required" : [ "anorm", "c2", "h", "mm", "mpt", "n", "x" ],
        "type" : "object",
        "properties" : {
          "mm" : {
            "type" : "integer",
            "description" : "Parameter mm of the differential equation."
          },
          "n" : {
            "type" : "integer",
            "description" : "Parameter n of the differential equation."
          },
          "mpt" : {
            "type" : "integer",
            "description" : "Parameter mpt of the differential equation."
          },
          "h" : {
            "type" : "number",
            "description" : "Step size."
          },
          "c2" : {
            "type" : "number",
            "description" : "Parameter c2 of the differential equation."
          },
          "anorm" : {
            "type" : "number",
            "description" : "Parameter anorm of the differential equation."
          },
          "x" : {
            "type" : "array",
            "description" : "Vector of x values.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "DifeqInitializeResponse" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the initialization process."
          },
          "contextId" : {
            "type" : "string",
            "description" : "Identifier for the initialized context."
          }
        }
      },
      "DifferentialEquationRequest" : {
        "required" : [ "boundaryConditions", "conv", "differentialEquation", "indexv", "itmax", "nb", "scalv", "slowc" ],
        "type" : "object",
        "properties" : {
          "itmax" : {
            "type" : "integer",
            "description" : "Maximum number of iterations."
          },
          "conv" : {
            "type" : "number",
            "description" : "Convergence criterion."
          },
          "slowc" : {
            "type" : "number",
            "description" : "Slowing constant."
          },
          "scalv" : {
            "type" : "array",
            "description" : "Scaling vector for the variables.",
            "items" : {
              "type" : "number"
            }
          },
          "indexv" : {
            "type" : "array",
            "description" : "Index vector.",
            "items" : {
              "type" : "integer"
            }
          },
          "nb" : {
            "type" : "integer",
            "description" : "Boundary condition parameter."
          },
          "differentialEquation" : {
            "type" : "string",
            "description" : "The differential equation to solve, expressed in a format understood by the server."
          },
          "boundaryConditions" : {
            "$ref" : "#/components/schemas/DifferentialEquationRequest_boundaryConditions"
          }
        }
      },
      "DifferentialEquationRequest_boundaryConditions" : {
        "type" : "object",
        "properties" : {
          "exampleCondition1" : {
            "type" : "string",
            "description" : "Example boundary condition 1."
          },
          "exampleCondition2" : {
            "type" : "string",
            "description" : "Example boundary condition 2."
          }
        },
        "description" : "Boundary conditions for the differential equation."
      },
      "DifferentialEquationResponse" : {
        "type" : "object",
        "properties" : {
          "solution" : {
            "type" : "array",
            "description" : "The solution matrix of the differential equation.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "iterations" : {
            "type" : "integer",
            "description" : "The number of iterations performed."
          },
          "error" : {
            "type" : "number",
            "description" : "The final error of the solution."
          }
        }
      },
      "DistanceResponse" : {
        "type" : "object",
        "properties" : {
          "distance" : {
            "type" : "number",
            "description" : "The calculated Euclidean distance."
          }
        }
      },
      "DistributionResponse" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number",
            "description" : "The result from the distribution function calculation."
          }
        }
      },
      "DrawLineRequest" : {
        "required" : [ "endX", "endY", "startX", "startY" ],
        "type" : "object",
        "properties" : {
          "startX" : {
            "type" : "number",
            "description" : "X-coordinate of the line's start point."
          },
          "startY" : {
            "type" : "number",
            "description" : "Y-coordinate of the line's start point."
          },
          "endX" : {
            "type" : "number",
            "description" : "X-coordinate of the line's end point."
          },
          "endY" : {
            "type" : "number",
            "description" : "Y-coordinate of the line's end point."
          }
        }
      },
      "DrawPolylineRequest" : {
        "required" : [ "points" ],
        "type" : "object",
        "properties" : {
          "points" : {
            "type" : "array",
            "description" : "Array of points defining the polyline.",
            "items" : {
              "$ref" : "#/components/schemas/Point"
            }
          },
          "close" : {
            "type" : "boolean",
            "description" : "Whether to close the polyline to create a polygon.",
            "default" : false
          },
          "fill" : {
            "type" : "boolean",
            "description" : "Whether to fill the polygon.",
            "default" : false
          },
          "clip" : {
            "type" : "boolean",
            "description" : "Whether to clip the drawing area.",
            "default" : false
          }
        }
      },
      "DynProRequest" : {
        "required" : [ "costFunction", "nstate" ],
        "type" : "object",
        "properties" : {
          "nstate" : {
            "type" : "array",
            "description" : "An array representing the number of states in each stage.",
            "items" : {
              "type" : "integer"
            }
          },
          "costFunction" : {
            "type" : "string",
            "description" : "The name of the cost function to be used for calculating costs between states."
          }
        }
      },
      "DynProResponse" : {
        "type" : "object",
        "properties" : {
          "sequence" : {
            "type" : "array",
            "description" : "The optimal sequence of states determined by dynamic programming.",
            "items" : {
              "type" : "integer"
            }
          }
        }
      },
      "EClassRequest" : {
        "required" : [ "lista", "listb" ],
        "type" : "object",
        "properties" : {
          "lista" : {
            "type" : "array",
            "description" : "First list of indices for equivalence testing.",
            "items" : {
              "type" : "integer"
            }
          },
          "listb" : {
            "type" : "array",
            "description" : "Second list of indices for equivalence testing.",
            "items" : {
              "type" : "integer"
            }
          }
        }
      },
      "EClassResponse" : {
        "type" : "object",
        "properties" : {
          "nf" : {
            "type" : "array",
            "description" : "Array indicating the smallest index in each equivalence class.",
            "items" : {
              "type" : "integer"
            }
          }
        }
      },
      "EncodingRequest" : {
        "required" : [ "frequencies", "message" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "The message to be encoded."
          },
          "frequencies" : {
            "type" : "array",
            "description" : "An array representing the frequency of each symbol in the message.",
            "items" : {
              "type" : "integer"
            }
          }
        }
      },
      "EncodingResponse" : {
        "type" : "object",
        "properties" : {
          "encodedMessage" : {
            "type" : "string",
            "description" : "The encoded message, represented as a base64 string."
          }
        }
      },
      "ErrorResponse" : {
        "required" : [ "error" ],
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string",
            "description" : "Description of the error encountered."
          }
        }
      },
      "ExpondevRequest" : {
        "required" : [ "beta", "seed" ],
        "type" : "object",
        "properties" : {
          "beta" : {
            "type" : "number",
            "description" : "The rate parameter of the exponential distribution.",
            "format" : "double"
          },
          "seed" : {
            "type" : "integer",
            "description" : "The seed for the random number generator.",
            "format" : "int64"
          }
        }
      },
      "ExpondistRequest" : {
        "required" : [ "bet", "x" ],
        "type" : "object",
        "properties" : {
          "bet" : {
            "type" : "number",
            "description" : "Rate parameter of the Exponential distribution."
          },
          "x" : {
            "type" : "number",
            "description" : "The value at which to evaluate the distribution."
          }
        }
      },
      "ExponentialDistributionRequest" : {
        "type" : "object",
        "properties" : {
          "lambda" : {
            "type" : "number",
            "description" : "The rate parameter of the exponential distribution."
          }
        }
      },
      "ExponentialDistributionResponse" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "number",
            "description" : "The result from the exponential distribution operation."
          }
        }
      },
      "FFTRequest" : {
        "required" : [ "data", "nx", "ny" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "2D array of data points to transform.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "nx" : {
            "type" : "integer",
            "description" : "Number of points along the x-axis."
          },
          "ny" : {
            "type" : "integer",
            "description" : "Number of points along the y-axis."
          }
        }
      },
      "FFTResponse" : {
        "required" : [ "transformedData" ],
        "type" : "object",
        "properties" : {
          "transformedData" : {
            "type" : "array",
            "description" : "2D array of transformed data points after applying FFT and the filter.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "FasperRequest" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "array",
            "description" : "Array of x-coordinates.",
            "items" : {
              "type" : "number"
            }
          },
          "y" : {
            "type" : "array",
            "description" : "Array of y-coordinates corresponding to x-coordinates.",
            "items" : {
              "type" : "number"
            }
          },
          "ofac" : {
            "type" : "number",
            "description" : "Oversampling factor."
          },
          "hifac" : {
            "type" : "number",
            "description" : "Maximum frequency as a multiple of the average Nyquist frequency."
          }
        }
      },
      "FasperResponse" : {
        "type" : "object",
        "properties" : {
          "px" : {
            "type" : "array",
            "description" : "Frequency array.",
            "items" : {
              "type" : "number"
            }
          },
          "py" : {
            "type" : "array",
            "description" : "Power spectrum array.",
            "items" : {
              "type" : "number"
            }
          },
          "nout" : {
            "type" : "integer",
            "description" : "Number of output points."
          },
          "jmax" : {
            "type" : "integer",
            "description" : "Index of maximum power spectrum."
          },
          "prob" : {
            "type" : "number",
            "description" : "False alarm probability of the null hypothesis."
          }
        }
      },
      "FermiRequest" : {
        "type" : "object",
        "properties" : {
          "k" : {
            "type" : "number",
            "description" : "Parameter k in the Fermi function."
          },
          "eta" : {
            "type" : "number",
            "description" : "Parameter eta in the Fermi function."
          },
          "theta" : {
            "type" : "number",
            "description" : "Parameter theta in the Fermi function."
          },
          "calculationType" : {
            "type" : "string",
            "description" : "The type of calculation to perform (e.g., 'val').",
            "enum" : [ "val" ]
          }
        }
      },
      "FermiResponse" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "number",
            "description" : "The result of the Fermi function calculation."
          }
        }
      },
      "FitexyRequest" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "array",
            "description" : "The x-coordinates of the data points.",
            "items" : {
              "type" : "number"
            }
          },
          "y" : {
            "type" : "array",
            "description" : "The y-coordinates of the data points.",
            "items" : {
              "type" : "number"
            }
          },
          "sigx" : {
            "type" : "array",
            "description" : "Standard deviations of the x-coordinates.",
            "items" : {
              "type" : "number"
            }
          },
          "sigy" : {
            "type" : "array",
            "description" : "Standard deviations of the y-coordinates.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "FitexyResponse" : {
        "type" : "object",
        "properties" : {
          "a" : {
            "type" : "number",
            "description" : "The intercept of the fitted line."
          },
          "b" : {
            "type" : "number",
            "description" : "The slope of the fitted line."
          },
          "siga" : {
            "type" : "number",
            "description" : "Standard deviation of the intercept."
          },
          "sigb" : {
            "type" : "number",
            "description" : "Standard deviation of the slope."
          },
          "chi2" : {
            "type" : "number",
            "description" : "Chi-squared of the fit."
          },
          "q" : {
            "type" : "number",
            "description" : "Goodness-of-fit probability."
          }
        }
      },
      "FitlinRequest" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "array",
            "description" : "The x-coordinates of the data points.",
            "items" : {
              "type" : "number"
            }
          },
          "y" : {
            "type" : "array",
            "description" : "The y-coordinates of the data points.",
            "items" : {
              "type" : "number"
            }
          },
          "sig" : {
            "type" : "array",
            "description" : "Standard deviations of the y-coordinates.",
            "items" : {
              "type" : "number"
            }
          },
          "functionSet" : {
            "type" : "string",
            "description" : "Identifier for the set of functions to be used for fitting."
          }
        }
      },
      "FitlinResponse" : {
        "type" : "object",
        "properties" : {
          "coefficients" : {
            "type" : "array",
            "description" : "The fitted coefficients for the specified function set.",
            "items" : {
              "type" : "number"
            }
          },
          "covarianceMatrix" : {
            "type" : "array",
            "description" : "The covariance matrix of the fitted coefficients.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "chiSquared" : {
            "type" : "number",
            "description" : "Chi-squared of the fit."
          }
        }
      },
      "FitmedRequest" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "array",
            "description" : "The x-coordinates of the data points.",
            "items" : {
              "type" : "number"
            }
          },
          "y" : {
            "type" : "array",
            "description" : "The y-coordinates of the data points.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "FitmedResponse" : {
        "type" : "object",
        "properties" : {
          "a" : {
            "type" : "number",
            "description" : "The intercept of the fitted line."
          },
          "b" : {
            "type" : "number",
            "description" : "The slope of the fitted line."
          },
          "abdev" : {
            "type" : "number",
            "description" : "The average absolute deviation of the fitted line."
          }
        }
      },
      "FitmrqRequest" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "array",
            "description" : "The x-coordinates of the data points.",
            "items" : {
              "type" : "number"
            }
          },
          "y" : {
            "type" : "array",
            "description" : "The y-coordinates of the data points.",
            "items" : {
              "type" : "number"
            }
          },
          "sig" : {
            "type" : "array",
            "description" : "Standard deviation of errors in y-coordinates.",
            "items" : {
              "type" : "number"
            }
          },
          "initialParameters" : {
            "type" : "array",
            "description" : "Initial guesses for the fitting parameters.",
            "items" : {
              "type" : "number"
            }
          },
          "tolerance" : {
            "type" : "number",
            "description" : "Tolerance for convergence."
          }
        }
      },
      "FitmrqResponse" : {
        "type" : "object",
        "properties" : {
          "parameters" : {
            "type" : "array",
            "description" : "Fitted parameters.",
            "items" : {
              "type" : "number"
            }
          },
          "covar" : {
            "type" : "array",
            "description" : "Covariance matrix of the fitted parameters.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "chisq" : {
            "type" : "number",
            "description" : "Chi-square of the fit."
          },
          "message" : {
            "type" : "string",
            "description" : "Status message indicating success or failure of the fitting process."
          }
        }
      },
      "FitsvdRequest1D" : {
        "required" : [ "sig", "x", "y" ],
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "array",
            "description" : "The independent variable values.",
            "items" : {
              "type" : "number"
            }
          },
          "y" : {
            "type" : "array",
            "description" : "The dependent variable values to fit.",
            "items" : {
              "type" : "number"
            }
          },
          "sig" : {
            "type" : "array",
            "description" : "Standard deviations of y values.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "FitsvdRequestMD" : {
        "required" : [ "sig", "x", "y" ],
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "array",
            "description" : "The multidimensional independent variable values.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "y" : {
            "type" : "array",
            "description" : "The dependent variable values to fit.",
            "items" : {
              "type" : "number"
            }
          },
          "sig" : {
            "type" : "array",
            "description" : "Standard deviations of y values.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "FitsvdResponse" : {
        "type" : "object",
        "properties" : {
          "a" : {
            "type" : "array",
            "description" : "Fitted parameters.",
            "items" : {
              "type" : "number"
            }
          },
          "covar" : {
            "type" : "array",
            "description" : "Covariance matrix of the fitted parameters.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "chisq" : {
            "type" : "number",
            "description" : "Chi-square of the fit."
          }
        }
      },
      "FunctionMinimizationRequest" : {
        "type" : "object",
        "properties" : {
          "initialVector" : {
            "type" : "array",
            "description" : "Initial vector for function minimization.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "FunctionMinimizationResponse" : {
        "type" : "object",
        "properties" : {
          "optimizedVector" : {
            "type" : "array",
            "description" : "Optimized vector result.",
            "items" : {
              "type" : "number"
            }
          },
          "minimizedValue" : {
            "type" : "number",
            "description" : "Function value at the optimized vector."
          }
        }
      },
      "GammadevRequest" : {
        "required" : [ "alph", "bet", "seed" ],
        "type" : "object",
        "properties" : {
          "alph" : {
            "type" : "number"
          },
          "bet" : {
            "type" : "number"
          },
          "seed" : {
            "type" : "integer"
          }
        }
      },
      "GammadevResponse" : {
        "type" : "object",
        "properties" : {
          "deviate" : {
            "type" : "number"
          }
        }
      },
      "GaussianMixtureModelResponse" : {
        "type" : "object",
        "properties" : {
          "loglike" : {
            "type" : "number",
            "description" : "The current log likelihood of the model."
          },
          "means" : {
            "type" : "array",
            "description" : "Updated means for each cluster.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "fractions" : {
            "type" : "array",
            "description" : "The fractions of each cluster.",
            "items" : {
              "type" : "number"
            }
          },
          "log_determinants" : {
            "type" : "array",
            "description" : "Log determinants of covariance matrices for each cluster.",
            "items" : {
              "type" : "number"
            }
          },
          "message" : {
            "type" : "string",
            "example" : "Step completed successfully. Convergence not yet reached."
          }
        }
      },
      "GetWeightsResponse" : {
        "required" : [ "w", "x" ],
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "array",
            "description" : "The nodes of the orthogonal polynomials.",
            "items" : {
              "type" : "number"
            }
          },
          "w" : {
            "type" : "array",
            "description" : "The weights of the orthogonal polynomials.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "ImproveRequest" : {
        "type" : "object",
        "properties" : {
          "initial_solution" : {
            "type" : "array",
            "description" : "The initial solution vector to be improved.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "IntegrationBounds" : {
        "required" : [ "x1", "x2", "y1", "y2", "z1", "z2" ],
        "type" : "object",
        "properties" : {
          "x1" : {
            "type" : "number",
            "description" : "Lower bound of the integration region along the x-axis.",
            "format" : "double"
          },
          "x2" : {
            "type" : "number",
            "description" : "Upper bound of the integration region along the x-axis.",
            "format" : "double"
          },
          "y1" : {
            "type" : "string",
            "description" : "Expression for the lower bound of y given x."
          },
          "y2" : {
            "type" : "string",
            "description" : "Expression for the upper bound of y given x."
          },
          "z1" : {
            "type" : "string",
            "description" : "Expression for the lower bound of z given x and y."
          },
          "z2" : {
            "type" : "string",
            "description" : "Expression for the upper bound of z given x and y."
          }
        }
      },
      "InterpResponse" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "number"
          }
        }
      },
      "InterpolationRequest" : {
        "required" : [ "interpolatePoints", "method", "parameters", "points", "values" ],
        "type" : "object",
        "properties" : {
          "points" : {
            "type" : "array",
            "description" : "The input points for interpolation.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "values" : {
            "type" : "array",
            "description" : "The values at the input points.",
            "items" : {
              "type" : "number"
            }
          },
          "interpolatePoints" : {
            "type" : "array",
            "description" : "The points at which to interpolate values.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "method" : {
            "type" : "string",
            "description" : "The method to use for interpolation ('RBF' or 'Shepard')."
          },
          "parameters" : {
            "$ref" : "#/components/schemas/InterpolationRequest_parameters"
          }
        }
      },
      "InterpolationRequest_parameters" : {
        "type" : "object",
        "properties" : {
          "rbfType" : {
            "type" : "string"
          },
          "scale" : {
            "type" : "number"
          },
          "p" : {
            "type" : "number"
          }
        },
        "description" : "Parameters specific to the interpolation method."
      },
      "InterpolationResponse" : {
        "type" : "object",
        "properties" : {
          "interpolatedValues" : {
            "type" : "array",
            "description" : "The interpolated values at the provided points.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "InverseCDFRequest" : {
        "required" : [ "p" ],
        "type" : "object",
        "properties" : {
          "p" : {
            "type" : "number",
            "description" : "Probability value for calculating the inverse CDF."
          }
        }
      },
      "InverseCDFResponse" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number",
            "description" : "The quantile corresponding to the probability value."
          }
        }
      },
      "JacobiRequest" : {
        "required" : [ "matrix" ],
        "type" : "object",
        "properties" : {
          "matrix" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "JacobiResponse" : {
        "type" : "object",
        "properties" : {
          "eigenvalues" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "eigenvectors" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "KmeansData" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "The dataset for Kmeans clustering.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "means" : {
            "type" : "array",
            "description" : "Initial means for clustering.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "KmeansResult" : {
        "type" : "object",
        "properties" : {
          "nchg" : {
            "type" : "integer",
            "description" : "Number of changes in cluster assignments."
          }
        }
      },
      "KrigData" : {
        "type" : "object",
        "properties" : {
          "xstar" : {
            "type" : "array",
            "description" : "The point at which to interpolate.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "KrigResult" : {
        "type" : "object",
        "properties" : {
          "lastval" : {
            "type" : "number",
            "description" : "The interpolated value at the given point."
          },
          "lasterr" : {
            "type" : "number",
            "description" : "Estimated error of the interpolation."
          }
        }
      },
      "LUResult" : {
        "type" : "object",
        "properties" : {
          "solution" : {
            "type" : "array",
            "description" : "The solution vector obtained after solving using LU decomposition.",
            "items" : {
              "type" : "number"
            }
          },
          "determinant" : {
            "type" : "number",
            "description" : "The determinant of the input matrix obtained during LU decomposition."
          }
        }
      },
      "LUdcmpResult" : {
        "type" : "object",
        "properties" : {
          "lu" : {
            "$ref" : "#/components/schemas/Matrix"
          },
          "indx" : {
            "type" : "array",
            "description" : "The permutation vector of the rows.",
            "items" : {
              "type" : "integer"
            }
          },
          "d" : {
            "type" : "number",
            "description" : "The determinant of the permutation matrix."
          }
        }
      },
      "LaplaceInterpolationRequest" : {
        "required" : [ "matrix" ],
        "type" : "object",
        "properties" : {
          "matrix" : {
            "type" : "array",
            "description" : "The input matrix for interpolation.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number",
                "description" : "A row in the matrix."
              }
            }
          }
        }
      },
      "LaplaceInterpolationResponse" : {
        "type" : "object",
        "properties" : {
          "interpolatedMatrix" : {
            "type" : "array",
            "description" : "The result of Laplace interpolation on the input matrix.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number",
                "description" : "A row in the interpolated matrix."
              }
            }
          },
          "error" : {
            "type" : "number",
            "description" : "The error value after performing the interpolation."
          },
          "iterations" : {
            "type" : "integer",
            "description" : "The number of iterations performed during the interpolation.",
            "format" : "int32"
          }
        }
      },
      "LegendrePolynomialRequest" : {
        "required" : [ "l", "m", "x" ],
        "type" : "object",
        "properties" : {
          "l" : {
            "type" : "integer",
            "description" : "The degree of the Legendre polynomial."
          },
          "m" : {
            "type" : "integer",
            "description" : "The order of the Legendre polynomial."
          },
          "x" : {
            "type" : "number",
            "description" : "The value at which the Legendre polynomial is evaluated."
          }
        }
      },
      "LegendrePolynomialResponse" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number",
            "description" : "The computed value of the Legendre polynomial."
          }
        }
      },
      "LineMinimizationRequest" : {
        "type" : "object",
        "properties" : {
          "initialPoint" : {
            "type" : "array",
            "description" : "Initial point vector for minimization.",
            "items" : {
              "type" : "number"
            }
          },
          "direction" : {
            "type" : "array",
            "description" : "Direction vector for line minimization.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "LineMinimizationResponse" : {
        "type" : "object",
        "properties" : {
          "minimizedPoint" : {
            "type" : "array",
            "description" : "Resulting point vector after minimization.",
            "items" : {
              "type" : "number"
            }
          },
          "functionValue" : {
            "type" : "number",
            "description" : "The function value at the minimized point."
          }
        }
      },
      "LinearEquationRequest" : {
        "required" : [ "matrixA", "vectorB" ],
        "type" : "object",
        "properties" : {
          "matrixA" : {
            "$ref" : "#/components/schemas/Matrix"
          },
          "vectorB" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "threshold" : {
            "type" : "number"
          }
        }
      },
      "LinearEquationResponse" : {
        "type" : "object",
        "properties" : {
          "solutionVector" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "LinearEquations" : {
        "type" : "object",
        "properties" : {
          "coefficients" : {
            "type" : "array",
            "description" : "The coefficients of the linear equations.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "constants" : {
            "type" : "array",
            "description" : "The constants of the linear equations.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "LinearInterpolationRequest" : {
        "required" : [ "xPoint", "xValues", "yValues" ],
        "type" : "object",
        "properties" : {
          "xValues" : {
            "type" : "array",
            "description" : "The x values of the data points.",
            "items" : {
              "type" : "number"
            }
          },
          "yValues" : {
            "type" : "array",
            "description" : "The y values of the data points.",
            "items" : {
              "type" : "number"
            }
          },
          "xPoint" : {
            "type" : "number",
            "description" : "The x value for which to interpolate a y value."
          }
        }
      },
      "LinearInterpolationResponse" : {
        "type" : "object",
        "properties" : {
          "interpolatedY" : {
            "type" : "number",
            "description" : "The interpolated y value for the provided xPoint."
          }
        }
      },
      "LinearRegressionRequest" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "array",
            "description" : "The x-coordinates of data points.",
            "items" : {
              "type" : "number"
            }
          },
          "y" : {
            "type" : "array",
            "description" : "The y-coordinates of data points.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "LinearRegressionResponse" : {
        "type" : "object",
        "properties" : {
          "a" : {
            "type" : "number",
            "description" : "The intercept of the fitted line."
          },
          "b" : {
            "type" : "number",
            "description" : "The slope of the fitted line."
          },
          "siga" : {
            "type" : "number",
            "description" : "The standard deviation of the intercept."
          },
          "sigb" : {
            "type" : "number",
            "description" : "The standard deviation of the slope."
          },
          "chi2" : {
            "type" : "number",
            "description" : "The chi-squared of the fit."
          },
          "q" : {
            "type" : "number",
            "description" : "The goodness-of-fit probability."
          }
        }
      },
      "LinearRegressionWithErrorRequest" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "array",
            "description" : "The x-coordinates of data points.",
            "items" : {
              "type" : "number"
            }
          },
          "y" : {
            "type" : "array",
            "description" : "The y-coordinates of data points.",
            "items" : {
              "type" : "number"
            }
          },
          "sig" : {
            "type" : "array",
            "description" : "The standard deviations of y-coordinates.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "LinearSystemRequest" : {
        "required" : [ "a", "b" ],
        "type" : "object",
        "properties" : {
          "a" : {
            "$ref" : "#/components/schemas/Matrix"
          },
          "b" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "thresh" : {
            "type" : "number"
          }
        }
      },
      "LinearSystemResponse" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "LogisticDistributionRequest" : {
        "type" : "object",
        "properties" : {
          "mu" : {
            "type" : "number",
            "description" : "The location parameter of the logistic distribution."
          },
          "s" : {
            "type" : "number",
            "description" : "The scale parameter of the logistic distribution."
          }
        }
      },
      "LogisticDistributionResponse" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "number",
            "description" : "The result from the logistic distribution operation."
          }
        }
      },
      "LogisticdevRequest" : {
        "required" : [ "mu", "seed", "sig" ],
        "type" : "object",
        "properties" : {
          "mu" : {
            "type" : "number",
            "description" : "The location parameter of the logistic distribution.",
            "format" : "double"
          },
          "sig" : {
            "type" : "number",
            "description" : "The scale parameter of the logistic distribution.",
            "format" : "double"
          },
          "seed" : {
            "type" : "integer",
            "description" : "The seed for the random number generator.",
            "format" : "int64"
          }
        }
      },
      "LogisticdistRequest" : {
        "required" : [ "mu", "sig", "x" ],
        "type" : "object",
        "properties" : {
          "mu" : {
            "type" : "number",
            "description" : "Location parameter of the Logistic distribution."
          },
          "sig" : {
            "type" : "number",
            "description" : "Scale parameter of the Logistic distribution."
          },
          "x" : {
            "type" : "number",
            "description" : "The value at which to evaluate the distribution."
          }
        }
      },
      "LognormalDistributionRequest" : {
        "type" : "object",
        "properties" : {
          "mu" : {
            "type" : "number",
            "description" : "Mean of the lognormal distribution."
          },
          "sig" : {
            "type" : "number",
            "description" : "Standard deviation of the lognormal distribution."
          },
          "x" : {
            "type" : "number",
            "description" : "Value to evaluate the lognormal distribution function at."
          }
        }
      },
      "LognormalDistributionResponse" : {
        "type" : "object",
        "properties" : {
          "probability" : {
            "type" : "number",
            "description" : "Probability density function result."
          }
        }
      },
      "MCintegrate" : {
        "required" : [ "ff", "fferr", "fn", "funcsp", "inregionp", "ndim", "nfun", "ranseed", "sf", "sferr", "vol", "x", "xhi", "xlo", "xx" ],
        "type" : "object",
        "properties" : {
          "ndim" : {
            "type" : "integer",
            "description" : "The number of dimensions of the integration space."
          },
          "nfun" : {
            "type" : "integer",
            "description" : "The number of functions to integrate."
          },
          "ff" : {
            "type" : "array",
            "description" : "The integrated values of the functions.",
            "items" : {
              "type" : "number"
            }
          },
          "fferr" : {
            "type" : "array",
            "description" : "The estimated errors of the integrated values.",
            "items" : {
              "type" : "number"
            }
          },
          "xlo" : {
            "type" : "array",
            "description" : "The lower bounds of the integration space.",
            "items" : {
              "type" : "number"
            }
          },
          "xhi" : {
            "type" : "array",
            "description" : "The upper bounds of the integration space.",
            "items" : {
              "type" : "number"
            }
          },
          "x" : {
            "type" : "array",
            "description" : "The current point being sampled.",
            "items" : {
              "type" : "number"
            }
          },
          "xx" : {
            "type" : "array",
            "description" : "The transformed point being sampled.",
            "items" : {
              "type" : "number"
            }
          },
          "fn" : {
            "type" : "array",
            "description" : "The evaluated functions at the sampled point.",
            "items" : {
              "type" : "number"
            }
          },
          "sf" : {
            "type" : "array",
            "description" : "The accumulated sum of the evaluated functions.",
            "items" : {
              "type" : "number"
            }
          },
          "sferr" : {
            "type" : "array",
            "description" : "The accumulated sum of squared errors of the evaluated functions.",
            "items" : {
              "type" : "number"
            }
          },
          "vol" : {
            "type" : "number",
            "description" : "The volume of the integration space."
          },
          "funcsp" : {
            "type" : "string",
            "description" : "The function to integrate."
          },
          "xmapp" : {
            "type" : "string",
            "description" : "The mapping function to transform input coordinates (optional)."
          },
          "inregionp" : {
            "type" : "string",
            "description" : "The function to determine if a point is within the integration region."
          },
          "ranseed" : {
            "type" : "integer",
            "description" : "The seed for the random number generator."
          }
        }
      },
      "MacharSolution" : {
        "required" : [ "eps", "epsneg", "ibeta", "iexp", "irnd", "it", "machep", "maxexp", "minexp", "negep", "ngrd", "xmax", "xmin" ],
        "type" : "object",
        "properties" : {
          "ibeta" : {
            "type" : "integer",
            "description" : "The base of the arithmetic."
          },
          "it" : {
            "type" : "integer",
            "description" : "The number of base-ibeta digits in the floating-point significand."
          },
          "irnd" : {
            "type" : "integer",
            "description" : "Rounding mode."
          },
          "ngrd" : {
            "type" : "integer",
            "description" : "The number of guard digits for multiplication."
          },
          "machep" : {
            "type" : "integer",
            "description" : "The largest negative integer such that 1.0+float(ibeta)**machep != 1.0."
          },
          "negep" : {
            "type" : "integer",
            "description" : "The smallest negative integer such that 1.0-float(ibeta)**negep != 1.0."
          },
          "iexp" : {
            "type" : "integer",
            "description" : "The number of bits in the exponent."
          },
          "minexp" : {
            "type" : "integer",
            "description" : "The smallest exponent E such that float(ibeta)**(E-1) is a normalized float."
          },
          "maxexp" : {
            "type" : "integer",
            "description" : "The largest exponent E such that float(ibeta)**(E-1) is a normalized float."
          },
          "eps" : {
            "type" : "number",
            "description" : "The smallest positive floating-point number such that 1.0+eps != 1.0.",
            "format" : "double"
          },
          "epsneg" : {
            "type" : "number",
            "description" : "The smallest positive floating-point number such that 1.0-epsneg != 1.0.",
            "format" : "double"
          },
          "xmin" : {
            "type" : "number",
            "description" : "The smallest non-zero normalized floating-point number.",
            "format" : "double"
          },
          "xmax" : {
            "type" : "number",
            "description" : "The largest normalized floating-point number.",
            "format" : "double"
          }
        }
      },
      "Matrix" : {
        "required" : [ "elements", "ncols", "nrows" ],
        "type" : "object",
        "properties" : {
          "nrows" : {
            "type" : "integer",
            "description" : "The number of rows in the matrix."
          },
          "ncols" : {
            "type" : "integer",
            "description" : "The number of columns in the matrix."
          },
          "elements" : {
            "type" : "array",
            "description" : "A two-dimensional array representing the elements of the matrix.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "MatrixCreationRequest" : {
        "type" : "object",
        "properties" : {
          "rows" : {
            "type" : "integer"
          },
          "columns" : {
            "type" : "integer"
          },
          "initialValues" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "MatrixFactorizationRequest" : {
        "required" : [ "matrixSize", "nonZeroElements" ],
        "type" : "object",
        "properties" : {
          "matrixSize" : {
            "type" : "integer",
            "description" : "The size of the square matrix."
          },
          "nonZeroElements" : {
            "type" : "integer",
            "description" : "The estimated number of non-zero elements."
          }
        }
      },
      "MatrixOperationResponse" : {
        "type" : "object",
        "properties" : {
          "success" : {
            "type" : "boolean"
          },
          "matrix" : {
            "$ref" : "#/components/schemas/Matrix"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "MatrixSolutionRequest" : {
        "required" : [ "rightHandSideVector" ],
        "type" : "object",
        "properties" : {
          "rightHandSideVector" : {
            "type" : "array",
            "description" : "The right-hand side vector for the matrix equation Ax = b.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "MatrixVectorMultiplicationRequest" : {
        "type" : "object",
        "properties" : {
          "matrix" : {
            "$ref" : "#/components/schemas/SparseMatrix"
          },
          "vector" : {
            "$ref" : "#/components/schemas/Vector"
          }
        }
      },
      "MatrixVectorMultiplyRequest" : {
        "required" : [ "transpose", "vector" ],
        "type" : "object",
        "properties" : {
          "vector" : {
            "type" : "array",
            "description" : "The vector to be multiplied by the matrix.",
            "items" : {
              "type" : "number"
            }
          },
          "transpose" : {
            "type" : "boolean",
            "description" : "Whether to use the transpose of the matrix for multiplication."
          }
        }
      },
      "Mgfas" : {
        "required" : [ "n", "ng", "rho", "uj" ],
        "type" : "object",
        "properties" : {
          "n" : {
            "type" : "integer",
            "description" : "The size of the matrix."
          },
          "ng" : {
            "type" : "integer",
            "description" : "The number of grid levels."
          },
          "uj" : {
            "type" : "array",
            "description" : "The solution matrix.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "uj1" : {
            "type" : "array",
            "description" : "The temporary solution matrix.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "rho" : {
            "type" : "array",
            "description" : "The array of matrices for multigrid.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "array",
                "items" : {
                  "type" : "number"
                }
              }
            }
          }
        }
      },
      "MinimizeRequest" : {
        "required" : [ "ax", "bx", "cx" ],
        "type" : "object",
        "properties" : {
          "ax" : {
            "type" : "number",
            "description" : "Start of bracketing interval"
          },
          "bx" : {
            "type" : "number",
            "description" : "Middle of bracketing interval"
          },
          "cx" : {
            "type" : "number",
            "description" : "End of bracketing interval"
          }
        }
      },
      "MinimizeResponse" : {
        "type" : "object",
        "properties" : {
          "xmin" : {
            "type" : "number",
            "description" : "Position of minimum"
          },
          "fmin" : {
            "type" : "number",
            "description" : "Function value at minimum"
          }
        }
      },
      "MiserRequest" : {
        "required" : [ "dith", "npts", "region" ],
        "type" : "object",
        "properties" : {
          "region" : {
            "type" : "array",
            "description" : "The multidimensional region over which to integrate, specified as [start1, end1, start2, end2, ..., startN, endN].",
            "items" : {
              "type" : "number"
            }
          },
          "npts" : {
            "type" : "integer",
            "description" : "The number of points to use in the Monte Carlo estimation."
          },
          "dith" : {
            "type" : "number",
            "description" : "Dithering parameter to control the variance reduction."
          }
        }
      },
      "MiserResponse" : {
        "required" : [ "average", "variance" ],
        "type" : "object",
        "properties" : {
          "average" : {
            "type" : "number",
            "description" : "The estimated average (integral) of the function over the specified region."
          },
          "variance" : {
            "type" : "number",
            "description" : "The estimated variance of the integral estimate."
          }
        }
      },
      "MnewtRequest" : {
        "required" : [ "functionId", "initialGuess", "ntrial", "tolf", "tolx" ],
        "type" : "object",
        "properties" : {
          "initialGuess" : {
            "type" : "array",
            "description" : "Initial guess for the solution of the system of nonlinear equations.",
            "items" : {
              "type" : "number"
            }
          },
          "ntrial" : {
            "type" : "integer",
            "description" : "Maximum number of trials for convergence."
          },
          "tolx" : {
            "type" : "number",
            "description" : "Convergence criterion on the solution vector."
          },
          "tolf" : {
            "type" : "number",
            "description" : "Convergence criterion on the function value."
          },
          "functionId" : {
            "type" : "string",
            "description" : "Identifier for the specific system of equations to solve, assuming predefined functions."
          }
        }
      },
      "MnewtResponse" : {
        "type" : "object",
        "properties" : {
          "solution" : {
            "type" : "array",
            "description" : "Solution vector of the system of nonlinear equations.",
            "items" : {
              "type" : "number"
            }
          },
          "converged" : {
            "type" : "boolean",
            "description" : "Indicates if the solution converged within the specified number of trials."
          }
        }
      },
      "MomentResponse" : {
        "type" : "object",
        "properties" : {
          "average" : {
            "type" : "number"
          },
          "averageDeviation" : {
            "type" : "number"
          },
          "standardDeviation" : {
            "type" : "number"
          },
          "variance" : {
            "type" : "number"
          },
          "skewness" : {
            "type" : "number"
          },
          "kurtosis" : {
            "type" : "number"
          }
        }
      },
      "MpAddRequest" : {
        "required" : [ "u", "v" ],
        "type" : "object",
        "properties" : {
          "u" : {
            "type" : "array",
            "description" : "The first multiple precision number.",
            "items" : {
              "type" : "integer"
            }
          },
          "v" : {
            "type" : "array",
            "description" : "The second multiple precision number.",
            "items" : {
              "type" : "integer"
            }
          }
        }
      },
      "MpMulRequest" : {
        "required" : [ "u", "v" ],
        "type" : "object",
        "properties" : {
          "u" : {
            "type" : "array",
            "description" : "The first multiple precision number.",
            "items" : {
              "type" : "integer"
            }
          },
          "v" : {
            "type" : "array",
            "description" : "The second multiple precision number.",
            "items" : {
              "type" : "integer"
            }
          }
        }
      },
      "MpResult" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "array",
            "description" : "The result of the arithmetic operation.",
            "items" : {
              "type" : "integer"
            }
          }
        }
      },
      "MpSubRequest" : {
        "required" : [ "u", "v" ],
        "type" : "object",
        "properties" : {
          "u" : {
            "type" : "array",
            "description" : "The minuend multiple precision number.",
            "items" : {
              "type" : "integer"
            }
          },
          "v" : {
            "type" : "array",
            "description" : "The subtrahend multiple precision number.",
            "items" : {
              "type" : "integer"
            }
          }
        }
      },
      "MpSubResponse" : {
        "type" : "object",
        "properties" : {
          "sign" : {
            "type" : "integer",
            "description" : "The sign of the result (0 for non-negative, -1 for negative)."
          },
          "result" : {
            "type" : "array",
            "description" : "The result of the subtraction.",
            "items" : {
              "type" : "integer"
            }
          }
        }
      },
      "MultivariateNormalRequest" : {
        "required" : [ "covariance", "mean" ],
        "type" : "object",
        "properties" : {
          "mean" : {
            "type" : "array",
            "description" : "The mean vector of the multivariate normal distribution.",
            "items" : {
              "type" : "number"
            }
          },
          "covariance" : {
            "type" : "array",
            "description" : "The covariance matrix of the multivariate normal distribution.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "MultivariateNormalResponse" : {
        "type" : "object",
        "properties" : {
          "sample" : {
            "type" : "array",
            "description" : "A random sample from the multivariate normal distribution.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "NearPointsRequest" : {
        "required" : [ "point", "radius" ],
        "type" : "object",
        "properties" : {
          "point" : {
            "$ref" : "#/components/schemas/Point"
          },
          "radius" : {
            "type" : "number",
            "description" : "Radius to search for nearby points.",
            "format" : "double"
          }
        }
      },
      "NearPointsResponse" : {
        "type" : "object",
        "properties" : {
          "points" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Point"
            }
          }
        }
      },
      "NormalDistributionRequest" : {
        "type" : "object",
        "properties" : {
          "mu" : {
            "type" : "number",
            "description" : "Mean of the distribution."
          },
          "sig" : {
            "type" : "number",
            "description" : "Standard deviation of the distribution."
          },
          "x" : {
            "type" : "number",
            "description" : "Value to evaluate the distribution function at."
          }
        }
      },
      "NormalDistributionResponse" : {
        "type" : "object",
        "properties" : {
          "probability" : {
            "type" : "number",
            "description" : "Probability density function result."
          }
        }
      },
      "NormaldevRequest" : {
        "required" : [ "mu", "seed", "sig" ],
        "type" : "object",
        "properties" : {
          "mu" : {
            "type" : "number"
          },
          "sig" : {
            "type" : "number"
          },
          "seed" : {
            "type" : "integer"
          }
        }
      },
      "NormaldevResponse" : {
        "type" : "object",
        "properties" : {
          "deviate" : {
            "type" : "number"
          }
        }
      },
      "Normaldev_BMRequest" : {
        "required" : [ "mu", "seed", "sig" ],
        "type" : "object",
        "properties" : {
          "mu" : {
            "type" : "number"
          },
          "sig" : {
            "type" : "number"
          },
          "seed" : {
            "type" : "integer"
          }
        }
      },
      "Normaldev_BMResponse" : {
        "type" : "object",
        "properties" : {
          "deviate" : {
            "type" : "number"
          }
        }
      },
      "NumericalIntegrationRequest" : {
        "required" : [ "bounds", "functionType", "method" ],
        "type" : "object",
        "properties" : {
          "method" : {
            "type" : "string",
            "description" : "Numerical integration method.",
            "enum" : [ "trapzd", "qtrap", "qsimp", "midpnt", "midinf", "midsql", "midsqu", "midexp", "qromb", "qromo" ]
          },
          "functionType" : {
            "type" : "string",
            "description" : "Indicates if the function is predefined or a custom (user-defined) JavaScript expression.",
            "enum" : [ "predefined", "custom" ]
          },
          "functionName" : {
            "type" : "string",
            "description" : "Name of the predefined function or JavaScript expression for custom functions. Used if functionType is 'predefined'."
          },
          "functionExpression" : {
            "type" : "string",
            "description" : "JavaScript expression of the function to be integrated. Used if functionType is 'custom'."
          },
          "bounds" : {
            "$ref" : "#/components/schemas/NumericalIntegrationRequest_bounds"
          },
          "eps" : {
            "type" : "number",
            "description" : "Desired accuracy for the integration.",
            "format" : "double",
            "default" : 0.00000000010
          }
        }
      },
      "NumericalIntegrationRequest_bounds" : {
        "required" : [ "a", "b" ],
        "type" : "object",
        "properties" : {
          "a" : {
            "type" : "number",
            "description" : "The lower limit of the integration interval.",
            "format" : "double"
          },
          "b" : {
            "type" : "number",
            "description" : "The upper limit of the integration interval.",
            "format" : "double"
          }
        }
      },
      "NumericalIntegrationResponse" : {
        "type" : "object",
        "properties" : {
          "integralValue" : {
            "type" : "number",
            "description" : "The estimated value of the integral over the specified interval.",
            "format" : "double"
          }
        }
      },
      "NumericalOptimizationRequest" : {
        "required" : [ "functionExpression", "initialGuess", "method" ],
        "type" : "object",
        "properties" : {
          "method" : {
            "type" : "string",
            "description" : "Numerical optimization method.",
            "enum" : [ "dfpmin", "lnsrch", "newt", "broydn" ]
          },
          "functionExpression" : {
            "type" : "string",
            "description" : "JavaScript expression representing the function to optimize."
          },
          "initialGuess" : {
            "type" : "array",
            "description" : "Initial guess for the optimization parameters.",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          },
          "stpmax" : {
            "type" : "number",
            "description" : "Maximum step size in line search.",
            "format" : "double"
          },
          "eps" : {
            "type" : "number",
            "description" : "Desired accuracy for the optimization.",
            "format" : "double",
            "default" : 0.00000000010
          }
        }
      },
      "NumericalOptimizationResponse" : {
        "type" : "object",
        "properties" : {
          "optimizedParameters" : {
            "type" : "array",
            "description" : "Optimized parameters after the optimization process.",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          },
          "functionValue" : {
            "type" : "number",
            "description" : "Value of the function at the optimized parameters.",
            "format" : "double"
          },
          "success" : {
            "type" : "boolean",
            "description" : "Indicates if the optimization was successful."
          },
          "errorMessage" : {
            "type" : "string",
            "description" : "Error message in case the optimization failed."
          }
        }
      },
      "OdeResults" : {
        "type" : "object",
        "properties" : {
          "solution" : {
            "type" : "array",
            "description" : "The solution of the ODE, potentially including dense output if requested.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "success" : {
            "type" : "boolean",
            "description" : "Indicates if the solving process was successful."
          },
          "message" : {
            "type" : "string",
            "description" : "Additional information about the solve process or any errors."
          }
        }
      },
      "OptimizationResponse" : {
        "type" : "object",
        "properties" : {
          "solutionVector" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "objectiveValue" : {
            "type" : "number",
            "description" : "The value of the objective function at the solution vector."
          }
        }
      },
      "PSPageResponse" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "Confirmation message indicating the page was created."
          }
        }
      },
      "PadeRequest" : {
        "required" : [ "coefficients" ],
        "type" : "object",
        "properties" : {
          "coefficients" : {
            "type" : "array",
            "description" : "The coefficients of the power series for which the Pade approximation is to be computed.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "PadeResponse" : {
        "type" : "object",
        "properties" : {
          "numerator" : {
            "type" : "array",
            "description" : "The coefficients of the numerator of the Pade approximation.",
            "items" : {
              "type" : "number"
            }
          },
          "denominator" : {
            "type" : "array",
            "description" : "The coefficients of the denominator of the Pade approximation.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "PeriodogramRequest" : {
        "required" : [ "hifac", "ofac", "x", "y" ],
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "array",
            "description" : "The time points of the time series data.",
            "items" : {
              "type" : "number"
            }
          },
          "y" : {
            "type" : "array",
            "description" : "The observed values at the time points in `x`.",
            "items" : {
              "type" : "number"
            }
          },
          "ofac" : {
            "type" : "number",
            "description" : "The oversampling factor to use in the periodogram estimation."
          },
          "hifac" : {
            "type" : "number",
            "description" : "The high-frequency factor to determine the maximum frequency."
          }
        }
      },
      "PeriodogramResponse" : {
        "type" : "object",
        "properties" : {
          "px" : {
            "type" : "array",
            "description" : "The frequencies at which the power was estimated.",
            "items" : {
              "type" : "number"
            }
          },
          "py" : {
            "type" : "array",
            "description" : "The estimated power at the frequencies in `px`.",
            "items" : {
              "type" : "number"
            }
          },
          "nout" : {
            "type" : "integer",
            "description" : "The number of output points in the periodogram."
          },
          "jmax" : {
            "type" : "integer",
            "description" : "The index of the maximum power in `py`."
          },
          "prob" : {
            "type" : "number",
            "description" : "The false alarm probability of observing a power as large as the maximum in `py` by chance."
          }
        }
      },
      "PhylogeneticAnalysisRequest" : {
        "required" : [ "distanceMatrix", "method" ],
        "type" : "object",
        "properties" : {
          "distanceMatrix" : {
            "type" : "array",
            "description" : "The distance matrix representing the dissimilarities between taxa.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "method" : {
            "type" : "string",
            "description" : "The agglomeration method to use for constructing the phylogenetic tree.",
            "enum" : [ "wpgma", "upgma", "slc", "clc", "nj" ]
          }
        }
      },
      "PhylogeneticAnalysisResponse" : {
        "type" : "object",
        "properties" : {
          "taskId" : {
            "type" : "string",
            "description" : "The unique identifier of the analysis task, used to retrieve results."
          }
        }
      },
      "PhylogeneticAnalysisResults" : {
        "type" : "object",
        "properties" : {
          "tree" : {
            "type" : "string",
            "description" : "The resulting phylogenetic tree in Newick format or another suitable format for representing the tree structure."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the analysis task, e.g., \"completed\" or \"error\"."
          },
          "errorMessage" : {
            "type" : "string",
            "description" : "An error message, provided if the analysis could not be completed successfully.",
            "nullable" : true
          }
        }
      },
      "Plog" : {
        "required" : [ "dat", "ndat", "slogtau", "stau" ],
        "type" : "object",
        "properties" : {
          "dat" : {
            "type" : "array",
            "description" : "The input data.",
            "items" : {
              "type" : "number"
            }
          },
          "ndat" : {
            "type" : "integer",
            "description" : "The number of data points."
          },
          "stau" : {
            "type" : "array",
            "description" : "The difference between each data point and the first point.",
            "items" : {
              "type" : "number"
            }
          },
          "slogtau" : {
            "type" : "array",
            "description" : "The cumulative sum of log differences between data points.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "Point" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "number",
            "description" : "The x-coordinate of the point.",
            "format" : "double"
          },
          "y" : {
            "type" : "number",
            "description" : "The y-coordinate of the point.",
            "format" : "double"
          }
        }
      },
      "PointCreationRequest" : {
        "required" : [ "coordinates" ],
        "type" : "object",
        "properties" : {
          "coordinates" : {
            "type" : "array",
            "description" : "Coordinates of the point.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "PointResponse" : {
        "required" : [ "coordinates", "dimension" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "A unique identifier for the point. Optional, depending on whether your API assigns IDs to points."
          },
          "coordinates" : {
            "type" : "array",
            "description" : "The coordinates of the point.",
            "items" : {
              "type" : "number"
            }
          },
          "dimension" : {
            "type" : "integer",
            "description" : "The dimensionality of the point (e.g., 2 for 2D points, 3 for 3D points)."
          }
        },
        "example" : {
          "id" : "12345",
          "coordinates" : [ 1, 2, 3 ],
          "dimension" : 3
        }
      },
      "PointsDistanceRequest" : {
        "type" : "object",
        "properties" : {
          "point1" : {
            "$ref" : "#/components/schemas/PointCreationRequest"
          },
          "point2" : {
            "$ref" : "#/components/schemas/PointCreationRequest"
          }
        }
      },
      "PointsRequest" : {
        "required" : [ "points" ],
        "type" : "object",
        "properties" : {
          "points" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Point"
            }
          }
        }
      },
      "PoissondevRequest" : {
        "required" : [ "lambda", "seed" ],
        "type" : "object",
        "properties" : {
          "lambda" : {
            "type" : "number"
          },
          "seed" : {
            "type" : "integer"
          }
        }
      },
      "PoissondevResponse" : {
        "type" : "object",
        "properties" : {
          "deviate" : {
            "type" : "number"
          }
        }
      },
      "Poly2DInterpRequest" : {
        "required" : [ "mp", "np", "x1p", "x1v", "x2p", "x2v", "ym" ],
        "type" : "object",
        "properties" : {
          "x1v" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "x2v" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "ym" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "x1p" : {
            "type" : "number"
          },
          "x2p" : {
            "type" : "number"
          },
          "mp" : {
            "type" : "integer"
          },
          "np" : {
            "type" : "integer"
          }
        }
      },
      "PolynomialCoefficientRequest" : {
        "required" : [ "x", "y" ],
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "array",
            "description" : "The x coordinates of the data points.",
            "items" : {
              "type" : "number"
            }
          },
          "y" : {
            "type" : "array",
            "description" : "The y coordinates of the data points.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "PolynomialCoefficientResponse" : {
        "type" : "object",
        "properties" : {
          "coefficients" : {
            "type" : "array",
            "description" : "The calculated coefficients of the polynomial.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "PolynomialCoefficients" : {
        "required" : [ "coefficients" ],
        "type" : "object",
        "properties" : {
          "coefficients" : {
            "type" : "array",
            "description" : "Coefficients of the polynomial, starting with the highest degree.",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          }
        }
      },
      "PolynomialCoefficientsResponse" : {
        "type" : "object",
        "properties" : {
          "shiftedCoefficients" : {
            "type" : "array",
            "description" : "The shifted polynomial coefficients after applying the operation.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "PolynomialCreationRequest" : {
        "required" : [ "coefficients" ],
        "type" : "object",
        "properties" : {
          "coefficients" : {
            "type" : "array",
            "description" : "Coefficients of the polynomial, starting from the term of the highest degree.",
            "items" : {
              "type" : "number"
            }
          }
        },
        "example" : {
          "coefficients" : [ 3, -2, 0, 1 ]
        }
      },
      "PolynomialResponse" : {
        "required" : [ "coefficients", "degree" ],
        "type" : "object",
        "properties" : {
          "coefficients" : {
            "type" : "array",
            "description" : "Coefficients of the polynomial.",
            "items" : {
              "type" : "number"
            }
          },
          "degree" : {
            "type" : "integer",
            "description" : "Degree of the polynomial."
          }
        },
        "example" : {
          "coefficients" : [ 3, -2, 0, 1 ],
          "degree" : 3
        }
      },
      "PolynomialRootRequest" : {
        "required" : [ "coefficients" ],
        "type" : "object",
        "properties" : {
          "coefficients" : {
            "type" : "array",
            "description" : "Coefficients of the polynomial starting with the highest degree.",
            "example" : [ {
              "real" : 1,
              "imag" : 0
            }, {
              "real" : 0,
              "imag" : 0
            }, {
              "real" : -1,
              "imag" : 0
            } ],
            "items" : {
              "$ref" : "#/components/schemas/PolynomialRootRequest_coefficients"
            }
          },
          "polish" : {
            "type" : "boolean",
            "description" : "Whether to polish the roots for increased accuracy.",
            "default" : false
          }
        }
      },
      "PolynomialRootRequest_coefficients" : {
        "type" : "object",
        "properties" : {
          "real" : {
            "type" : "number",
            "format" : "double"
          },
          "imag" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "PolynomialRootResponse" : {
        "$ref" : "#/components/schemas/QRootResponse"
      },
      "PolynomialShiftRequest" : {
        "required" : [ "a", "b", "coefficients" ],
        "type" : "object",
        "properties" : {
          "a" : {
            "type" : "number",
            "description" : "The lower bound of the interval for shifting."
          },
          "b" : {
            "type" : "number",
            "description" : "The upper bound of the interval for shifting."
          },
          "coefficients" : {
            "type" : "array",
            "description" : "The coefficients of the polynomial to be shifted.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "PredictionRequest" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "PredictionResponse" : {
        "type" : "object",
        "properties" : {
          "predictions" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "PrimpolytestResponse" : {
        "required" : [ "N", "factors", "nfactors", "testResult" ],
        "type" : "object",
        "properties" : {
          "N" : {
            "type" : "integer",
            "description" : "The size parameter N used in the primality test.",
            "format" : "int32"
          },
          "nfactors" : {
            "type" : "integer",
            "description" : "The number of factors considered in the test.",
            "format" : "int32"
          },
          "factors" : {
            "type" : "array",
            "description" : "An array of factors used in the primality test.",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "testResult" : {
            "type" : "integer",
            "description" : "The result of the primality test, indicating if the polynomial is prime.",
            "format" : "int32"
          },
          "additionalInfo" : {
            "type" : "string",
            "description" : "Additional information or metrics calculated during the test."
          }
        }
      },
      "Proposal" : {
        "required" : [ "gau", "logstep" ],
        "type" : "object",
        "properties" : {
          "gau" : {
            "type" : "object",
            "description" : "The Gaussian random number generator."
          },
          "logstep" : {
            "type" : "number",
            "description" : "The log step."
          }
        }
      },
      "QRDecompositionRequest" : {
        "required" : [ "matrix" ],
        "type" : "object",
        "properties" : {
          "matrix" : {
            "$ref" : "#/components/schemas/Matrix"
          }
        }
      },
      "QRDecompositionSolveRequest" : {
        "required" : [ "qr_matrix", "vector_b" ],
        "type" : "object",
        "properties" : {
          "qr_matrix" : {
            "$ref" : "#/components/schemas/QRMatrix"
          },
          "vector_b" : {
            "$ref" : "#/components/schemas/Vector"
          }
        }
      },
      "QRMatrix" : {
        "required" : [ "q_matrix", "r_matrix" ],
        "type" : "object",
        "properties" : {
          "q_matrix" : {
            "$ref" : "#/components/schemas/Matrix"
          },
          "r_matrix" : {
            "$ref" : "#/components/schemas/Matrix"
          }
        }
      },
      "QRootRequest" : {
        "required" : [ "epsilon", "initialGuessB", "initialGuessC", "polynomial" ],
        "type" : "object",
        "properties" : {
          "polynomial" : {
            "$ref" : "#/components/schemas/PolynomialCoefficients"
          },
          "initialGuessB" : {
            "type" : "number",
            "description" : "Initial guess for the b coefficient of the root.",
            "format" : "double"
          },
          "initialGuessC" : {
            "type" : "number",
            "description" : "Initial guess for the c coefficient of the root.",
            "format" : "double"
          },
          "epsilon" : {
            "type" : "number",
            "description" : "Desired precision of the root finding process.",
            "format" : "double"
          }
        }
      },
      "QRootResponse" : {
        "type" : "object",
        "properties" : {
          "roots" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PolynomialRootRequest_coefficients"
            }
          }
        }
      },
      "Quad3dRequest" : {
        "required" : [ "bounds", "functionId" ],
        "type" : "object",
        "properties" : {
          "functionId" : {
            "type" : "string",
            "description" : "Identifier of the function to be integrated."
          },
          "bounds" : {
            "$ref" : "#/components/schemas/IntegrationBounds"
          }
        }
      },
      "Quad3dResponse" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "number",
            "description" : "Result of the integration.",
            "format" : "double"
          }
        }
      },
      "QuadraticRootRequest" : {
        "required" : [ "coefficients" ],
        "type" : "object",
        "properties" : {
          "coefficients" : {
            "type" : "array",
            "description" : "Coefficients of the quadratic polynomial in the form ax^2 + bx + c.",
            "example" : [ 1, -3, 2 ],
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "QuadrilateralValuesRequest" : {
        "required" : [ "x", "y" ],
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "number",
            "description" : "The x-coordinate of the quadrilateral's position.",
            "format" : "double"
          },
          "y" : {
            "type" : "number",
            "description" : "The y-coordinate of the quadrilateral's position.",
            "format" : "double"
          }
        }
      },
      "QuadrilateralValuesResponse" : {
        "type" : "object",
        "properties" : {
          "fa" : {
            "type" : "number",
            "description" : "The value at corner A.",
            "format" : "double"
          },
          "fb" : {
            "type" : "number",
            "description" : "The value at corner B.",
            "format" : "double"
          },
          "fc" : {
            "type" : "number",
            "description" : "The value at corner C.",
            "format" : "double"
          },
          "fd" : {
            "type" : "number",
            "description" : "The value at corner D.",
            "format" : "double"
          }
        }
      },
      "QuadtreeCreationRequest" : {
        "required" : [ "dimensions", "maxDepth", "points" ],
        "type" : "object",
        "properties" : {
          "dimensions" : {
            "type" : "integer",
            "description" : "Dimension of the space for the quadtree."
          },
          "maxDepth" : {
            "type" : "integer",
            "description" : "Maximum depth of the quadtree."
          },
          "points" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Point"
            }
          }
        }
      },
      "RNGInitializationRequest" : {
        "required" : [ "seed" ],
        "type" : "object",
        "properties" : {
          "seed" : {
            "type" : "integer",
            "description" : "Seed value to initialize the random number generator.",
            "format" : "int64"
          }
        }
      },
      "RandomNumberResponse" : {
        "required" : [ "randomValue" ],
        "type" : "object",
        "properties" : {
          "randomValue" : {
            "type" : "number",
            "description" : "A random number generated by the RNG."
          }
        }
      },
      "RandomPointRequest" : {
        "required" : [ "regionBounds" ],
        "type" : "object",
        "properties" : {
          "regionBounds" : {
            "type" : "array",
            "description" : "An array representing the lower and upper bounds of the region. The first half of the array specifies the lower bounds, and the second half specifies the upper bounds for each dimension.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "RandomPointResponse" : {
        "required" : [ "randomPoint" ],
        "type" : "object",
        "properties" : {
          "randomPoint" : {
            "type" : "array",
            "description" : "The random point generated within the specified region, represented as an array of coordinates.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "RationalFunctionCreationRequest" : {
        "required" : [ "denominatorCoefficients", "numeratorCoefficients" ],
        "type" : "object",
        "properties" : {
          "numeratorCoefficients" : {
            "type" : "array",
            "description" : "Coefficients of the numerator polynomial.",
            "items" : {
              "type" : "number"
            }
          },
          "denominatorCoefficients" : {
            "type" : "array",
            "description" : "Coefficients of the denominator polynomial.",
            "items" : {
              "type" : "number"
            }
          }
        },
        "example" : {
          "numeratorCoefficients" : [ 1, 0, -2 ],
          "denominatorCoefficients" : [ 1, -3, 2 ]
        }
      },
      "RationalFunctionResponse" : {
        "required" : [ "denominatorCoefficients", "numeratorCoefficients", "simplified" ],
        "type" : "object",
        "properties" : {
          "numeratorCoefficients" : {
            "type" : "array",
            "description" : "Coefficients of the numerator polynomial.",
            "items" : {
              "type" : "number"
            }
          },
          "denominatorCoefficients" : {
            "type" : "array",
            "description" : "Coefficients of the denominator polynomial.",
            "items" : {
              "type" : "number"
            }
          },
          "simplified" : {
            "type" : "boolean",
            "description" : "Indicates if the rational function is simplified."
          }
        },
        "example" : {
          "numeratorCoefficients" : [ 1, 0, -2 ],
          "denominatorCoefficients" : [ 1, -3, 2 ],
          "simplified" : true
        }
      },
      "RationalLeastSquaresRequest" : {
        "required" : [ "a", "b", "kk", "mm" ],
        "type" : "object",
        "properties" : {
          "a" : {
            "type" : "number",
            "description" : "The lower bound of the interval."
          },
          "b" : {
            "type" : "number",
            "description" : "The upper bound of the interval."
          },
          "mm" : {
            "type" : "integer",
            "description" : "The degree of the numerator of the rational function."
          },
          "kk" : {
            "type" : "integer",
            "description" : "The degree of the denominator of the rational function."
          }
        }
      },
      "RationalLeastSquaresResponse" : {
        "required" : [ "coefficients", "deviation" ],
        "type" : "object",
        "properties" : {
          "coefficients" : {
            "type" : "array",
            "description" : "The coefficients of the best-fitting rational function, starting with the numerator followed by the denominator.",
            "items" : {
              "type" : "number"
            }
          },
          "deviation" : {
            "type" : "number",
            "description" : "The maximum deviation of the fitting."
          }
        }
      },
      "RebinRequest" : {
        "required" : [ "j", "nd", "r", "rc", "xi" ],
        "type" : "object",
        "properties" : {
          "rc" : {
            "type" : "number",
            "description" : "The rebinning constant."
          },
          "nd" : {
            "type" : "integer",
            "description" : "The new density or the number of bins in the rebinned array."
          },
          "r" : {
            "type" : "array",
            "description" : "The array containing the ratios of the bins that need to be rebinned.",
            "items" : {
              "type" : "number"
            }
          },
          "xi" : {
            "type" : "array",
            "description" : "The matrix representing the bins to be rebinned.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "j" : {
            "type" : "integer",
            "description" : "The row of the matrix `xi` to be rebinned."
          }
        }
      },
      "RebinResponse" : {
        "required" : [ "xi" ],
        "type" : "object",
        "properties" : {
          "xi" : {
            "type" : "array",
            "description" : "The updated matrix after rebinning.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "RungeKuttaRequest" : {
        "required" : [ "dydx", "h", "x", "y" ],
        "type" : "object",
        "properties" : {
          "y" : {
            "type" : "array",
            "description" : "The current state of the system.",
            "items" : {
              "type" : "number"
            }
          },
          "dydx" : {
            "type" : "array",
            "description" : "The derivative of the state at the current step.",
            "items" : {
              "type" : "number"
            }
          },
          "x" : {
            "type" : "number",
            "description" : "The current value of the independent variable."
          },
          "h" : {
            "type" : "number",
            "description" : "The step size."
          }
        }
      },
      "RungeKuttaResponse" : {
        "required" : [ "yout" ],
        "type" : "object",
        "properties" : {
          "yout" : {
            "type" : "array",
            "description" : "The updated state of the system after one step.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "SORRequest" : {
        "required" : [ "a", "b", "c", "d", "e", "f", "rjac", "u" ],
        "type" : "object",
        "properties" : {
          "a" : {
            "type" : "array",
            "description" : "Coefficient matrix A.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "b" : {
            "type" : "array",
            "description" : "Coefficient matrix B.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "c" : {
            "type" : "array",
            "description" : "Coefficient matrix C.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "d" : {
            "type" : "array",
            "description" : "Coefficient matrix D.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "e" : {
            "type" : "array",
            "description" : "Coefficient matrix E.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "f" : {
            "type" : "array",
            "description" : "Right-hand side matrix F.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "u" : {
            "type" : "array",
            "description" : "Initial guess for the solution matrix U.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "rjac" : {
            "type" : "number",
            "description" : "Relaxation factor."
          }
        }
      },
      "SORResponse" : {
        "type" : "object",
        "properties" : {
          "u" : {
            "type" : "array",
            "description" : "Solution matrix U.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "iterations" : {
            "type" : "integer",
            "description" : "Number of iterations performed."
          }
        }
      },
      "SVDResult" : {
        "type" : "object",
        "properties" : {
          "u" : {
            "$ref" : "#/components/schemas/Matrix"
          },
          "w" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "v" : {
            "$ref" : "#/components/schemas/Matrix"
          }
        }
      },
      "SVMClassificationRequest" : {
        "required" : [ "inputData", "model" ],
        "type" : "object",
        "properties" : {
          "model" : {
            "$ref" : "#/components/schemas/SVMModel"
          },
          "inputData" : {
            "type" : "array",
            "description" : "The input data to classify, where each item is a vector.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "SVMClassificationResponse" : {
        "type" : "object",
        "properties" : {
          "predictions" : {
            "type" : "array",
            "description" : "The predicted class labels for the input data.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "SVMModel" : {
        "type" : "object",
        "properties" : {
          "supportVectors" : {
            "type" : "array",
            "description" : "The support vectors identified during training.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "coefficients" : {
            "type" : "array",
            "description" : "The coefficients of the support vectors in the decision function.",
            "items" : {
              "type" : "number"
            }
          },
          "intercept" : {
            "type" : "number",
            "description" : "The intercept of the decision function."
          }
        }
      },
      "SVMTrainingRequest" : {
        "required" : [ "data", "labels" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "The training data, where each item is a vector representing a data point.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "labels" : {
            "type" : "array",
            "description" : "The target labels corresponding to each data point in the training set.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "Sequence" : {
        "type" : "array",
        "description" : "A sequence of integers representing observed symbols.",
        "items" : {
          "type" : "integer"
        }
      },
      "SeriesSummationRequest" : {
        "required" : [ "eps", "initialTerms", "method", "nmax" ],
        "type" : "object",
        "properties" : {
          "method" : {
            "type" : "string",
            "description" : "The convergence acceleration method to use.",
            "enum" : [ "Eulsum", "Epsalg", "Levin" ]
          },
          "initialTerms" : {
            "type" : "array",
            "description" : "Initial series terms for summation.",
            "items" : {
              "type" : "number"
            }
          },
          "nmax" : {
            "type" : "integer",
            "description" : "The maximum number of terms to consider for summation."
          },
          "eps" : {
            "type" : "number",
            "description" : "Desired accuracy for convergence."
          },
          "omega" : {
            "type" : "number",
            "description" : "Weight factor for Levin method.",
            "nullable" : true
          },
          "beta" : {
            "type" : "number",
            "description" : "Beta parameter for Levin method.",
            "default" : 1
          }
        }
      },
      "SeriesSummationResponse" : {
        "type" : "object",
        "properties" : {
          "acceleratedSum" : {
            "type" : "number",
            "description" : "The accelerated sum or convergence value."
          },
          "converged" : {
            "type" : "boolean",
            "description" : "Whether the algorithm converged according to the given epsilon."
          },
          "iterations" : {
            "type" : "integer",
            "description" : "The number of iterations performed."
          }
        }
      },
      "SetColorRequest" : {
        "required" : [ "blue", "green", "red" ],
        "type" : "object",
        "properties" : {
          "red" : {
            "type" : "integer",
            "description" : "Red component of the color (0-255).",
            "format" : "int32"
          },
          "green" : {
            "type" : "integer",
            "description" : "Green component of the color (0-255).",
            "format" : "int32"
          },
          "blue" : {
            "type" : "integer",
            "description" : "Blue component of the color (0-255).",
            "format" : "int32"
          }
        }
      },
      "SetFontRequest" : {
        "required" : [ "fontName", "fontSize" ],
        "type" : "object",
        "properties" : {
          "fontName" : {
            "type" : "string",
            "description" : "Name of the font."
          },
          "fontSize" : {
            "type" : "number",
            "description" : "Size of the font."
          }
        }
      },
      "SfroidRequest" : {
        "required" : [ "c2Values", "m", "n" ],
        "type" : "object",
        "properties" : {
          "m" : {
            "type" : "integer",
            "description" : "The azimuthal quantum number."
          },
          "n" : {
            "type" : "integer",
            "description" : "The principal quantum number."
          },
          "c2Values" : {
            "type" : "array",
            "description" : "An array of c^2 values for which the solution is computed.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "SfroidResponse" : {
        "type" : "object",
        "properties" : {
          "results" : {
            "type" : "array",
            "description" : "An array of objects containing c^2 and lambda for each computation.",
            "items" : {
              "$ref" : "#/components/schemas/SfroidResponse_results"
            }
          }
        }
      },
      "SfroidResponse_results" : {
        "type" : "object",
        "properties" : {
          "c2" : {
            "type" : "number",
            "description" : "The c^2 value for the result."
          },
          "lambda" : {
            "type" : "number",
            "description" : "The computed lambda value for the given c^2."
          }
        }
      },
      "ShootingMethodRequest" : {
        "required" : [ "endPoint", "initialCondition", "startPoint" ],
        "type" : "object",
        "properties" : {
          "initialCondition" : {
            "type" : "array",
            "description" : "Initial condition vector at the start point.",
            "items" : {
              "type" : "number"
            }
          },
          "startPoint" : {
            "type" : "number",
            "description" : "The starting point of the interval.",
            "format" : "double"
          },
          "endPoint" : {
            "type" : "number",
            "description" : "The end point of the interval.",
            "format" : "double"
          }
        }
      },
      "ShootingMethodResponse" : {
        "type" : "object",
        "properties" : {
          "solution" : {
            "type" : "array",
            "description" : "Solution vector at the end point based on the shooting method.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "SimplexMethodRequest" : {
        "required" : [ "constraints", "initialVariables", "numberOfConstraints", "numberOfVariables", "objectiveFunction", "sparseMatrix" ],
        "type" : "object",
        "properties" : {
          "numberOfConstraints" : {
            "type" : "integer"
          },
          "numberOfVariables" : {
            "type" : "integer"
          },
          "initialVariables" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "constraints" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "objectiveFunction" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "sparseMatrix" : {
            "$ref" : "#/components/schemas/SparseMatrix"
          },
          "verbose" : {
            "type" : "boolean",
            "default" : false
          }
        }
      },
      "SimulateStepRequest" : {
        "type" : "object",
        "properties" : {
          "sinit" : {
            "type" : "array",
            "description" : "Initial state of the system for the simulation step.",
            "items" : {
              "type" : "number"
            }
          },
          "seed" : {
            "type" : "integer",
            "description" : "Seed for the random number generator."
          }
        }
      },
      "SimulateStepResponse" : {
        "type" : "object",
        "properties" : {
          "newState" : {
            "type" : "array",
            "description" : "State of the system after the simulation step.",
            "items" : {
              "type" : "number"
            }
          },
          "nextStepTime" : {
            "type" : "number",
            "description" : "The simulation time after the step is completed."
          }
        }
      },
      "SingleValueRequest" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number",
            "description" : "Input value for the function."
          }
        }
      },
      "SingleValueResponse" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "number",
            "description" : "Output result from the function."
          }
        }
      },
      "SobolSequenceRequest" : {
        "required" : [ "n" ],
        "type" : "object",
        "properties" : {
          "n" : {
            "type" : "integer",
            "description" : "The dimensionality of the Sobol sequence. Use negative values for initialization and positive for sequence generation."
          },
          "numberOfPoints" : {
            "type" : "integer",
            "description" : "The number of points to generate in the Sobol sequence. This applies only when generating sequences (positive `n`)."
          }
        }
      },
      "SobolSequenceResponse" : {
        "type" : "object",
        "properties" : {
          "points" : {
            "type" : "array",
            "description" : "The generated points in the Sobol sequence.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "Solution" : {
        "required" : [ "solutionVector" ],
        "type" : "object",
        "properties" : {
          "solutionVector" : {
            "type" : "array",
            "description" : "The vector representing the solution to the system of linear equations.",
            "items" : {
              "type" : "number"
            }
          },
          "error" : {
            "type" : "number",
            "description" : "An estimate of the error in the solution, if available."
          }
        },
        "example" : {
          "solutionVector" : [ 1.5, -2.3, 4 ],
          "error" : 0.005
        }
      },
      "SolutionResponse" : {
        "type" : "object",
        "properties" : {
          "solutionVector" : {
            "type" : "array",
            "description" : "The solution vector x for Ax = b.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "SolutionVector" : {
        "type" : "object",
        "properties" : {
          "solution" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "SolveOdeRequest" : {
        "required" : [ "functionDefinition", "initialConditions", "solverParameters" ],
        "type" : "object",
        "properties" : {
          "initialConditions" : {
            "type" : "array",
            "description" : "Initial values for the ODE variables.",
            "items" : {
              "type" : "number"
            }
          },
          "functionDefinition" : {
            "type" : "string",
            "description" : "The definition of the function to solve, represented as a string."
          },
          "solverParameters" : {
            "$ref" : "#/components/schemas/SolveOdeRequest_solverParameters"
          }
        }
      },
      "SolveOdeRequest_solverParameters" : {
        "type" : "object",
        "properties" : {
          "xStart" : {
            "type" : "number"
          },
          "xEnd" : {
            "type" : "number"
          },
          "atol" : {
            "type" : "number"
          },
          "rtol" : {
            "type" : "number"
          },
          "denseOutput" : {
            "type" : "boolean"
          }
        }
      },
      "SolveOdeResponse" : {
        "type" : "object",
        "properties" : {
          "sessionId" : {
            "type" : "string",
            "description" : "A session ID to be used for querying the results."
          }
        }
      },
      "SolvePreconditionerRequest" : {
        "required" : [ "b" ],
        "type" : "object",
        "properties" : {
          "b" : {
            "type" : "array",
            "description" : "The right-hand side vector of the preconditioner system.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "SolveResponse" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "SolveToeplitzRequest" : {
        "required" : [ "r", "y" ],
        "type" : "object",
        "properties" : {
          "r" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "y" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "SolveToeplitzResponse" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "SortRequest" : {
        "required" : [ "data", "method" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "Array of numbers to be sorted.",
            "items" : {
              "type" : "number"
            }
          },
          "secondaryData" : {
            "type" : "array",
            "description" : "Optional secondary array to be sorted according to the primary array's order.",
            "items" : {
              "type" : "number"
            }
          },
          "kthElement" : {
            "type" : "integer",
            "description" : "Optional index to select the k-th smallest element from the array."
          },
          "method" : {
            "type" : "string",
            "description" : "Sorting method to be applied.",
            "enum" : [ "sort", "sort2", "shell", "hpsort", "piksrt", "piksr2", "select", "heapselect" ]
          }
        }
      },
      "SortResponse" : {
        "type" : "object",
        "properties" : {
          "sortedData" : {
            "type" : "array",
            "description" : "Sorted array of numbers.",
            "items" : {
              "type" : "number"
            }
          },
          "secondarySortedData" : {
            "type" : "array",
            "description" : "Secondary array sorted according to the primary array's order.",
            "items" : {
              "type" : "number"
            }
          },
          "kthElementValue" : {
            "type" : "number",
            "description" : "The value of the k-th smallest element from the array."
          }
        }
      },
      "SparseMatrix" : {
        "required" : [ "columnPointers", "ncols", "nrows", "rowIndices", "values" ],
        "type" : "object",
        "properties" : {
          "nrows" : {
            "type" : "integer",
            "description" : "Number of rows in the sparse matrix."
          },
          "ncols" : {
            "type" : "integer",
            "description" : "Number of columns in the sparse matrix."
          },
          "values" : {
            "type" : "array",
            "description" : "Values of the non-zero elements in the sparse matrix. Referred to as `val` in some contexts.",
            "items" : {
              "type" : "number"
            }
          },
          "rowIndices" : {
            "type" : "array",
            "description" : "Row indices corresponding to each non-zero value in the sparse matrix. Also known as `row_ind` in other definitions.",
            "items" : {
              "type" : "integer"
            }
          },
          "columnPointers" : {
            "type" : "array",
            "description" : "Column pointers indicating the start of each column in the values array. Equivalent to `col_ptr` in certain descriptions.",
            "items" : {
              "type" : "integer"
            }
          }
        }
      },
      "SparseMatrixResponse" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "$ref" : "#/components/schemas/SparseMatrix"
          }
        }
      },
      "SphFptRequest" : {
        "required" : [ "c2", "m", "n" ],
        "type" : "object",
        "properties" : {
          "n" : {
            "type" : "integer",
            "description" : "Order of the spherical Bessel function."
          },
          "m" : {
            "type" : "integer",
            "description" : "Degree of the spherical harmonic."
          },
          "c2" : {
            "type" : "array",
            "description" : "Coefficients for the calculation.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "SphFptResponse" : {
        "type" : "object",
        "properties" : {
          "mu" : {
            "type" : "array",
            "description" : "Calculated zeros of the spherical Bessel function for given m and n.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "SphootRequest" : {
        "required" : [ "c2", "dx", "m", "n" ],
        "type" : "object",
        "properties" : {
          "n" : {
            "type" : "integer",
            "description" : "Order of the spherical Bessel function."
          },
          "m" : {
            "type" : "integer",
            "description" : "Degree of the spherical harmonic."
          },
          "c2" : {
            "type" : "array",
            "description" : "Array of coefficients for the differential equation.",
            "items" : {
              "type" : "number"
            }
          },
          "dx" : {
            "type" : "number",
            "description" : "Small increment used in the calculation."
          }
        }
      },
      "SphootResponse" : {
        "type" : "object",
        "properties" : {
          "mu" : {
            "type" : "number",
            "description" : "Calculated eigenvalue for the given m and n."
          }
        }
      },
      "Spline2DInterpRequest" : {
        "required" : [ "x1p", "x1v", "x2p", "x2v", "ym" ],
        "type" : "object",
        "properties" : {
          "x1v" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "x2v" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "ym" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "x1p" : {
            "type" : "number"
          },
          "x2p" : {
            "type" : "number"
          }
        }
      },
      "SpreadRequest" : {
        "type" : "object",
        "properties" : {
          "y" : {
            "type" : "number",
            "description" : "The data value to spread."
          },
          "yy" : {
            "type" : "array",
            "description" : "The array to spread the data into.",
            "items" : {
              "type" : "number"
            }
          },
          "x" : {
            "type" : "number",
            "description" : "The position at which to spread the data value."
          },
          "m" : {
            "type" : "integer",
            "description" : "The spreading factor."
          }
        }
      },
      "State" : {
        "required" : [ "k1", "k2", "lam1", "lam2", "tc" ],
        "type" : "object",
        "properties" : {
          "lam1" : {
            "type" : "number",
            "description" : "The value of lambda 1."
          },
          "lam2" : {
            "type" : "number",
            "description" : "The value of lambda 2."
          },
          "tc" : {
            "type" : "number",
            "description" : "The value of time constant."
          },
          "k1" : {
            "type" : "integer",
            "description" : "The value of k1."
          },
          "k2" : {
            "type" : "integer",
            "description" : "The value of k2."
          },
          "plog" : {
            "type" : "number",
            "description" : "The calculated plog value."
          }
        }
      },
      "StatisticalTestRequest" : {
        "required" : [ "data1", "data2" ],
        "type" : "object",
        "properties" : {
          "data1" : {
            "type" : "array",
            "description" : "First set of data points.",
            "items" : {
              "type" : "number"
            }
          },
          "data2" : {
            "type" : "array",
            "description" : "Second set of data points.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "StatisticalTestResponse" : {
        "type" : "object",
        "properties" : {
          "t" : {
            "type" : "number",
            "description" : "The calculated t-statistic."
          },
          "prob" : {
            "type" : "number",
            "description" : "The probability associated with the t-statistic."
          },
          "df" : {
            "type" : "number",
            "description" : "Degrees of freedom, applicable in some tests."
          },
          "f" : {
            "type" : "number",
            "description" : "The calculated F-statistic, applicable in F-test."
          },
          "chisq" : {
            "type" : "number",
            "description" : "The chi-squared statistic, applicable in chi-squared tests."
          },
          "tau" : {
            "type" : "number",
            "description" : "The Kendall tau statistic, applicable in Kendall tau test."
          },
          "z" : {
            "type" : "number",
            "description" : "The Z statistic, applicable in tests that return a Z value."
          }
        }
      },
      "StringAlignmentRequest" : {
        "type" : "object",
        "properties" : {
          "ain" : {
            "type" : "string",
            "description" : "The first input string to be aligned."
          },
          "bin" : {
            "type" : "string",
            "description" : "The second input string to be aligned."
          },
          "mispen" : {
            "type" : "number",
            "description" : "Penalty for a mismatch."
          },
          "gappen" : {
            "type" : "number",
            "description" : "Penalty for inserting a gap."
          },
          "skwpen" : {
            "type" : "number",
            "description" : "Penalty for skewness."
          }
        }
      },
      "StringAlignmentResponse" : {
        "type" : "object",
        "properties" : {
          "aout" : {
            "type" : "string",
            "description" : "Aligned version of the first input string."
          },
          "bout" : {
            "type" : "string",
            "description" : "Aligned version of the second input string."
          },
          "summary" : {
            "type" : "string",
            "description" : "Summary indicating matches(!) and mismatches(=)."
          }
        }
      },
      "SymmeigRequest" : {
        "required" : [ "matrix" ],
        "type" : "object",
        "properties" : {
          "matrix" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "yesvecs" : {
            "type" : "boolean"
          }
        }
      },
      "SymmeigResponse" : {
        "type" : "object",
        "properties" : {
          "eigenvalues" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "eigenvectors" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "TrainingDataRequest" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TrainingDataRequest_data"
            }
          }
        }
      },
      "TrainingDataRequest_data" : {
        "type" : "object",
        "properties" : {
          "features" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "label" : {
            "type" : "number"
          }
        }
      },
      "TrainingResult" : {
        "type" : "object",
        "properties" : {
          "supportVectors" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "coefficients" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "intercept" : {
            "type" : "number"
          }
        }
      },
      "Triangle" : {
        "type" : "object",
        "properties" : {
          "points" : {
            "type" : "array",
            "description" : "The three vertices of the triangle.",
            "items" : {
              "$ref" : "#/components/schemas/Point"
            }
          }
        }
      },
      "TridiagonalRequest" : {
        "required" : [ "lowerDiagonal", "mainDiagonal", "rightHandSide", "upperDiagonal" ],
        "type" : "object",
        "properties" : {
          "lowerDiagonal" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "mainDiagonal" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "upperDiagonal" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "rightHandSide" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "UnsymmeigRequest" : {
        "required" : [ "matrix" ],
        "type" : "object",
        "properties" : {
          "matrix" : {
            "type" : "array",
            "description" : "The nonsymmetric matrix for which eigenvalues and eigenvectors are computed.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "yesvecs" : {
            "type" : "boolean",
            "description" : "Flag indicating whether eigenvectors should be computed."
          },
          "hessen" : {
            "type" : "boolean",
            "description" : "Flag indicating whether the Hessenberg method should be used."
          }
        }
      },
      "UnsymmeigResponse" : {
        "type" : "object",
        "properties" : {
          "eigenvalues" : {
            "type" : "array",
            "description" : "The eigenvalues of the matrix, each with real and imaginary parts.",
            "items" : {
              "$ref" : "#/components/schemas/UnsymmeigResponse_eigenvalues"
            }
          },
          "eigenvectors" : {
            "type" : "array",
            "description" : "The eigenvectors of the matrix, if requested.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "UnsymmeigResponse_eigenvalues" : {
        "type" : "object",
        "properties" : {
          "real" : {
            "type" : "number"
          },
          "imag" : {
            "type" : "number"
          }
        }
      },
      "VandermondeRequest" : {
        "required" : [ "points", "q" ],
        "type" : "object",
        "properties" : {
          "points" : {
            "type" : "array",
            "description" : "An array of x-coordinates.",
            "items" : {
              "type" : "number"
            }
          },
          "q" : {
            "type" : "array",
            "description" : "An array of function values corresponding to each x-coordinate.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "VandermondeResponse" : {
        "type" : "object",
        "properties" : {
          "weights" : {
            "type" : "array",
            "description" : "The computed weights for the Vandermonde matrix.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "Vector" : {
        "required" : [ "elements", "size" ],
        "type" : "object",
        "properties" : {
          "size" : {
            "type" : "integer",
            "description" : "The size of the vector (number of elements)."
          },
          "elements" : {
            "type" : "array",
            "description" : "The elements of the vector.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "VectorResponse" : {
        "type" : "object",
        "properties" : {
          "resultVector" : {
            "type" : "array",
            "description" : "The result of the matrix-vector multiplication.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "VegasIntegrationRequest" : {
        "required" : [ "init", "itmx", "ncall", "nprn", "region" ],
        "type" : "object",
        "properties" : {
          "region" : {
            "type" : "array",
            "description" : "An array of pairs specifying the integration limits for each dimension.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "init" : {
            "type" : "integer",
            "description" : "Initialization state for the algorithm."
          },
          "ncall" : {
            "type" : "integer",
            "description" : "Number of function calls."
          },
          "itmx" : {
            "type" : "integer",
            "description" : "Maximum number of iterations."
          },
          "nprn" : {
            "type" : "integer",
            "description" : "Control parameter for the output of diagnostic messages."
          }
        }
      },
      "VegasIntegrationResponse" : {
        "type" : "object",
        "properties" : {
          "integral" : {
            "type" : "number",
            "description" : "Estimated value of the integral."
          },
          "error" : {
            "type" : "number",
            "description" : "Estimate of the statistical error (standard deviation) of the integral."
          },
          "chiSquare" : {
            "type" : "number",
            "description" : "Chi-square value for the goodness of fit."
          }
        }
      },
      "Voredge" : {
        "type" : "object",
        "properties" : {
          "p1" : {
            "$ref" : "#/components/schemas/Point"
          },
          "p2" : {
            "$ref" : "#/components/schemas/Point"
          },
          "nearpt" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "VoronoiResponse" : {
        "required" : [ "edges", "nseg" ],
        "type" : "object",
        "properties" : {
          "edges" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Voredge"
            }
          },
          "nseg" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "WaveletRequest" : {
        "required" : [ "data", "isign", "waveletType" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "waveletType" : {
            "type" : "string",
            "enum" : [ "Daub4", "Daubs", "Daub4i" ]
          },
          "isign" : {
            "type" : "integer",
            "description" : "Direction of the transformation, 1 for forward and -1 for inverse."
          },
          "ncof" : {
            "type" : "integer",
            "description" : "Number of coefficients (relevant for 'Daubs' type only)."
          }
        }
      },
      "WaveletResponse" : {
        "required" : [ "transformedData" ],
        "type" : "object",
        "properties" : {
          "transformedData" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "ZrhqrPolynomialRequest" : {
        "required" : [ "coefficients" ],
        "type" : "object",
        "properties" : {
          "coefficients" : {
            "type" : "array",
            "description" : "The coefficients of the polynomial, starting with the coefficient of the highest degree term.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "ZrhqrPolynomialRootsResponse" : {
        "type" : "object",
        "properties" : {
          "roots" : {
            "type" : "array",
            "description" : "The complex roots of the polynomial, found using the zrhqr method.",
            "items" : {
              "$ref" : "#/components/schemas/ComplexNumber"
            }
          }
        }
      },
      "amoeba_minimize_body" : {
        "type" : "object",
        "properties" : {
          "initialPoint" : {
            "type" : "array",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          },
          "delta" : {
            "type" : "number",
            "format" : "double"
          },
          "functionDetails" : {
            "type" : "string",
            "description" : "Representation of the function to minimize."
          }
        }
      },
      "autoregressivecoefficients_body" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "bessel_airy_ai_body" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "number",
            "description" : "Argument of the Airy function."
          }
        }
      },
      "bessel_j0_body" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "number",
            "description" : "The argument for the J0 Bessel function."
          }
        }
      },
      "bessel_j1_body" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "number",
            "description" : "The argument for the J1 Bessel function."
          }
        }
      },
      "bessel_jnu_body" : {
        "type" : "object",
        "properties" : {
          "nu" : {
            "type" : "number",
            "description" : "Order of the Bessel function."
          },
          "x" : {
            "type" : "number",
            "description" : "Argument of the Bessel function."
          }
        }
      },
      "bessel_ynu_body" : {
        "type" : "object",
        "properties" : {
          "nu" : {
            "type" : "number",
            "description" : "Order of the Bessel function."
          },
          "x" : {
            "type" : "number",
            "description" : "Argument of the Bessel function."
          }
        }
      },
      "chebyshev_evaluate_body" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "number",
            "description" : "The point at which to evaluate the polynomial."
          },
          "coefficients" : {
            "type" : "array",
            "description" : "The coefficients of the Chebyshev polynomial.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "cholesky_solve_body" : {
        "type" : "object",
        "properties" : {
          "matrix" : {
            "$ref" : "#/components/schemas/CholeskyRequest/properties/matrix"
          },
          "vector" : {
            "type" : "array",
            "description" : "The right-hand side vector of the equation.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "cosft1_body" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "The input data array for the operation.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "cosft2_body" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "The input data array for the operation.",
            "items" : {
              "type" : "number"
            }
          },
          "isign" : {
            "type" : "integer",
            "description" : "Direction of the transform (1 for forward, -1 for inverse).",
            "default" : 1
          }
        }
      },
      "crc_calculate_body" : {
        "required" : [ "data", "polynomial" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "string",
            "description" : "The string to calculate the CRC for."
          },
          "polynomial" : {
            "type" : "integer",
            "description" : "The index of the polynomial to be used for CRC calculation, from 0 to 7."
          },
          "fill" : {
            "type" : "boolean",
            "description" : "Whether to use a fill of 255 (true) or 0 (false) for CRC calculation."
          }
        }
      },
      "crc_grayCode_body" : {
        "required" : [ "number", "operation" ],
        "type" : "object",
        "properties" : {
          "number" : {
            "type" : "integer",
            "description" : "The number to be converted."
          },
          "operation" : {
            "type" : "string",
            "description" : "Specify the conversion operation: toGray or fromGray.",
            "enum" : [ "toGray", "fromGray" ]
          }
        }
      },
      "decchk_body" : {
        "type" : "object",
        "properties" : {
          "str" : {
            "type" : "string",
            "description" : "The string to check for validity."
          }
        }
      },
      "delaunay_triangulate_body" : {
        "required" : [ "points" ],
        "type" : "object",
        "properties" : {
          "points" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Point"
            }
          }
        }
      },
      "distribution_gamma_body" : {
        "required" : [ "alpha", "beta", "operation" ],
        "type" : "object",
        "properties" : {
          "alpha" : {
            "type" : "number",
            "description" : "The shape parameter of the gamma distribution."
          },
          "beta" : {
            "type" : "number",
            "description" : "The rate parameter of the gamma distribution."
          },
          "x" : {
            "type" : "number",
            "description" : "The input value for PDF or CDF calculation."
          },
          "p" : {
            "type" : "number",
            "description" : "The probability value for the inverse CDF calculation."
          },
          "operation" : {
            "type" : "string",
            "description" : "Specify the operation: pdf, cdf, or invcdf.",
            "enum" : [ "pdf", "cdf", "invcdf" ]
          }
        }
      },
      "fft_body" : {
        "required" : [ "data", "dimensions", "isign" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "Input data for the FFT operation.",
            "items" : {
              "type" : "number"
            }
          },
          "dimensions" : {
            "type" : "array",
            "description" : "Dimensions of the input data.",
            "items" : {
              "type" : "integer"
            }
          },
          "isign" : {
            "type" : "integer",
            "description" : "Direction of the FFT (1 for forward, -1 for inverse)."
          }
        }
      },
      "findRoot_body" : {
        "required" : [ "functionExpression", "interval", "method" ],
        "type" : "object",
        "properties" : {
          "method" : {
            "type" : "string",
            "description" : "The root-finding method to use.",
            "enum" : [ "zbrac", "zbrak", "rtbis", "rtflsp", "rtsec", "zriddr", "zbrent", "rtnewt", "rtsafe" ]
          },
          "functionExpression" : {
            "type" : "string",
            "description" : "The mathematical expression of the function for which the root is sought."
          },
          "interval" : {
            "$ref" : "#/components/schemas/findRoot_interval"
          },
          "accuracy" : {
            "type" : "number",
            "description" : "The accuracy for the root-finding operation.",
            "format" : "double",
            "default" : 0.00000000010
          }
        }
      },
      "findRoot_interval" : {
        "required" : [ "end", "start" ],
        "type" : "object",
        "properties" : {
          "start" : {
            "type" : "number",
            "description" : "The start of the interval within which to search for the root.",
            "format" : "double"
          },
          "end" : {
            "type" : "number",
            "description" : "The end of the interval within which to search for the root.",
            "format" : "double"
          }
        }
      },
      "findRoots_body" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/QuadraticRootRequest"
        }, {
          "$ref" : "#/components/schemas/PolynomialRootRequest"
        } ]
      },
      "four1_body" : {
        "required" : [ "data", "isign", "n" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "The input data array for the FFT operation.",
            "items" : {
              "type" : "number"
            }
          },
          "n" : {
            "type" : "integer",
            "description" : "The number of points in the data array. Must be a power of 2."
          },
          "isign" : {
            "type" : "integer",
            "description" : "Direction of the FFT (1 for forward, -1 for inverse)."
          }
        }
      },
      "fouriertransform_body" : {
        "required" : [ "dimensions", "filePaths", "isign" ],
        "type" : "object",
        "properties" : {
          "filePaths" : {
            "type" : "array",
            "description" : "Paths to the four files prepared for FFT operation.",
            "items" : {
              "type" : "string"
            }
          },
          "dimensions" : {
            "type" : "array",
            "description" : "Dimensions of the data for multi-dimensional FFT.",
            "items" : {
              "type" : "integer"
            }
          },
          "isign" : {
            "type" : "integer",
            "description" : "Indicates the direction of the FFT (1 for forward, -1 for inverse)."
          }
        }
      },
      "fredholmequation_body" : {
        "required" : [ "size" ],
        "type" : "object",
        "properties" : {
          "size" : {
            "type" : "integer",
            "description" : "Size of the matrix to solve the Fredholm equation."
          }
        }
      },
      "fredholmsolver_body" : {
        "required" : [ "a", "ak_function", "b", "g_function", "n" ],
        "type" : "object",
        "properties" : {
          "a" : {
            "type" : "number",
            "description" : "Lower limit of integration."
          },
          "b" : {
            "type" : "number",
            "description" : "Upper limit of integration."
          },
          "n" : {
            "type" : "integer",
            "description" : "Number of points for numerical integration."
          },
          "g_function" : {
            "type" : "string",
            "description" : "Expression for the non-homogeneous term function `g(x)`."
          },
          "ak_function" : {
            "type" : "string",
            "description" : "Expression for the kernel function `ak(x, t)`."
          }
        }
      },
      "frenelsolver_body" : {
        "required" : [ "x" ],
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "number",
            "description" : "Input value for the complex Frenel function."
          }
        }
      },
      "fresnel_body" : {
        "required" : [ "x" ],
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "number",
            "description" : "The real part of the input for which to compute the complex Fresnel integral."
          }
        }
      },
      "functionName_body" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "The input data array for the operation.",
            "items" : {
              "type" : "number"
            }
          },
          "isign" : {
            "type" : "integer",
            "description" : "Direction of the transform (1 for forward, -1 for inverse). Only required for cosft2.\n",
            "default" : 1
          }
        }
      },
      "gamma_pdf_body" : {
        "required" : [ "a", "x" ],
        "type" : "object",
        "properties" : {
          "a" : {
            "type" : "number",
            "format" : "double"
          },
          "x" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "gaussianmixturemodel_initialize_body" : {
        "required" : [ "data", "means" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "The dataset with rows as data points and columns as features.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "means" : {
            "type" : "array",
            "description" : "Initial means for each cluster.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "gaussianquadrature_gauher_body" : {
        "required" : [ "n" ],
        "type" : "object",
        "properties" : {
          "n" : {
            "type" : "integer",
            "description" : "Number of points."
          }
        }
      },
      "gaussianquadrature_gaujac_body" : {
        "required" : [ "alf", "bet", "n" ],
        "type" : "object",
        "properties" : {
          "alf" : {
            "type" : "number",
            "description" : "Alpha, a parameter of the Gauss-Jacobi quadrature."
          },
          "bet" : {
            "type" : "number",
            "description" : "Beta, a parameter of the Gauss-Jacobi quadrature."
          },
          "n" : {
            "type" : "integer",
            "description" : "Number of points."
          }
        }
      },
      "gaussianquadrature_gaulag_body" : {
        "required" : [ "alf", "n" ],
        "type" : "object",
        "properties" : {
          "alf" : {
            "type" : "number",
            "description" : "Alpha, a parameter of the Gauss-Laguerre quadrature."
          },
          "n" : {
            "type" : "integer",
            "description" : "Number of points."
          }
        }
      },
      "gaussianquadrature_gauleg_body" : {
        "required" : [ "n", "x1", "x2" ],
        "type" : "object",
        "properties" : {
          "x1" : {
            "type" : "number",
            "description" : "Lower limit of integration."
          },
          "x2" : {
            "type" : "number",
            "description" : "Upper limit of integration."
          },
          "n" : {
            "type" : "integer",
            "description" : "Number of points."
          }
        }
      },
      "generatePlot_body" : {
        "required" : [ "functionExpression", "x1", "x2" ],
        "type" : "object",
        "properties" : {
          "functionExpression" : {
            "type" : "string",
            "description" : "The mathematical expression of the function to plot."
          },
          "x1" : {
            "type" : "number",
            "description" : "The start of the x-range to plot.",
            "format" : "double"
          },
          "x2" : {
            "type" : "number",
            "description" : "The end of the x-range to plot.",
            "format" : "double"
          }
        }
      },
      "generatemarkovchain_body" : {
        "required" : [ "atrans", "n" ],
        "type" : "object",
        "properties" : {
          "atrans" : {
            "type" : "array",
            "description" : "The transition matrix for the Markov chain, where each row sums to 1.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "n" : {
            "type" : "integer",
            "description" : "The length of the Markov chain sequence to generate."
          },
          "istart" : {
            "type" : "integer",
            "description" : "The starting state of the Markov chain sequence. Defaults to 0.",
            "default" : 0
          },
          "seed" : {
            "type" : "integer",
            "description" : "The seed for the random number generator. Defaults to 1.",
            "default" : 1
          }
        }
      },
      "gray_decode_body" : {
        "required" : [ "grayCode" ],
        "type" : "object",
        "properties" : {
          "grayCode" : {
            "type" : "integer",
            "description" : "The Gray code to decode."
          }
        }
      },
      "gray_encode_body" : {
        "required" : [ "number" ],
        "type" : "object",
        "properties" : {
          "number" : {
            "type" : "integer",
            "description" : "The integer to encode to Gray code."
          }
        }
      },
      "hash_allelements_body" : {
        "required" : [ "arr" ],
        "type" : "object",
        "properties" : {
          "arr" : {
            "type" : "array",
            "description" : "List of unsigned integers to hash.",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }
      },
      "hash_erase_body" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "The key of the element to erase."
          },
          "element" : {
            "type" : "string",
            "description" : "The element to erase (for Mhash)."
          }
        }
      },
      "hash_pseudodes_body" : {
        "required" : [ "lword", "rword" ],
        "type" : "object",
        "properties" : {
          "lword" : {
            "type" : "integer",
            "description" : "Left word of the pair to hash.",
            "format" : "int32"
          },
          "rword" : {
            "type" : "integer",
            "description" : "Right word of the pair to hash.",
            "format" : "int32"
          }
        }
      },
      "hash_retrieve_body" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "The key of the element to retrieve."
          }
        }
      },
      "hash_store_body" : {
        "required" : [ "element", "key" ],
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "The key associated with the element."
          },
          "element" : {
            "type" : "string",
            "description" : "The element to store."
          }
        }
      },
      "huffcode_decode_body" : {
        "required" : [ "encodedSequence", "huffmanTree" ],
        "type" : "object",
        "properties" : {
          "encodedSequence" : {
            "type" : "array",
            "description" : "Huffman encoded sequence to decode.",
            "items" : {
              "type" : "string"
            }
          },
          "huffmanTree" : {
            "$ref" : "#/components/schemas/huffcodedecode_huffmanTree"
          }
        }
      },
      "huffcode_encode_body" : {
        "required" : [ "frequencies", "sequence" ],
        "type" : "object",
        "properties" : {
          "sequence" : {
            "type" : "array",
            "description" : "Sequence of integers to encode.",
            "items" : {
              "type" : "integer"
            }
          },
          "frequencies" : {
            "type" : "array",
            "description" : "Frequency of each integer in the sequence.",
            "items" : {
              "type" : "integer"
            }
          }
        }
      },
      "huffcodedecode_huffmanTree" : {
        "type" : "object",
        "properties" : {
          "left" : {
            "type" : "array",
            "description" : "Left child indices in the Huffman tree.",
            "items" : {
              "type" : "integer"
            }
          },
          "right" : {
            "type" : "array",
            "description" : "Right child indices in the Huffman tree.",
            "items" : {
              "type" : "integer"
            }
          }
        },
        "description" : "Representation of the Huffman tree used for decoding."
      },
      "hypergeometric_function_body" : {
        "required" : [ "a", "b", "c", "z" ],
        "type" : "object",
        "properties" : {
          "a" : {
            "$ref" : "#/components/schemas/hypergeometricfunction_a"
          },
          "b" : {
            "$ref" : "#/components/schemas/hypergeometricfunction_b"
          },
          "c" : {
            "$ref" : "#/components/schemas/hypergeometricfunction_c"
          },
          "z" : {
            "$ref" : "#/components/schemas/hypergeometricfunction_z"
          }
        }
      },
      "hypergeometricfunction_a" : {
        "type" : "object",
        "properties" : {
          "real" : {
            "type" : "number"
          },
          "imaginary" : {
            "type" : "number"
          }
        },
        "description" : "Complex parameter 'a' of the hypergeometric function."
      },
      "hypergeometricfunction_b" : {
        "type" : "object",
        "properties" : {
          "real" : {
            "type" : "number"
          },
          "imaginary" : {
            "type" : "number"
          }
        },
        "description" : "Complex parameter 'b' of the hypergeometric function."
      },
      "hypergeometricfunction_c" : {
        "type" : "object",
        "properties" : {
          "real" : {
            "type" : "number"
          },
          "imaginary" : {
            "type" : "number"
          }
        },
        "description" : "Complex parameter 'c' of the hypergeometric function."
      },
      "hypergeometricfunction_z" : {
        "type" : "object",
        "properties" : {
          "real" : {
            "type" : "number"
          },
          "imaginary" : {
            "type" : "number"
          }
        },
        "description" : "Complex parameter 'z' of the hypergeometric function."
      },
      "inline_response_200" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "inline_response_200_1" : {
        "type" : "object",
        "properties" : {
          "b" : {
            "type" : "array",
            "description" : "The result of the multiplication.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "inline_response_200_10" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "number",
            "description" : "The result of the evaluation."
          }
        }
      },
      "inline_response_200_11" : {
        "type" : "object",
        "properties" : {
          "solution" : {
            "type" : "array",
            "description" : "The solution vector of the equation.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "inline_response_200_12" : {
        "type" : "object",
        "properties" : {
          "isValid" : {
            "type" : "boolean",
            "description" : "Indicates if the string is valid based on its checksum."
          },
          "expectedChecksum" : {
            "type" : "string",
            "description" : "The expected checksum character for the input string."
          }
        }
      },
      "inline_response_200_13" : {
        "type" : "object",
        "properties" : {
          "weights" : {
            "type" : "array",
            "description" : "Calculated weights for the given parameters.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "inline_response_200_14" : {
        "type" : "object",
        "properties" : {
          "solution" : {
            "type" : "array",
            "description" : "The solution vector of the Fredholm equation.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "inline_response_200_15" : {
        "type" : "object",
        "properties" : {
          "solution" : {
            "type" : "array",
            "description" : "The solution values of the Fredholm equation at the numerical integration points.",
            "items" : {
              "type" : "number"
            }
          },
          "points" : {
            "type" : "array",
            "description" : "The numerical integration points used in the solution.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "inline_response_200_16" : {
        "type" : "object",
        "properties" : {
          "real" : {
            "type" : "number",
            "description" : "The real part of the complex Fresnel integral result."
          },
          "imag" : {
            "type" : "number",
            "description" : "The imaginary part of the complex Fresnel integral result."
          }
        }
      },
      "inline_response_200_17" : {
        "type" : "object",
        "properties" : {
          "S" : {
            "type" : "number",
            "description" : "The S component of the complex Frenel result."
          },
          "C" : {
            "type" : "number",
            "description" : "The C component of the complex Frenel result."
          }
        }
      },
      "inline_response_200_18" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "number",
            "description" : "The result of the mathematical function calculation."
          }
        }
      },
      "inline_response_200_19" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "example" : "Model initialized successfully."
          }
        }
      },
      "inline_response_200_2" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "number",
            "description" : "The result of the J0 Bessel function calculation."
          }
        }
      },
      "inline_response_200_20" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "array",
            "description" : "Computed abscissas.",
            "items" : {
              "type" : "number"
            }
          },
          "w" : {
            "type" : "array",
            "description" : "Computed weights.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "inline_response_200_21" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "array",
            "description" : "Computed points.",
            "items" : {
              "type" : "number"
            }
          },
          "w" : {
            "type" : "array",
            "description" : "Computed weights.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "inline_response_200_22" : {
        "type" : "object",
        "properties" : {
          "invertedMatrix" : {
            "type" : "array",
            "description" : "The inverted matrix.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "inline_response_200_23" : {
        "type" : "object",
        "properties" : {
          "solutions" : {
            "type" : "array",
            "description" : "The solutions for each right-hand side.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "inline_response_200_24" : {
        "type" : "object",
        "properties" : {
          "element" : {
            "type" : "string",
            "description" : "The retrieved element."
          }
        }
      },
      "inline_response_200_25" : {
        "type" : "object",
        "properties" : {
          "lword" : {
            "type" : "integer",
            "description" : "Hashed left word.",
            "format" : "int32"
          },
          "rword" : {
            "type" : "integer",
            "description" : "Hashed right word.",
            "format" : "int32"
          }
        }
      },
      "inline_response_200_26" : {
        "type" : "object",
        "properties" : {
          "arr" : {
            "type" : "array",
            "description" : "List of hashed unsigned integers.",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }
      },
      "inline_response_200_27" : {
        "type" : "object",
        "properties" : {
          "alpha" : {
            "type" : "array",
            "description" : "Forward probabilities",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "beta" : {
            "type" : "array",
            "description" : "Backward probabilities",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "probability" : {
            "type" : "number",
            "description" : "Probability of the observed sequence"
          }
        }
      },
      "inline_response_200_28" : {
        "type" : "object",
        "properties" : {
          "updatedTransitionMatrix" : {
            "type" : "array",
            "description" : "Updated transition probabilities",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "updatedEmissionMatrix" : {
            "type" : "array",
            "description" : "Updated emission probabilities",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "inline_response_200_29" : {
        "type" : "object",
        "properties" : {
          "encodedSequence" : {
            "type" : "array",
            "description" : "Huffman encoded sequence of the input.",
            "items" : {
              "type" : "string"
            }
          },
          "huffmanTree" : {
            "$ref" : "#/components/schemas/inline_response_200_29_huffmanTree"
          }
        }
      },
      "inline_response_200_29_huffmanTree" : {
        "type" : "object",
        "properties" : {
          "left" : {
            "type" : "array",
            "description" : "Left child indices in the Huffman tree.",
            "items" : {
              "type" : "integer"
            }
          },
          "right" : {
            "type" : "array",
            "description" : "Right child indices in the Huffman tree.",
            "items" : {
              "type" : "integer"
            }
          }
        },
        "description" : "Representation of the Huffman tree used for encoding."
      },
      "inline_response_200_3" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "number",
            "description" : "The result of the J1 Bessel function calculation."
          }
        }
      },
      "inline_response_200_30" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "$ref" : "#/components/schemas/inline_response_200_30_result"
          }
        }
      },
      "inline_response_200_30_result" : {
        "type" : "object",
        "properties" : {
          "real" : {
            "type" : "number"
          },
          "imaginary" : {
            "type" : "number"
          }
        },
        "description" : "The resulting value of the hypergeometric function as a complex number."
      },
      "inline_response_200_31" : {
        "type" : "object",
        "properties" : {
          "crc" : {
            "type" : "integer",
            "description" : "The resulting CRC value."
          }
        }
      },
      "inline_response_200_32" : {
        "type" : "object",
        "properties" : {
          "grayCode" : {
            "type" : "integer",
            "description" : "The resulting Gray code."
          }
        }
      },
      "inline_response_200_33" : {
        "type" : "object",
        "properties" : {
          "number" : {
            "type" : "integer",
            "description" : "The decoded integer value."
          }
        }
      },
      "inline_response_200_34" : {
        "type" : "object",
        "properties" : {
          "convertedNumber" : {
            "type" : "integer",
            "description" : "The result of the conversion."
          }
        }
      },
      "inline_response_200_35" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "number",
            "description" : "The result of the specified distribution operation."
          }
        }
      },
      "inline_response_200_36" : {
        "type" : "object",
        "properties" : {
          "crcValue" : {
            "type" : "integer",
            "description" : "The calculated CRC value."
          }
        }
      },
      "inline_response_200_37" : {
        "type" : "object",
        "properties" : {
          "pdf" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "inline_response_200_38" : {
        "type" : "object",
        "properties" : {
          "boxIndex" : {
            "type" : "integer",
            "description" : "The index of the nearest box in the KDtree."
          }
        }
      },
      "inline_response_200_39" : {
        "type" : "object",
        "properties" : {
          "nearestPoint" : {
            "type" : "array",
            "description" : "The coordinates of the nearest point in the KDtree.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "inline_response_200_4" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "number",
            "description" : "The result of the J_nu Bessel function calculation."
          }
        }
      },
      "inline_response_200_40" : {
        "type" : "object",
        "properties" : {
          "nearestPoints" : {
            "type" : "array",
            "description" : "The coordinates of the N nearest points in the KDtree.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "inline_response_200_41" : {
        "type" : "object",
        "properties" : {
          "pointsWithinRadius" : {
            "type" : "array",
            "description" : "The coordinates of points within the specified radius in the KDtree.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "inline_response_200_42" : {
        "type" : "object",
        "properties" : {
          "nearestPointIndex" : {
            "type" : "integer",
            "description" : "The index of the nearest point in the KDtree."
          }
        }
      },
      "inline_response_200_43" : {
        "type" : "object",
        "properties" : {
          "nChanges" : {
            "type" : "integer",
            "description" : "The number of data points that changed their cluster assignment."
          },
          "assignments" : {
            "type" : "array",
            "description" : "The updated cluster assignments for each data point.",
            "items" : {
              "type" : "integer"
            }
          }
        }
      },
      "inline_response_200_44" : {
        "type" : "object",
        "properties" : {
          "nChanges" : {
            "type" : "integer",
            "description" : "The number of data points that changed their cluster assignment after the iteration."
          }
        }
      },
      "inline_response_200_45" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "number",
            "description" : "The calculated value of the inverse of xlogx"
          }
        }
      },
      "inline_response_200_46" : {
        "type" : "object",
        "properties" : {
          "pks" : {
            "type" : "number",
            "description" : "The calculated CDF value"
          }
        }
      },
      "inline_response_200_47" : {
        "type" : "object",
        "properties" : {
          "qks" : {
            "type" : "number",
            "description" : "The calculated CCDF value"
          }
        }
      },
      "inline_response_200_48" : {
        "type" : "object",
        "properties" : {
          "invqks" : {
            "type" : "number",
            "description" : "The calculated inverse CCDF value"
          }
        }
      },
      "inline_response_200_49" : {
        "type" : "object",
        "properties" : {
          "d" : {
            "type" : "number",
            "description" : "The test statistic"
          },
          "prob" : {
            "type" : "number",
            "description" : "The p-value of the test"
          }
        }
      },
      "inline_response_200_5" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "number",
            "description" : "The result of the Y_nu Bessel function calculation."
          }
        }
      },
      "inline_response_200_50" : {
        "type" : "object",
        "properties" : {
          "d" : {
            "type" : "number",
            "description" : "The maximum deviation between the sample and the continuous cumulative distribution function"
          },
          "prob" : {
            "type" : "number",
            "description" : "The p-value of the test"
          }
        }
      },
      "inline_response_200_51" : {
        "type" : "object",
        "properties" : {
          "d" : {
            "type" : "number",
            "description" : "The maximum deviation between the two sample distributions"
          },
          "prob" : {
            "type" : "number",
            "description" : "The p-value of the test"
          }
        }
      },
      "inline_response_200_52" : {
        "type" : "object",
        "properties" : {
          "directSum" : {
            "type" : "number",
            "description" : "The sum computed by the direct method"
          },
          "levinSum" : {
            "type" : "number",
            "description" : "The sum computed by the Levin series method"
          }
        }
      },
      "inline_response_200_53" : {
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "array",
            "description" : "The solution vector",
            "items" : {
              "type" : "number"
            }
          },
          "iter" : {
            "type" : "integer",
            "description" : "Number of iterations performed"
          },
          "err" : {
            "type" : "number",
            "description" : "Estimated error of the solution"
          }
        }
      },
      "inline_response_200_54" : {
        "type" : "object",
        "properties" : {
          "xms" : {
            "type" : "number"
          },
          "coefficients" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "inline_response_200_55" : {
        "type" : "object",
        "properties" : {
          "out" : {
            "type" : "array",
            "description" : "The generated Markov chain sequence as a list of states.",
            "items" : {
              "type" : "integer"
            }
          }
        }
      },
      "inline_response_200_56" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "number",
            "description" : "The result of evaluating the polynomial at the given value."
          }
        }
      },
      "inline_response_200_57" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "number",
            "description" : "The result of evaluating the rational function at the given value."
          }
        }
      },
      "inline_response_200_58" : {
        "type" : "object",
        "properties" : {
          "inside" : {
            "type" : "boolean",
            "description" : "Whether the point is inside the polygon (true) or not (false)."
          }
        }
      },
      "inline_response_200_59" : {
        "type" : "object",
        "properties" : {
          "simple" : {
            "type" : "boolean",
            "description" : "Whether the polygon is simple (true) or not (false)."
          }
        }
      },
      "inline_response_200_6" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "number",
            "description" : "The result of the Airy Ai function calculation."
          }
        }
      },
      "inline_response_200_60" : {
        "type" : "object",
        "properties" : {
          "isPrimitive" : {
            "type" : "boolean",
            "description" : "Whether the polynomial is primitive."
          }
        }
      },
      "inline_response_200_61" : {
        "type" : "object",
        "properties" : {
          "QRId" : {
            "type" : "string",
            "description" : "An identifier for the QR decomposition."
          }
        }
      },
      "inline_response_200_62" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/QRootResponse"
        }, {
          "$ref" : "#/components/schemas/PolynomialRootResponse"
        } ]
      },
      "inline_response_200_63" : {
        "type" : "object",
        "properties" : {
          "root" : {
            "type" : "number",
            "description" : "The root of the function within the specified interval.",
            "format" : "double"
          }
        }
      },
      "inline_response_200_64" : {
        "type" : "object",
        "properties" : {
          "coefficients" : {
            "type" : "array",
            "description" : "The generated filter coefficients.",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          }
        }
      },
      "inline_response_200_65" : {
        "type" : "object",
        "properties" : {
          "kthSmallestElement" : {
            "type" : "number",
            "description" : "The k-th smallest element in the provided array."
          }
        }
      },
      "inline_response_200_66" : {
        "type" : "object",
        "properties" : {
          "tau" : {
            "type" : "number",
            "description" : "The Kendall tau correlation coefficient."
          },
          "z" : {
            "type" : "number",
            "description" : "The z-value for the correlation."
          },
          "prob" : {
            "type" : "number",
            "description" : "The p-value for the correlation test."
          }
        }
      },
      "inline_response_200_67" : {
        "type" : "object",
        "properties" : {
          "zValue" : {
            "type" : "number",
            "description" : "The calculated Z statistic value."
          },
          "pValue" : {
            "type" : "number",
            "description" : "The p-value associated with the Z statistic."
          }
        }
      },
      "inline_response_200_68" : {
        "required" : [ "status" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the StepperBase initialization."
          },
          "hdid" : {
            "type" : "number",
            "description" : "Step size achieved."
          },
          "hnext" : {
            "type" : "number",
            "description" : "Estimated next step size."
          },
          "x" : {
            "type" : "number",
            "description" : "Updated value of the independent variable."
          },
          "yout" : {
            "type" : "array",
            "description" : "Updated values of the dependent variables.",
            "items" : {
              "type" : "number"
            }
          },
          "yerr" : {
            "type" : "array",
            "description" : "Estimated local errors.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "inline_response_200_69" : {
        "required" : [ "hdid", "hnext", "status", "x", "yout" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the numerical integration step."
          },
          "hdid" : {
            "type" : "number",
            "description" : "Actual step size taken."
          },
          "hnext" : {
            "type" : "number",
            "description" : "Next step size suggested."
          },
          "x" : {
            "type" : "number",
            "description" : "Updated value of the independent variable."
          },
          "yout" : {
            "type" : "array",
            "description" : "Updated values of the dependent variables after the step.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "inline_response_200_7" : {
        "type" : "object",
        "properties" : {
          "julianDay" : {
            "type" : "integer",
            "description" : "Julian day number corresponding to the input date"
          }
        }
      },
      "inline_response_200_70" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/GetWeightsResponse"
        }, {
          "$ref" : "#/components/schemas/ErrorResponse"
        } ]
      },
      "inline_response_200_71" : {
        "type" : "object",
        "properties" : {
          "determinant" : {
            "type" : "number",
            "description" : "The determinant of the matrix."
          }
        }
      },
      "inline_response_200_8" : {
        "type" : "object",
        "properties" : {
          "mm" : {
            "type" : "integer",
            "description" : "Month of the year (1-12)"
          },
          "id" : {
            "type" : "integer",
            "description" : "Day of the month"
          },
          "iyyy" : {
            "type" : "integer",
            "description" : "Year"
          }
        }
      },
      "inline_response_200_9" : {
        "type" : "object",
        "properties" : {
          "jd" : {
            "type" : "integer",
            "description" : "Julian day of the moon phase"
          },
          "frac" : {
            "type" : "number",
            "description" : "Fraction of the day of the moon phase"
          }
        }
      },
      "kdtree_locate_body" : {
        "type" : "object",
        "properties" : {
          "point" : {
            "type" : "array",
            "description" : "The coordinates of the point for which to find the nearest box.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "kdtree_nearest_body" : {
        "required" : [ "point" ],
        "type" : "object",
        "properties" : {
          "point" : {
            "type" : "array",
            "description" : "The coordinates of the point for which to find the nearest point in the KDtree.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "kdtree_nearestpoint_body" : {
        "type" : "object",
        "properties" : {
          "point" : {
            "type" : "array",
            "description" : "The coordinates of the point for which to find the nearest point.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "kdtree_nnearestpoints_body" : {
        "type" : "object",
        "properties" : {
          "point" : {
            "type" : "array",
            "description" : "The coordinates of the point.",
            "items" : {
              "type" : "number"
            }
          },
          "n" : {
            "type" : "integer",
            "description" : "The number of nearest points to find."
          }
        }
      },
      "kdtree_pointswithinradius_body" : {
        "type" : "object",
        "properties" : {
          "point" : {
            "type" : "array",
            "description" : "The center point.",
            "items" : {
              "type" : "number"
            }
          },
          "radius" : {
            "type" : "number",
            "description" : "The radius to search within."
          }
        }
      },
      "kendl1_body" : {
        "required" : [ "data1", "data2" ],
        "type" : "object",
        "properties" : {
          "data1" : {
            "type" : "array",
            "description" : "The first set of data points.",
            "items" : {
              "type" : "number"
            }
          },
          "data2" : {
            "type" : "array",
            "description" : "The second set of data points.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "kmeans_initialize_body" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "The dataset for clustering, with each array representing a data point.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "means" : {
            "type" : "array",
            "description" : "The initial means (centroids) for the clusters.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "ks2d2s_body" : {
        "type" : "object",
        "properties" : {
          "x1" : {
            "type" : "array",
            "description" : "First sample's x-coordinates",
            "items" : {
              "type" : "number"
            }
          },
          "y1" : {
            "type" : "array",
            "description" : "First sample's y-coordinates",
            "items" : {
              "type" : "number"
            }
          },
          "x2" : {
            "type" : "array",
            "description" : "Second sample's x-coordinates",
            "items" : {
              "type" : "number"
            }
          },
          "y2" : {
            "type" : "array",
            "description" : "Second sample's y-coordinates",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "ksone_body" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "Sample data array",
            "items" : {
              "type" : "number"
            }
          },
          "func" : {
            "type" : "string",
            "description" : "The name of the continuous cumulative distribution function against which to test the sample data",
            "enum" : [ "func1", "func2", "func3" ]
          }
        }
      },
      "kstwo_body" : {
        "type" : "object",
        "properties" : {
          "data1" : {
            "type" : "array",
            "description" : "First sample data array",
            "items" : {
              "type" : "number"
            }
          },
          "data2" : {
            "type" : "array",
            "description" : "Second sample data array",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "levinseries_body" : {
        "type" : "object",
        "properties" : {
          "nterm" : {
            "type" : "integer",
            "description" : "Number of terms in the series"
          },
          "beta" : {
            "type" : "number",
            "description" : "Beta parameter for the Levin series computation"
          },
          "a" : {
            "type" : "number",
            "description" : "Start value for the integral computation"
          },
          "b" : {
            "type" : "number",
            "description" : "End value for the integral computation"
          }
        }
      },
      "matadd" : {
        "type" : "object",
        "properties" : {
          "a" : {
            "type" : "array",
            "description" : "The first matrix.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "b" : {
            "type" : "array",
            "description" : "The second matrix.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "c" : {
            "type" : "array",
            "description" : "The result matrix.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        },
        "description" : "Add two matrices element-wise."
      },
      "mathfunctions_body" : {
        "required" : [ "arguments", "function" ],
        "type" : "object",
        "properties" : {
          "function" : {
            "type" : "string",
            "description" : "The mathematical function to calculate.",
            "enum" : [ "gammln", "factrl", "factln", "bico", "beta" ]
          },
          "arguments" : {
            "type" : "array",
            "description" : "Arguments for the mathematical function. Depending on the function, this could be one or more numbers.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "matrix_banmul_body" : {
        "type" : "object",
        "properties" : {
          "a" : {
            "type" : "array",
            "description" : "The banded matrix in compact form.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "m1" : {
            "type" : "integer",
            "description" : "Number of diagonals below the main diagonal."
          },
          "m2" : {
            "type" : "integer",
            "description" : "Number of diagonals above the main diagonal."
          },
          "x" : {
            "type" : "array",
            "description" : "The vector to be multiplied.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "matrix_crc_body" : {
        "required" : [ "data", "polynomial" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "string",
            "description" : "The string to calculate the CRC for."
          },
          "polynomial" : {
            "type" : "integer",
            "description" : "The polynomial to use for the CRC calculation, specified by its index."
          }
        }
      },
      "matrix_inversion_body" : {
        "required" : [ "matrix" ],
        "type" : "object",
        "properties" : {
          "matrix" : {
            "type" : "array",
            "description" : "A square matrix to be inverted.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "matrix_solve_body" : {
        "required" : [ "matrixData", "rhs" ],
        "type" : "object",
        "properties" : {
          "matrixData" : {
            "$ref" : "#/components/schemas/matrixsolve_matrixData"
          },
          "rhs" : {
            "type" : "array",
            "description" : "The right-hand side vector b.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "matrix_solvelinearequations_body" : {
        "required" : [ "matrix", "rhs" ],
        "type" : "object",
        "properties" : {
          "matrix" : {
            "type" : "array",
            "description" : "A square matrix of coefficients.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "rhs" : {
            "type" : "array",
            "description" : "Multiple right-hand side vectors stored in a matrix.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "matrixsolve_matrixData" : {
        "required" : [ "columnPointers", "rowIndices", "values" ],
        "type" : "object",
        "properties" : {
          "values" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "rowIndices" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "columnPointers" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          }
        },
        "description" : "The sparse matrix A data including values, row indices, and column pointers."
      },
      "matsub" : {
        "type" : "object",
        "properties" : {
          "a" : {
            "type" : "array",
            "description" : "The first matrix.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "b" : {
            "type" : "array",
            "description" : "The second matrix.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "c" : {
            "type" : "array",
            "description" : "The result matrix.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        },
        "description" : "Subtract one matrix from another element-wise."
      },
      "mcmcstep" : {
        "type" : "number",
        "description" : "The acceptance ratio for the MCMC step."
      },
      "polygon_checkPointInside_body" : {
        "required" : [ "point", "polygon" ],
        "type" : "object",
        "properties" : {
          "polygon" : {
            "type" : "array",
            "description" : "The list of points defining the polygon vertices.",
            "items" : {
              "$ref" : "#/components/schemas/Point"
            }
          },
          "point" : {
            "$ref" : "#/components/schemas/Point"
          }
        }
      },
      "polygon_checkSimple_body" : {
        "required" : [ "polygon" ],
        "type" : "object",
        "properties" : {
          "polygon" : {
            "type" : "array",
            "description" : "The list of points defining the polygon vertices.",
            "items" : {
              "$ref" : "#/components/schemas/Point"
            }
          }
        }
      },
      "polynomial_evaluate_body" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PolynomialCreationRequest"
        }, {
          "required" : [ "x" ],
          "type" : "object",
          "properties" : {
            "x" : {
              "type" : "number",
              "description" : "The value at which to evaluate the polynomial."
            }
          }
        } ]
      },
      "polynomial_interpolate_body" : {
        "required" : [ "x", "xv", "yv" ],
        "type" : "object",
        "properties" : {
          "xv" : {
            "type" : "array",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          },
          "yv" : {
            "type" : "array",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          },
          "x" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "predictfuturepoints_body" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "coefficients" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "primpoly_init_body" : {
        "type" : "object",
        "properties" : {
          "N" : {
            "type" : "integer",
            "description" : "Degree of the polynomial.",
            "example" : 32
          },
          "factors" : {
            "type" : "array",
            "description" : "A list of prime factors to consider in the test.",
            "example" : [ 3, 5, 17, 257, 65537 ],
            "items" : {
              "type" : "integer"
            }
          }
        }
      },
      "primpoly_test_body" : {
        "type" : "object",
        "properties" : {
          "n" : {
            "type" : "integer",
            "description" : "The polynomial represented by its degree.",
            "example" : 65537
          }
        }
      },
      "quadraturecoefficients_gaucof_body" : {
        "required" : [ "a", "amu0", "b" ],
        "type" : "object",
        "properties" : {
          "a" : {
            "type" : "array",
            "description" : "Coefficients a of the recurrence relation.",
            "items" : {
              "type" : "number"
            }
          },
          "b" : {
            "type" : "array",
            "description" : "Coefficients b of the recurrence relation.",
            "items" : {
              "type" : "number"
            }
          },
          "amu0" : {
            "type" : "number",
            "description" : "The zeroth moment of the weight function."
          }
        }
      },
      "quadraturepoints_lobatto_body" : {
        "required" : [ "a", "amu0", "b", "x1", "xn" ],
        "type" : "object",
        "properties" : {
          "a" : {
            "type" : "array",
            "description" : "Coefficients a of the recurrence relation.",
            "items" : {
              "type" : "number"
            }
          },
          "b" : {
            "type" : "array",
            "description" : "Coefficients b of the recurrence relation.",
            "items" : {
              "type" : "number"
            }
          },
          "amu0" : {
            "type" : "number",
            "description" : "The zeroth moment of the weight function."
          },
          "x1" : {
            "type" : "number",
            "description" : "The fixed abscissa at the left end of the interval."
          },
          "xn" : {
            "type" : "number",
            "description" : "The fixed abscissa at the right end of the interval."
          }
        }
      },
      "quadraturepoints_radau_body" : {
        "required" : [ "a", "amu0", "b", "x1" ],
        "type" : "object",
        "properties" : {
          "a" : {
            "type" : "array",
            "description" : "Coefficients a of the recurrence relation.",
            "items" : {
              "type" : "number"
            }
          },
          "b" : {
            "type" : "array",
            "description" : "Coefficients b of the recurrence relation.",
            "items" : {
              "type" : "number"
            }
          },
          "amu0" : {
            "type" : "number",
            "description" : "The zeroth moment of the weight function."
          },
          "x1" : {
            "type" : "number",
            "description" : "The fixed abscissa at the left end of the interval."
          }
        }
      },
      "rationalFunction_evaluate_body" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/RationalFunctionCreationRequest"
        }, {
          "required" : [ "x" ],
          "type" : "object",
          "properties" : {
            "x" : {
              "type" : "number",
              "description" : "The value at which to evaluate the rational function."
            }
          }
        } ]
      },
      "realft_body" : {
        "required" : [ "data", "isign" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "The input real-valued data array for the FFT operation.",
            "items" : {
              "type" : "number"
            }
          },
          "isign" : {
            "type" : "integer",
            "description" : "Direction of the FFT (1 for forward, -1 for inverse)."
          }
        }
      },
      "relax2" : {
        "type" : "object",
        "properties" : {
          "u" : {
            "type" : "array",
            "description" : "The solution matrix.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "rhs" : {
            "type" : "array",
            "description" : "The right-hand side matrix.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        },
        "description" : "Relax the solution using Gauss-Seidel iteration."
      },
      "savgolCoefficients_body" : {
        "required" : [ "ld", "m", "nl", "np", "nr" ],
        "type" : "object",
        "properties" : {
          "np" : {
            "type" : "integer",
            "description" : "The number of points in the output filter coefficients.",
            "example" : 7
          },
          "nl" : {
            "type" : "integer",
            "description" : "The number of leftward (past) data points to use.",
            "example" : 3
          },
          "nr" : {
            "type" : "integer",
            "description" : "The number of rightward (future) data points to use.",
            "example" : 3
          },
          "ld" : {
            "type" : "integer",
            "description" : "The order of the derivative to compute (0 for smoothing).",
            "example" : 0
          },
          "m" : {
            "type" : "integer",
            "description" : "The order of the polynomial fit.",
            "example" : 2
          }
        }
      },
      "selectkth_body" : {
        "required" : [ "arr", "k" ],
        "type" : "object",
        "properties" : {
          "arr" : {
            "type" : "array",
            "description" : "The array of numbers from which to find the k-th smallest element.",
            "items" : {
              "type" : "number"
            }
          },
          "k" : {
            "type" : "integer",
            "description" : "The index k of the desired smallest element (0-based index).",
            "format" : "int32"
          }
        }
      },
      "sinft_body" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "The input data array for the operation.",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "slvsm2_body" : {
        "type" : "object",
        "properties" : {
          "u" : {
            "type" : "array",
            "description" : "The solution matrix.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          },
          "rhs" : {
            "type" : "array",
            "description" : "The right-hand side matrix.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number"
              }
            }
          }
        }
      },
      "solvelinearbiconjugategradient_body" : {
        "type" : "object",
        "properties" : {
          "b" : {
            "type" : "array",
            "description" : "The right-hand side vector of the linear system",
            "items" : {
              "type" : "number"
            }
          },
          "x" : {
            "type" : "array",
            "description" : "Initial guess for the solution",
            "items" : {
              "type" : "number"
            }
          },
          "itol" : {
            "type" : "integer",
            "description" : "Type of tolerance specified (1-4)"
          },
          "tol" : {
            "type" : "number",
            "description" : "Tolerance level for the solution accuracy"
          },
          "itmax" : {
            "type" : "integer",
            "description" : "Maximum number of iterations"
          }
        }
      },
      "solvelinearsystem_body" : {
        "type" : "object",
        "properties" : {
          "luResult" : {
            "$ref" : "#/components/schemas/LUdcmpResult"
          },
          "b" : {
            "$ref" : "#/components/schemas/Vector"
          }
        }
      },
      "stepperBS_body" : {
        "required" : [ "atoll", "dens", "dydxx", "htry", "rtoll", "xx", "yy" ],
        "type" : "object",
        "properties" : {
          "yy" : {
            "type" : "array",
            "description" : "Initial values of the dependent variables.",
            "items" : {
              "type" : "number"
            }
          },
          "dydxx" : {
            "type" : "array",
            "description" : "Derivative values of the dependent variables at the initial point.",
            "items" : {
              "type" : "number"
            }
          },
          "xx" : {
            "type" : "number",
            "description" : "Initial value of the independent variable."
          },
          "atoll" : {
            "type" : "number",
            "description" : "Absolute tolerance for the numerical integration."
          },
          "rtoll" : {
            "type" : "number",
            "description" : "Relative tolerance for the numerical integration."
          },
          "dens" : {
            "type" : "boolean",
            "description" : "Flag indicating whether dense output is required."
          },
          "htry" : {
            "type" : "number",
            "description" : "The step size to be attempted."
          }
        }
      },
      "stepperBase_body" : {
        "required" : [ "atoll", "dens", "dydxx", "rtoll", "xx", "yy" ],
        "type" : "object",
        "properties" : {
          "yy" : {
            "type" : "array",
            "description" : "Initial values of the dependent variables.",
            "items" : {
              "type" : "number"
            }
          },
          "dydxx" : {
            "type" : "array",
            "description" : "Derivative values of the dependent variables at the initial point.",
            "items" : {
              "type" : "number"
            }
          },
          "xx" : {
            "type" : "number",
            "description" : "Initial value of the independent variable."
          },
          "atoll" : {
            "type" : "number",
            "description" : "Absolute tolerance for the numerical integration."
          },
          "rtoll" : {
            "type" : "number",
            "description" : "Relative tolerance for the numerical integration."
          },
          "dens" : {
            "type" : "boolean",
            "description" : "Flag indicating whether dense output is required."
          }
        }
      },
      "stepperDopr5_body" : {
        "required" : [ "atoll", "dens", "dydxx", "htry", "rtoll", "xx", "yy" ],
        "type" : "object",
        "properties" : {
          "yy" : {
            "type" : "array",
            "description" : "Initial values of the dependent variables.",
            "items" : {
              "type" : "number"
            }
          },
          "dydxx" : {
            "type" : "array",
            "description" : "Derivative values of the dependent variables at the initial point.",
            "items" : {
              "type" : "number"
            }
          },
          "xx" : {
            "type" : "number",
            "description" : "Initial value of the independent variable."
          },
          "atoll" : {
            "type" : "number",
            "description" : "Absolute tolerance for the numerical integration."
          },
          "rtoll" : {
            "type" : "number",
            "description" : "Relative tolerance for the numerical integration."
          },
          "dens" : {
            "type" : "boolean",
            "description" : "Flag indicating whether dense output is required."
          },
          "htry" : {
            "type" : "number",
            "description" : "The step size to be attempted."
          }
        }
      },
      "stepperDopr853_body" : {
        "required" : [ "atoll", "dens", "dydxx", "htry", "rtoll", "xx", "yy" ],
        "type" : "object",
        "properties" : {
          "yy" : {
            "type" : "array",
            "description" : "Initial values of the dependent variables.",
            "items" : {
              "type" : "number"
            }
          },
          "dydxx" : {
            "type" : "array",
            "description" : "Derivative values of the dependent variables at the initial point.",
            "items" : {
              "type" : "number"
            }
          },
          "xx" : {
            "type" : "number",
            "description" : "Initial value of the independent variable."
          },
          "atoll" : {
            "type" : "number",
            "description" : "Absolute tolerance for the numerical integration."
          },
          "rtoll" : {
            "type" : "number",
            "description" : "Relative tolerance for the numerical integration."
          },
          "dens" : {
            "type" : "boolean",
            "description" : "Flag indicating whether dense output is required."
          },
          "htry" : {
            "type" : "number",
            "description" : "The step size to be attempted."
          }
        }
      },
      "stepperRoss_body" : {
        "required" : [ "atoll", "dens", "dydxx", "htry", "rtoll", "xx", "yy" ],
        "type" : "object",
        "properties" : {
          "yy" : {
            "type" : "array",
            "description" : "Initial values of the dependent variables.",
            "items" : {
              "type" : "number"
            }
          },
          "dydxx" : {
            "type" : "array",
            "description" : "Derivative values of the dependent variables at the initial point.",
            "items" : {
              "type" : "number"
            }
          },
          "xx" : {
            "type" : "number",
            "description" : "Initial value of the independent variable."
          },
          "atoll" : {
            "type" : "number",
            "description" : "Absolute tolerance for the numerical integration."
          },
          "rtoll" : {
            "type" : "number",
            "description" : "Relative tolerance for the numerical integration."
          },
          "dens" : {
            "type" : "boolean",
            "description" : "Flag indicating whether dense output is required."
          },
          "htry" : {
            "type" : "number",
            "description" : "The step size to be attempted."
          }
        }
      },
      "stepperSie_body" : {
        "required" : [ "atoll", "dens", "dydxx", "htry", "rtoll", "xx", "yy" ],
        "type" : "object",
        "properties" : {
          "yy" : {
            "type" : "array",
            "description" : "Initial values of the dependent variables.",
            "items" : {
              "type" : "number"
            }
          },
          "dydxx" : {
            "type" : "array",
            "description" : "Derivative values of the dependent variables at the initial point.",
            "items" : {
              "type" : "number"
            }
          },
          "xx" : {
            "type" : "number",
            "description" : "Initial value of the independent variable."
          },
          "atoll" : {
            "type" : "number",
            "description" : "Absolute tolerance for the numerical integration."
          },
          "rtoll" : {
            "type" : "number",
            "description" : "Relative tolerance for the numerical integration."
          },
          "dens" : {
            "type" : "boolean",
            "description" : "Flag indicating whether dense output is required."
          },
          "htry" : {
            "type" : "number",
            "description" : "The step size to be attempted."
          }
        }
      },
      "stepperStoerm_body" : {
        "required" : [ "atol", "dens", "dydxx", "htry", "rtol", "xx", "yy" ],
        "type" : "object",
        "properties" : {
          "yy" : {
            "type" : "array",
            "description" : "Initial values of the dependent variables.",
            "items" : {
              "type" : "number"
            }
          },
          "dydxx" : {
            "type" : "array",
            "description" : "Derivative values of the dependent variables at the initial point.",
            "items" : {
              "type" : "number"
            }
          },
          "xx" : {
            "type" : "number",
            "description" : "Initial value of the independent variable."
          },
          "atol" : {
            "type" : "number",
            "description" : "Absolute tolerance for the numerical integration."
          },
          "rtol" : {
            "type" : "number",
            "description" : "Relative tolerance for the numerical integration."
          },
          "dens" : {
            "type" : "boolean",
            "description" : "Flag indicating whether dense output is required."
          },
          "htry" : {
            "type" : "number",
            "description" : "The step size to be attempted."
          }
        }
      },
      "stiel_body" : {
        "required" : [ "aaa", "bbb", "nn", "operation" ],
        "type" : "object",
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Specifies the operation to perform, such as \"get_weights\"."
          },
          "nn" : {
            "type" : "integer",
            "description" : "The order of the polynomial."
          },
          "aaa" : {
            "type" : "number",
            "description" : "Lower limit of integration."
          },
          "bbb" : {
            "type" : "number",
            "description" : "Upper limit of integration."
          },
          "hmaxx" : {
            "type" : "number",
            "description" : "Maximum step size for integration."
          },
          "wwt1" : {
            "type" : "string",
            "description" : "Type of weight function 1 to use, specified by a keyword."
          },
          "wwt2" : {
            "type" : "string",
            "description" : "Type of weight function 2 to use, specified by a keyword."
          },
          "ffx" : {
            "type" : "string",
            "description" : "Function f(x) for transformation, specified by a keyword."
          },
          "ffdxdt" : {
            "type" : "string",
            "description" : "Derivative of f(x) with respect to t, specified by a keyword."
          }
        }
      },
      "weights_body" : {
        "required" : [ "h", "n" ],
        "type" : "object",
        "properties" : {
          "h" : {
            "type" : "number",
            "description" : "Step size for integration."
          },
          "n" : {
            "type" : "integer",
            "description" : "Number of steps."
          }
        }
      },
      "ztest_body" : {
        "required" : [ "populationMean", "populationStdDev", "sampleMean", "sampleSize" ],
        "type" : "object",
        "properties" : {
          "sampleMean" : {
            "type" : "number",
            "description" : "The mean of the sample data."
          },
          "populationMean" : {
            "type" : "number",
            "description" : "The mean of the population data."
          },
          "populationStdDev" : {
            "type" : "number",
            "description" : "The standard deviation of the population."
          },
          "sampleSize" : {
            "type" : "integer",
            "description" : "The size of the sample."
          }
        }
      },
      "Rectangle2D" : {
        "required" : [ "origin", "size" ],
        "type" : "object",
        "properties" : {
          "origin" : {
            "$ref" : "#/components/schemas/Point"
          },
          "size" : {
            "$ref" : "#/components/schemas/Vector"
          }
        }
      },
      "OrientedRectangle" : {
        "required" : [ "halfExtents", "position", "rotation" ],
        "type" : "object",
        "properties" : {
          "position" : {
            "$ref" : "#/components/schemas/Point"
          },
          "halfExtents" : {
            "$ref" : "#/components/schemas/Vector"
          },
          "rotation" : {
            "type" : "number",
            "description" : "The rotation angle of the rectangle in degrees or radians (depending on your application's convention).",
            "format" : "float"
          }
        }
      },
      "PolyLine" : {
        "type" : "object",
        "properties" : {
          "points" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Point"
            }
          }
        }
      },
      "GameEntity" : {
        "description" : "Represents advanced objects within the game that combine basic entity properties, spatial orientation, and unit behavior. This includes health as an additional attribute, making it suitable for representing complex characters or objects in the game world that interact with the environment, have health, and can move and orient themselves in specific directions.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Entity"
        }, {
          "$ref" : "#/components/schemas/OrientedRectangle"
        }, {
          "$ref" : "#/components/schemas/Unit"
        }, {
          "required" : [ "health" ],
          "type" : "object",
          "properties" : {
            "health" : {
              "type" : "integer",
              "description" : "The health points of the game entity, crucial for gameplay mechanics involving combat or environmental challenges."
            }
          }
        } ]
      },
      "Command" : {
        "required" : [ "action", "entityId" ],
        "type" : "object",
        "properties" : {
          "entityId" : {
            "type" : "string"
          },
          "action" : {
            "type" : "string"
          }
        },
        "description" : "Represents an action that can be executed in the game, such as moving an entity or firing a weapon."
      },
      "Unit" : {
        "required" : [ "id", "position" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "A unique identifier for the unit."
          },
          "position" : {
            "$ref" : "#/components/schemas/Point"
          },
          "patrollingLeft" : {
            "type" : "boolean",
            "description" : "Indicates if the unit is currently patrolling to the left."
          }
        },
        "description" : "Represents a dynamic entity within the game world, capable of moving, performing actions, and interacting with the environment and other entities. Each unit has a unique position in the game grid, defined by X and Y coordinates, and can patrol within the game environment, changing direction based on defined behaviors or player interactions. The unit schema encapsulates the essential attributes required for these functionalities, including its current position on the grid and its patrolling state.\n\nThe `move` method allows for updating the unit's position, facilitating movement across the game world. The `update` method enables the unit to autonomously change its position or state based on elapsed time, simulating behaviors such as patrolling. Rendering the unit within the game's graphical interface is handled by the `render` method, which draws the unit at its current position with specified visual characteristics.\n"
      },
      "MoveUnitCommand" : {
        "required" : [ "newPosition", "unitId" ],
        "type" : "object",
        "properties" : {
          "unitId" : {
            "type" : "string"
          },
          "newPosition" : {
            "$ref" : "#/components/schemas/Point"
          }
        }
      },
      "Entity" : {
        "required" : [ "id", "position", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "position" : {
            "$ref" : "#/components/schemas/Point"
          }
        },
        "description" : "Entities could be anything in a game world, including characters, items, or obstacles."
      },
      "FireCommand" : {
        "required" : [ "actorId" ],
        "type" : "object",
        "properties" : {
          "actorId" : {
            "type" : "string",
            "description" : "The ID of the actor to execute the fire command on."
          }
        }
      },
      "AIComponent" : {
        "type" : "object"
      },
      "PhysicsComponent" : {
        "type" : "object"
      },
      "RenderComponent" : {
        "type" : "object"
      },
      "Grid" : {
        "required" : [ "cells", "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "A unique identifier for the grid."
          },
          "cells" : {
            "type" : "array",
            "description" : "A two-dimensional array representing the elements of the matrix, with each cell capable of holding a GameEntity or being empty.",
            "items" : {
              "type" : "array",
              "items" : {
                "description" : "A GameEntity object representing an entity in the cell, or null if the cell is empty.",
                "nullable" : true,
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/GameEntity"
                } ]
              }
            }
          }
        }
      },
      "InputCommand" : {
        "required" : [ "direction", "unitId" ],
        "type" : "object",
        "properties" : {
          "unitId" : {
            "type" : "string",
            "description" : "The ID of the unit to move."
          },
          "direction" : {
            "type" : "string",
            "description" : "The direction in which to move the unit.",
            "enum" : [ "UP", "DOWN" ]
          }
        }
      },
      "CommandBinding" : {
        "required" : [ "button", "commandType" ],
        "type" : "object",
        "properties" : {
          "button" : {
            "type" : "string",
            "enum" : [ "BUTTON_X", "BUTTON_Y", "BUTTON_A", "BUTTON_B" ]
          },
          "commandType" : {
            "type" : "string",
            "description" : "Identifier or type of the command to bind."
          }
        }
      },
      "JumpCommandRequest" : {
        "required" : [ "actorId" ],
        "type" : "object",
        "properties" : {
          "actorId" : {
            "type" : "string",
            "description" : "The ID of the actor to perform or revert a jump."
          }
        }
      },
      "EntityProperties" : {
        "required" : [ "position" ],
        "type" : "object",
        "properties" : {
          "position" : {
            "$ref" : "#/components/schemas/Point"
          }
        }
      },
      "GameActor" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/OrientedRectangle"
        }, {
          "required" : [ "animationId", "inputHandlerId" ],
          "type" : "object",
          "properties" : {
            "inputHandlerId" : {
              "type" : "string",
              "description" : "Reference to the actor's input handler."
            },
            "animationId" : {
              "type" : "string",
              "description" : "Reference to the actor's animation component."
            }
          }
        } ]
      },
      "Skeleton" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/GameEntity"
        }, {
          "required" : [ "patrollingLeft" ],
          "type" : "object",
          "properties" : {
            "patrollingLeft" : {
              "type" : "boolean",
              "description" : "Indicates if the skeleton is currently patrolling left."
            }
          }
        } ]
      },
      "Statue" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/GameEntity"
        }, {
          "required" : [ "delay" ],
          "type" : "object",
          "properties" : {
            "delay" : {
              "type" : "integer",
              "description" : "Frames delay before performing the lightning action."
            }
          }
        } ]
      },
      "gridgridId_updates" : {
        "required" : [ "position", "value" ],
        "type" : "object",
        "properties" : {
          "position" : {
            "$ref" : "#/components/schemas/Point"
          },
          "contents" : {
            "description" : "The GameEntity to place in the cell, or null to empty the cell.",
            "oneOf" : [ {
              "$ref" : "#/components/schemas/GameEntity"
            }, {
              "type" : "object",
              "description" : "This can be null to signify that the cell is to be emptied.",
              "nullable" : true
            } ]
          }
        }
      },
      "grid_gridId_body" : {
        "type" : "object",
        "properties" : {
          "updates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/gridgridId_updates"
            }
          }
        },
        "description" : "A list of cell updates, each specifying a Point for coordinates and a new GameEntity or null for the cell."
      },
      "unitId_position_body" : {
        "type" : "object",
        "properties" : {
          "position" : {
            "$ref" : "#/components/schemas/Point"
          }
        }
      },
      "inline_response_200_72" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "example" : "Jump undone, actor returned to initial position."
          }
        }
      },
      "inline_response_200_73" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "example" : "Actor jumped successfully."
          }
        }
      },
      "inline_response_200_74" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "example" : "Command bound to button successfully."
          }
        }
      },
      "inline_response_200_75" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "example" : "Command executed successfully."
          }
        }
      },
      "grid_body" : {
        "required" : [ "ncols", "nrows" ],
        "type" : "object",
        "properties" : {
          "nrows" : {
            "type" : "integer",
            "description" : "The number of rows in the grid."
          },
          "ncols" : {
            "type" : "integer",
            "description" : "The number of columns in the grid."
          },
          "cells" : {
            "type" : "array",
            "description" : "Optional. A two-dimensional array representing the initial placements of GameEntities in the grid. If not provided, the grid will be initialized with all cells empty.",
            "items" : {
              "type" : "array",
              "items" : {
                "description" : "A GameEntity object representing an entity in the cell, or null if the cell is empty. Each GameEntity should include all necessary properties as defined in the GameEntity schema.",
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/GameEntity"
                }, {
                  "type" : "object",
                  "nullable" : true
                } ]
              }
            }
          }
        }
      },
      "inline_response_200_76" : {
        "type" : "object",
        "properties" : {
          "aiComponent" : {
            "$ref" : "#/components/schemas/AIComponent"
          },
          "physicsComponent" : {
            "$ref" : "#/components/schemas/PhysicsComponent"
          },
          "renderComponent" : {
            "$ref" : "#/components/schemas/RenderComponent"
          }
        }
      },
      "inline_response_200_77" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "example" : "Fire command undone for actor."
          }
        }
      },
      "inline_response_200_78" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "example" : "Fire command executed on actor."
          }
        }
      },
      "inline_response_200_79" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "example" : "Executing ConcreteCommand"
          }
        }
      },
      "entity_move_body" : {
        "type" : "object",
        "properties" : {
          "entityId" : {
            "type" : "string"
          },
          "newPosition" : {
            "$ref" : "#/components/schemas/Point"
          }
        }
      },
      "orientedRectangleOrientedRectangleIntersection_body" : {
        "required" : [ "rect1", "rect2" ],
        "type" : "object",
        "properties" : {
          "rect1" : {
            "$ref" : "#/components/schemas/OrientedRectangle"
          },
          "rect2" : {
            "$ref" : "#/components/schemas/OrientedRectangle"
          }
        }
      },
      "inline_response_200_80" : {
        "type" : "object",
        "properties" : {
          "intersects" : {
            "type" : "boolean"
          }
        }
      },
      "rectangleOrientedRectangleIntersection_body" : {
        "required" : [ "rect1", "rect2" ],
        "type" : "object",
        "properties" : {
          "rect1" : {
            "$ref" : "#/components/schemas/Rectangle2D"
          },
          "rect2" : {
            "$ref" : "#/components/schemas/OrientedRectangle"
          }
        }
      },
      "rectangleRectangleSAT_body" : {
        "required" : [ "rect1", "rect2" ],
        "type" : "object",
        "properties" : {
          "rect1" : {
            "$ref" : "#/components/schemas/Rectangle2D"
          },
          "rect2" : {
            "$ref" : "#/components/schemas/Rectangle2D"
          }
        }
      },
      "rectangleRectangleIntersection_body" : {
        "required" : [ "rect1", "rect2" ],
        "type" : "object",
        "properties" : {
          "rect1" : {
            "$ref" : "#/components/schemas/Rectangle2D"
          },
          "rect2" : {
            "$ref" : "#/components/schemas/Rectangle2D"
          }
        }
      },
      "circleOrientedRectangleIntersection_body" : {
        "required" : [ "circle", "orientedRectangle" ],
        "type" : "object",
        "properties" : {
          "circle" : {
            "$ref" : "#/components/schemas/Circle"
          },
          "orientedRectangle" : {
            "$ref" : "#/components/schemas/OrientedRectangle"
          }
        }
      },
      "circleRectangleIntersection_body" : {
        "required" : [ "circle", "rectangle" ],
        "type" : "object",
        "properties" : {
          "circle" : {
            "$ref" : "#/components/schemas/Circle"
          },
          "rectangle" : {
            "$ref" : "#/components/schemas/Rectangle2D"
          }
        }
      },
      "circleCircleIntersection_body" : {
        "required" : [ "circle1", "circle2" ],
        "type" : "object",
        "properties" : {
          "circle1" : {
            "$ref" : "#/components/schemas/Circle"
          },
          "circle2" : {
            "$ref" : "#/components/schemas/Circle"
          }
        }
      },
      "lineOrientedRectangleIntersection_body" : {
        "required" : [ "line", "orientedRectangle" ],
        "type" : "object",
        "properties" : {
          "line" : {
            "$ref" : "#/components/schemas/PolyLine"
          },
          "orientedRectangle" : {
            "$ref" : "#/components/schemas/OrientedRectangle"
          }
        }
      },
      "lineRectangleIntersection_body" : {
        "required" : [ "line", "rectangle" ],
        "type" : "object",
        "properties" : {
          "line" : {
            "$ref" : "#/components/schemas/PolyLine"
          },
          "rectangle" : {
            "$ref" : "#/components/schemas/Rectangle2D"
          }
        }
      },
      "lineCircleIntersection_body" : {
        "required" : [ "circle", "line" ],
        "type" : "object",
        "properties" : {
          "line" : {
            "$ref" : "#/components/schemas/PolyLine"
          },
          "circle" : {
            "$ref" : "#/components/schemas/Circle"
          }
        }
      },
      "pointInOrientedRectangle_body" : {
        "required" : [ "orientedRectangle", "point" ],
        "type" : "object",
        "properties" : {
          "point" : {
            "$ref" : "#/components/schemas/Point"
          },
          "orientedRectangle" : {
            "$ref" : "#/components/schemas/OrientedRectangle"
          }
        }
      },
      "inline_response_200_81" : {
        "type" : "object",
        "properties" : {
          "isInOrientedRectangle" : {
            "type" : "boolean"
          }
        }
      },
      "pointInRectangle_body" : {
        "required" : [ "point", "rectangle" ],
        "type" : "object",
        "properties" : {
          "point" : {
            "$ref" : "#/components/schemas/Point"
          },
          "rectangle" : {
            "$ref" : "#/components/schemas/Rectangle2D"
          }
        }
      },
      "inline_response_200_82" : {
        "type" : "object",
        "properties" : {
          "isInRectangle" : {
            "type" : "boolean"
          }
        }
      },
      "pointInCircle_body" : {
        "required" : [ "circle", "point" ],
        "type" : "object",
        "properties" : {
          "point" : {
            "$ref" : "#/components/schemas/Point"
          },
          "circle" : {
            "$ref" : "#/components/schemas/Circle"
          }
        }
      },
      "inline_response_200_83" : {
        "type" : "object",
        "properties" : {
          "isInCircle" : {
            "type" : "boolean"
          }
        }
      },
      "inline_response_201" : {
        "required" : [ "id", "orientedRectangle" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of the newly created OrientedRectangle."
          },
          "orientedRectangle" : {
            "$ref" : "#/components/schemas/OrientedRectangle"
          }
        }
      },
      "inline_response_201_1" : {
        "required" : [ "id", "rectangle" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the newly created rectangle."
          },
          "rectangle" : {
            "$ref" : "#/components/schemas/Rectangle2D"
          }
        }
      },
      "update_position_body" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The ID of the rectangle to update."
          },
          "newOrigin" : {
            "$ref" : "#/components/schemas/Point"
          }
        }
      },
      "update_size_body" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The ID of the rectangle to update."
          },
          "newSize" : {
            "$ref" : "#/components/schemas/Vector"
          }
        }
      }
    }
  }
}